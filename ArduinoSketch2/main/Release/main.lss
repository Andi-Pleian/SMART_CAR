
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000018c4  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c1  00800152  00800152  000019aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00001a20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000098b1  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022be  00000000  00000000  0000b6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026c6  00000000  00000000  0000d9af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  00010078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002474  00000000  00000000  00010b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ed5  00000000  00000000  00013004  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00016ed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_7>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_18>
      4c:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	f4 01       	movw	r30, r8
      c6:	de 04       	cpc	r13, r14

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e4 ec       	ldi	r30, 0xC4	; 196
      dc:	f8 e1       	ldi	r31, 0x18	; 24
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a2 35       	cpi	r26, 0x52	; 82
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	a2 e5       	ldi	r26, 0x52	; 82
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a3 31       	cpi	r26, 0x13	; 19
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 0c 05 	call	0xa18	; 0xa18 <main>
     114:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     11c:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     11e:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     120:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     122:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     124:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     126:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     128:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     12a:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     12c:	05 c0       	rjmp	.+10     	; 0x138 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     12e:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     130:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     132:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     134:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     136:	61 f1       	breq	.+88     	; 0x190 <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     138:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     13a:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     13c:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     13e:	b9 f3       	breq	.-18     	; 0x12e <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     140:	05 c0       	rjmp	.+10     	; 0x14c <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     142:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     144:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     146:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     148:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     14a:	11 f1       	breq	.+68     	; 0x190 <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     14c:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     14e:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     150:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     152:	f7 cf       	rjmp	.-18     	; 0x142 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     154:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     156:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     158:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     15a:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     15c:	0a c0       	rjmp	.+20     	; 0x172 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     15e:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     160:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     162:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     164:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     166:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     168:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     16a:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     16c:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     16e:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     170:	79 f0       	breq	.+30     	; 0x190 <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     172:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     174:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     176:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     178:	91 f3       	breq	.-28     	; 0x15e <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     17a:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     17c:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     17e:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     180:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     182:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     184:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     186:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     188:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     18a:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     18c:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     18e:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     190:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     192:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     194:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     196:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     198:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     19a:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     19c:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     19e:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     1a0:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     1a2:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     1a4:	08 95       	ret

000001a6 <_ZN6Buzzer9getSigPinEv>:
	}

	unsigned short int Buzzer::getSigPin()
	{
		return this->sigPin;
	}
     1a6:	fc 01       	movw	r30, r24
     1a8:	80 81       	ld	r24, Z
     1aa:	91 81       	ldd	r25, Z+1	; 0x01
     1ac:	08 95       	ret

000001ae <_ZN6Buzzer9setSigPinEt>:

	void Buzzer::setSigPin(unsigned short int sigPin_arg)
	{
		this->sigPin = sigPin_arg;
     1ae:	fc 01       	movw	r30, r24
     1b0:	71 83       	std	Z+1, r23	; 0x01
     1b2:	60 83       	st	Z, r22
     1b4:	08 95       	ret

000001b6 <_ZN6Buzzer4BuzzEj>:
	}

	void Buzzer::Buzz(unsigned int buzzDelay_arg)
	{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	eb 01       	movw	r28, r22
		
		tone(this->getSigPin(), BUZZER_FREQ, BUZZER_DEFAULT_DURATION);
     1bc:	24 ef       	ldi	r18, 0xF4	; 244
     1be:	31 e0       	ldi	r19, 0x01	; 1
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	68 ee       	ldi	r22, 0xE8	; 232
     1c6:	73 e0       	ldi	r23, 0x03	; 3
     1c8:	fc 01       	movw	r30, r24
     1ca:	80 81       	ld	r24, Z
     1cc:	0e 94 13 06 	call	0xc26	; 0xc26 <_Z4tonehjm>
		delay(buzzDelay_arg);
     1d0:	be 01       	movw	r22, r28
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
		
	}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28

	void Buzzer::Buzz(unsigned int buzzDelay_arg)
	{
		
		tone(this->getSigPin(), BUZZER_FREQ, BUZZER_DEFAULT_DURATION);
		delay(buzzDelay_arg);
     1da:	0c 94 95 09 	jmp	0x132a	; 0x132a <delay>

000001de <_ZN3SPSC1Ettt>:
 *
 *	@param[in] trigPin_arg TriggerPin
 *	@param[in] echoPin_arg EchoPin
 *	@param[in] tag_arg SPS's tag
 */
SPS::SPS(unsigned short int trigPin_arg, 
     1de:	fc 01       	movw	r30, r24
		unsigned short int echoPin_arg, 
		unsigned short int buzzerPin_arg) {
			
	this->trigPin			= trigPin_arg;
     1e0:	73 83       	std	Z+3, r23	; 0x03
     1e2:	62 83       	std	Z+2, r22	; 0x02
	this->echoPin			= echoPin_arg;
     1e4:	55 83       	std	Z+5, r21	; 0x05
     1e6:	44 83       	std	Z+4, r20	; 0x04
	this->buzzer->setSigPin(buzzerPin_arg);
     1e8:	b9 01       	movw	r22, r18
     1ea:	80 81       	ld	r24, Z
     1ec:	91 81       	ldd	r25, Z+1	; 0x01
     1ee:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_ZN6Buzzer9setSigPinEt>

000001f2 <_ZN3SPS19getWaveComebackTimeEv>:
 *  receives it back in echoPin from where we get the wave travel time
 *	with pulseIn() method
 *
 *	@return Sound wave travel time
 */
long SPS::getWaveComebackTime() {
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	ec 01       	movw	r28, r24
	digitalWrite(this->trigPin, LOW);						
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	8a 81       	ldd	r24, Y+2	; 0x02
     1fc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <digitalWrite>
	delayMicroseconds(2);
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <delayMicroseconds>
	
	digitalWrite(trigPin, HIGH);						 
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	8a 81       	ldd	r24, Y+2	; 0x02
     20c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <digitalWrite>
	delayMicroseconds(10);								
     210:	8a e0       	ldi	r24, 0x0A	; 10
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <delayMicroseconds>
	digitalWrite(trigPin, LOW);							
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	8a 81       	ldd	r24, Y+2	; 0x02
     21c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <digitalWrite>
	
	
	return pulseIn(echoPin, HIGH);						// Reads the echoPin, returns the sound wave travel time in microseconds
     220:	20 e4       	ldi	r18, 0x40	; 64
     222:	32 e4       	ldi	r19, 0x42	; 66
     224:	4f e0       	ldi	r20, 0x0F	; 15
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
	digitalWrite(trigPin, HIGH);						 
	delayMicroseconds(10);								
	digitalWrite(trigPin, LOW);							
	
	
	return pulseIn(echoPin, HIGH);						// Reads the echoPin, returns the sound wave travel time in microseconds
     230:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <pulseIn>

00000234 <_ZN3SPS19getDistanceToObjectEv>:
 *	using the following formula: Distance = (Time * Speed) / 2
 *	
 *	@return Distance in cm to object
 */
int SPS::getDistanceToObject() {
	return (getWaveComebackTime() * SOUND_SPEED_MS) / 2;	
     234:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN3SPS19getWaveComebackTimeEv>
     238:	0e 94 42 02 	call	0x484	; 0x484 <__floatsisf>
     23c:	26 e9       	ldi	r18, 0x96	; 150
     23e:	33 e4       	ldi	r19, 0x43	; 67
     240:	4b e0       	ldi	r20, 0x0B	; 11
     242:	5d e3       	ldi	r21, 0x3D	; 61
     244:	0e 94 a6 02 	call	0x54c	; 0x54c <__mulsf3>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	5f e3       	ldi	r21, 0x3F	; 63
     250:	0e 94 a6 02 	call	0x54c	; 0x54c <__mulsf3>
     254:	0e 94 0a 02 	call	0x414	; 0x414 <__fixsfsi>
}
     258:	cb 01       	movw	r24, r22
     25a:	08 95       	ret

0000025c <_ZN3SPS19serialPrintDistanceEv>:

/**
 *	Prints distance to object measured by SPS to Serial COM
 *	
 */
void SPS::serialPrintDistance() {
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	ec 01       	movw	r28, r24
	Serial.print("Distance: ");
     262:	67 e0       	ldi	r22, 0x07	; 7
     264:	71 e0       	ldi	r23, 0x01	; 1
     266:	84 e5       	ldi	r24, 0x54	; 84
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN5Print5printEPKc>
	Serial.print(this->getDistanceToObject());
     26e:	ce 01       	movw	r24, r28
     270:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     274:	4a e0       	ldi	r20, 0x0A	; 10
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	bc 01       	movw	r22, r24
     27a:	84 e5       	ldi	r24, 0x54	; 84
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN5Print5printEii>
	Serial.println(" cm");
     282:	62 e1       	ldi	r22, 0x12	; 18
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	84 e5       	ldi	r24, 0x54	; 84
     288:	91 e0       	ldi	r25, 0x01	; 1
}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
 *	
 */
void SPS::serialPrintDistance() {
	Serial.print("Distance: ");
	Serial.print(this->getDistanceToObject());
	Serial.println(" cm");
     28e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <_ZN5Print7printlnEPKc>

00000292 <_ZN3SPS4TaskEv>:
 *	
 *	This function is used to Check distance to object for each stage and call
 *	Buzzer's Task to react to it.
 *	
 */
void SPS::Task() {
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	ec 01       	movw	r28, r24
	if ((this->getDistanceToObject() <= SPS_1ST_STAGE_CM) && (this->getDistanceToObject() > SPS_2ST_STAGE_CM)) {
     298:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     29c:	40 97       	sbiw	r24, 0x10	; 16
     29e:	2c f4       	brge	.+10     	; 0x2aa <_ZN3SPS4TaskEv+0x18>
     2a0:	ce 01       	movw	r24, r28
     2a2:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     2a6:	0b 97       	sbiw	r24, 0x0b	; 11
     2a8:	84 f4       	brge	.+32     	; 0x2ca <_ZN3SPS4TaskEv+0x38>
		
		this->serialPrintDistance();
		this->buzzer->Buzz(BUZZER_1ST_STAGE_DELAY_MS);
		
	} else if ((this->getDistanceToObject() <= SPS_2ST_STAGE_CM) && (this->getDistanceToObject() > SPS_3ST_STAGE_CM)) {
     2aa:	ce 01       	movw	r24, r28
     2ac:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     2b0:	0b 97       	sbiw	r24, 0x0b	; 11
     2b2:	8c f4       	brge	.+34     	; 0x2d6 <_ZN3SPS4TaskEv+0x44>
     2b4:	ce 01       	movw	r24, r28
     2b6:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     2ba:	06 97       	sbiw	r24, 0x06	; 6
     2bc:	64 f0       	brlt	.+24     	; 0x2d6 <_ZN3SPS4TaskEv+0x44>
		
		this->serialPrintDistance();
     2be:	ce 01       	movw	r24, r28
     2c0:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN3SPS19serialPrintDistanceEv>
		this->buzzer->Buzz(BUZZER_2ST_STAGE_DELAY_MS);
     2c4:	60 e2       	ldi	r22, 0x20	; 32
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	36 c0       	rjmp	.+108    	; 0x336 <_ZN3SPS4TaskEv+0xa4>
 *	
 */
void SPS::Task() {
	if ((this->getDistanceToObject() <= SPS_1ST_STAGE_CM) && (this->getDistanceToObject() > SPS_2ST_STAGE_CM)) {
		
		this->serialPrintDistance();
     2ca:	ce 01       	movw	r24, r28
     2cc:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN3SPS19serialPrintDistanceEv>
		this->buzzer->Buzz(BUZZER_1ST_STAGE_DELAY_MS);
     2d0:	68 ee       	ldi	r22, 0xE8	; 232
     2d2:	73 e0       	ldi	r23, 0x03	; 3
     2d4:	30 c0       	rjmp	.+96     	; 0x336 <_ZN3SPS4TaskEv+0xa4>
	} else if ((this->getDistanceToObject() <= SPS_2ST_STAGE_CM) && (this->getDistanceToObject() > SPS_3ST_STAGE_CM)) {
		
		this->serialPrintDistance();
		this->buzzer->Buzz(BUZZER_2ST_STAGE_DELAY_MS);
		
	} else if ((this->getDistanceToObject() <= SPS_3ST_STAGE_CM) && (this->getDistanceToObject() > SPS_4ST_STAGE_CM)) {
     2d6:	ce 01       	movw	r24, r28
     2d8:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     2dc:	06 97       	sbiw	r24, 0x06	; 6
     2de:	5c f4       	brge	.+22     	; 0x2f6 <_ZN3SPS4TaskEv+0x64>
     2e0:	ce 01       	movw	r24, r28
     2e2:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     2e6:	03 97       	sbiw	r24, 0x03	; 3
     2e8:	34 f0       	brlt	.+12     	; 0x2f6 <_ZN3SPS4TaskEv+0x64>
		
		this->serialPrintDistance();
     2ea:	ce 01       	movw	r24, r28
     2ec:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN3SPS19serialPrintDistanceEv>
		this->buzzer->Buzz(BUZZER_3ST_STAGE_DELAY_MS);
     2f0:	68 e5       	ldi	r22, 0x58	; 88
     2f2:	72 e0       	ldi	r23, 0x02	; 2
     2f4:	20 c0       	rjmp	.+64     	; 0x336 <_ZN3SPS4TaskEv+0xa4>
		
	} else if ((this->getDistanceToObject() <= SPS_4ST_STAGE_CM) && (this->getDistanceToObject() > SPS_5ST_STAGE_CM)) {
     2f6:	ce 01       	movw	r24, r28
     2f8:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     2fc:	03 97       	sbiw	r24, 0x03	; 3
     2fe:	5c f4       	brge	.+22     	; 0x316 <_ZN3SPS4TaskEv+0x84>
     300:	ce 01       	movw	r24, r28
     302:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     306:	02 97       	sbiw	r24, 0x02	; 2
     308:	34 f0       	brlt	.+12     	; 0x316 <_ZN3SPS4TaskEv+0x84>
		
		this->serialPrintDistance();
     30a:	ce 01       	movw	r24, r28
     30c:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN3SPS19serialPrintDistanceEv>
		this->buzzer->Buzz(BUZZER_4ST_STAGE_DELAY_MS);
     310:	60 e9       	ldi	r22, 0x90	; 144
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	10 c0       	rjmp	.+32     	; 0x336 <_ZN3SPS4TaskEv+0xa4>
		
	} else if ((this->getDistanceToObject() <= SPS_5ST_STAGE_CM) && (this->getDistanceToObject() > SPS_MIN_DISTANCE_CM)) {
     316:	ce 01       	movw	r24, r28
     318:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     31c:	02 97       	sbiw	r24, 0x02	; 2
     31e:	8c f4       	brge	.+34     	; 0x342 <_ZN3SPS4TaskEv+0xb0>
     320:	ce 01       	movw	r24, r28
     322:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     326:	18 16       	cp	r1, r24
     328:	19 06       	cpc	r1, r25
     32a:	5c f4       	brge	.+22     	; 0x342 <_ZN3SPS4TaskEv+0xb0>
		
		this->serialPrintDistance();
     32c:	ce 01       	movw	r24, r28
     32e:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN3SPS19serialPrintDistanceEv>
		this->buzzer->Buzz(BUZZER_5ST_STAGE_DELAY_MS);
     332:	68 ec       	ldi	r22, 0xC8	; 200
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	88 81       	ld	r24, Y
     338:	99 81       	ldd	r25, Y+1	; 0x01
		
		this->serialPrintDistance();
		this->buzzer->Buzz(BUZZER_MIN_STAGE_DELAY_MS);
		
	}
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
		this->buzzer->Buzz(BUZZER_4ST_STAGE_DELAY_MS);
		
	} else if ((this->getDistanceToObject() <= SPS_5ST_STAGE_CM) && (this->getDistanceToObject() > SPS_MIN_DISTANCE_CM)) {
		
		this->serialPrintDistance();
		this->buzzer->Buzz(BUZZER_5ST_STAGE_DELAY_MS);
     33e:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_ZN6Buzzer4BuzzEj>
		
	} else if (this->getDistanceToObject() <= SPS_MIN_DISTANCE_CM) {
     342:	ce 01       	movw	r24, r28
     344:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN3SPS19getDistanceToObjectEv>
     348:	18 16       	cp	r1, r24
     34a:	19 06       	cpc	r1, r25
     34c:	34 f0       	brlt	.+12     	; 0x35a <_ZN3SPS4TaskEv+0xc8>
		
		this->serialPrintDistance();
     34e:	ce 01       	movw	r24, r28
     350:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN3SPS19serialPrintDistanceEv>
		this->buzzer->Buzz(BUZZER_MIN_STAGE_DELAY_MS);
     354:	64 e6       	ldi	r22, 0x64	; 100
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	ee cf       	rjmp	.-36     	; 0x336 <_ZN3SPS4TaskEv+0xa4>
		
	}
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <_ZN3SPS10getTrigPinEv>:
 *	Trig Pin getter
 */
unsigned short int SPS::getTrigPin()
{
	return this->trigPin;
}
     360:	fc 01       	movw	r30, r24
     362:	82 81       	ldd	r24, Z+2	; 0x02
     364:	93 81       	ldd	r25, Z+3	; 0x03
     366:	08 95       	ret

00000368 <_ZN3SPS10getEchoPinEv>:
 *	Echo Pin getter
 */
unsigned short int SPS::getEchoPin()
{
	return this->echoPin;
}
     368:	fc 01       	movw	r30, r24
     36a:	84 81       	ldd	r24, Z+4	; 0x04
     36c:	95 81       	ldd	r25, Z+5	; 0x05
     36e:	08 95       	ret

00000370 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     370:	26 e0       	ldi	r18, 0x06	; 6
     372:	40 e8       	ldi	r20, 0x80	; 128
     374:	55 e2       	ldi	r21, 0x25	; 37
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	84 e5       	ldi	r24, 0x54	; 84
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN14HardwareSerial5beginEmh>
 *	Used as Startup function, called before infinite loop starts and it runs only once 
 */
void setup() {
	
	Serial.begin(9600);
	Serial.print("SMART_CAR SPS TEST STARTED");
     382:	66 e1       	ldi	r22, 0x16	; 22
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	84 e5       	ldi	r24, 0x54	; 84
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN5Print5printEPKc>

	pinMode		(S1->			getTrigPin(),	OUTPUT);
     38e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     392:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
     396:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN3SPS10getTrigPinEv>
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	0e 94 40 0a 	call	0x1480	; 0x1480 <pinMode>
	pinMode		(S1->			getEchoPin(),	INPUT);
     3a0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     3a4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
     3a8:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN3SPS10getEchoPinEv>
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	0e 94 40 0a 	call	0x1480	; 0x1480 <pinMode>
	
	pinMode		(S1->buzzer->	getSigPin(),	OUTPUT);
     3b2:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <__data_end>
     3b6:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <__data_end+0x1>
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN6Buzzer9getSigPinEv>
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	0e 94 40 0a 	call	0x1480	; 0x1480 <pinMode>
	
	
	
	//S1->buzzer->Task(1000);
	S1->buzzer->Buzz(1000);
     3c8:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <__data_end>
     3cc:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <__data_end+0x1>
     3d0:	68 ee       	ldi	r22, 0xE8	; 232
     3d2:	73 e0       	ldi	r23, 0x03	; 3
     3d4:	80 81       	ld	r24, Z
     3d6:	91 81       	ldd	r25, Z+1	; 0x01
     3d8:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_ZN6Buzzer4BuzzEj>

000003dc <loop>:
/*
 *	Loop Function
 *	Used as infinite loop
 */
void loop() {
	S1->Task();
     3dc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     3e0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
     3e4:	0c 94 49 01 	jmp	0x292	; 0x292 <_ZN3SPS4TaskEv>

000003e8 <_GLOBAL__sub_I_S1>:
}
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
/*				Global Declarations and Initializations					*/
/************************************************************************/

#pragma region Global Declarations and Initializations

SPS*	S1 = new SPS	(3, 2, 8);
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Znwj>
     3f4:	ec 01       	movw	r28, r24
     3f6:	28 e0       	ldi	r18, 0x08	; 8
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	42 e0       	ldi	r20, 0x02	; 2
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	63 e0       	ldi	r22, 0x03	; 3
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN3SPSC1Ettt>
     406:	d0 93 53 01 	sts	0x0153, r29	; 0x800153 <__data_end+0x1>
     40a:	c0 93 52 01 	sts	0x0152, r28	; 0x800152 <__data_end>
 *	Loop Function
 *	Used as infinite loop
 */
void loop() {
	S1->Task();
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <__fixsfsi>:
     414:	0e 94 11 02 	call	0x422	; 0x422 <__fixunssfsi>
     418:	68 94       	set
     41a:	b1 11       	cpse	r27, r1
     41c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__fp_szero>
     420:	08 95       	ret

00000422 <__fixunssfsi>:
     422:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_splitA>
     426:	88 f0       	brcs	.+34     	; 0x44a <__fixunssfsi+0x28>
     428:	9f 57       	subi	r25, 0x7F	; 127
     42a:	98 f0       	brcs	.+38     	; 0x452 <__fixunssfsi+0x30>
     42c:	b9 2f       	mov	r27, r25
     42e:	99 27       	eor	r25, r25
     430:	b7 51       	subi	r27, 0x17	; 23
     432:	b0 f0       	brcs	.+44     	; 0x460 <__fixunssfsi+0x3e>
     434:	e1 f0       	breq	.+56     	; 0x46e <__fixunssfsi+0x4c>
     436:	66 0f       	add	r22, r22
     438:	77 1f       	adc	r23, r23
     43a:	88 1f       	adc	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	1a f0       	brmi	.+6      	; 0x446 <__fixunssfsi+0x24>
     440:	ba 95       	dec	r27
     442:	c9 f7       	brne	.-14     	; 0x436 <__fixunssfsi+0x14>
     444:	14 c0       	rjmp	.+40     	; 0x46e <__fixunssfsi+0x4c>
     446:	b1 30       	cpi	r27, 0x01	; 1
     448:	91 f0       	breq	.+36     	; 0x46e <__fixunssfsi+0x4c>
     44a:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_zero>
     44e:	b1 e0       	ldi	r27, 0x01	; 1
     450:	08 95       	ret
     452:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_zero>
     456:	67 2f       	mov	r22, r23
     458:	78 2f       	mov	r23, r24
     45a:	88 27       	eor	r24, r24
     45c:	b8 5f       	subi	r27, 0xF8	; 248
     45e:	39 f0       	breq	.+14     	; 0x46e <__fixunssfsi+0x4c>
     460:	b9 3f       	cpi	r27, 0xF9	; 249
     462:	cc f3       	brlt	.-14     	; 0x456 <__fixunssfsi+0x34>
     464:	86 95       	lsr	r24
     466:	77 95       	ror	r23
     468:	67 95       	ror	r22
     46a:	b3 95       	inc	r27
     46c:	d9 f7       	brne	.-10     	; 0x464 <__fixunssfsi+0x42>
     46e:	3e f4       	brtc	.+14     	; 0x47e <__fixunssfsi+0x5c>
     470:	90 95       	com	r25
     472:	80 95       	com	r24
     474:	70 95       	com	r23
     476:	61 95       	neg	r22
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	8f 4f       	sbci	r24, 0xFF	; 255
     47c:	9f 4f       	sbci	r25, 0xFF	; 255
     47e:	08 95       	ret

00000480 <__floatunsisf>:
     480:	e8 94       	clt
     482:	09 c0       	rjmp	.+18     	; 0x496 <__floatsisf+0x12>

00000484 <__floatsisf>:
     484:	97 fb       	bst	r25, 7
     486:	3e f4       	brtc	.+14     	; 0x496 <__floatsisf+0x12>
     488:	90 95       	com	r25
     48a:	80 95       	com	r24
     48c:	70 95       	com	r23
     48e:	61 95       	neg	r22
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	8f 4f       	sbci	r24, 0xFF	; 255
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	99 23       	and	r25, r25
     498:	a9 f0       	breq	.+42     	; 0x4c4 <__floatsisf+0x40>
     49a:	f9 2f       	mov	r31, r25
     49c:	96 e9       	ldi	r25, 0x96	; 150
     49e:	bb 27       	eor	r27, r27
     4a0:	93 95       	inc	r25
     4a2:	f6 95       	lsr	r31
     4a4:	87 95       	ror	r24
     4a6:	77 95       	ror	r23
     4a8:	67 95       	ror	r22
     4aa:	b7 95       	ror	r27
     4ac:	f1 11       	cpse	r31, r1
     4ae:	f8 cf       	rjmp	.-16     	; 0x4a0 <__floatsisf+0x1c>
     4b0:	fa f4       	brpl	.+62     	; 0x4f0 <__floatsisf+0x6c>
     4b2:	bb 0f       	add	r27, r27
     4b4:	11 f4       	brne	.+4      	; 0x4ba <__floatsisf+0x36>
     4b6:	60 ff       	sbrs	r22, 0
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <__floatsisf+0x6c>
     4ba:	6f 5f       	subi	r22, 0xFF	; 255
     4bc:	7f 4f       	sbci	r23, 0xFF	; 255
     4be:	8f 4f       	sbci	r24, 0xFF	; 255
     4c0:	9f 4f       	sbci	r25, 0xFF	; 255
     4c2:	16 c0       	rjmp	.+44     	; 0x4f0 <__floatsisf+0x6c>
     4c4:	88 23       	and	r24, r24
     4c6:	11 f0       	breq	.+4      	; 0x4cc <__floatsisf+0x48>
     4c8:	96 e9       	ldi	r25, 0x96	; 150
     4ca:	11 c0       	rjmp	.+34     	; 0x4ee <__floatsisf+0x6a>
     4cc:	77 23       	and	r23, r23
     4ce:	21 f0       	breq	.+8      	; 0x4d8 <__floatsisf+0x54>
     4d0:	9e e8       	ldi	r25, 0x8E	; 142
     4d2:	87 2f       	mov	r24, r23
     4d4:	76 2f       	mov	r23, r22
     4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <__floatsisf+0x5e>
     4d8:	66 23       	and	r22, r22
     4da:	71 f0       	breq	.+28     	; 0x4f8 <__floatsisf+0x74>
     4dc:	96 e8       	ldi	r25, 0x86	; 134
     4de:	86 2f       	mov	r24, r22
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	2a f0       	brmi	.+10     	; 0x4f0 <__floatsisf+0x6c>
     4e6:	9a 95       	dec	r25
     4e8:	66 0f       	add	r22, r22
     4ea:	77 1f       	adc	r23, r23
     4ec:	88 1f       	adc	r24, r24
     4ee:	da f7       	brpl	.-10     	; 0x4e6 <__floatsisf+0x62>
     4f0:	88 0f       	add	r24, r24
     4f2:	96 95       	lsr	r25
     4f4:	87 95       	ror	r24
     4f6:	97 f9       	bld	r25, 7
     4f8:	08 95       	ret

000004fa <__fp_split3>:
     4fa:	57 fd       	sbrc	r21, 7
     4fc:	90 58       	subi	r25, 0x80	; 128
     4fe:	44 0f       	add	r20, r20
     500:	55 1f       	adc	r21, r21
     502:	59 f0       	breq	.+22     	; 0x51a <__fp_splitA+0x10>
     504:	5f 3f       	cpi	r21, 0xFF	; 255
     506:	71 f0       	breq	.+28     	; 0x524 <__fp_splitA+0x1a>
     508:	47 95       	ror	r20

0000050a <__fp_splitA>:
     50a:	88 0f       	add	r24, r24
     50c:	97 fb       	bst	r25, 7
     50e:	99 1f       	adc	r25, r25
     510:	61 f0       	breq	.+24     	; 0x52a <__fp_splitA+0x20>
     512:	9f 3f       	cpi	r25, 0xFF	; 255
     514:	79 f0       	breq	.+30     	; 0x534 <__fp_splitA+0x2a>
     516:	87 95       	ror	r24
     518:	08 95       	ret
     51a:	12 16       	cp	r1, r18
     51c:	13 06       	cpc	r1, r19
     51e:	14 06       	cpc	r1, r20
     520:	55 1f       	adc	r21, r21
     522:	f2 cf       	rjmp	.-28     	; 0x508 <__fp_split3+0xe>
     524:	46 95       	lsr	r20
     526:	f1 df       	rcall	.-30     	; 0x50a <__fp_splitA>
     528:	08 c0       	rjmp	.+16     	; 0x53a <__fp_splitA+0x30>
     52a:	16 16       	cp	r1, r22
     52c:	17 06       	cpc	r1, r23
     52e:	18 06       	cpc	r1, r24
     530:	99 1f       	adc	r25, r25
     532:	f1 cf       	rjmp	.-30     	; 0x516 <__fp_splitA+0xc>
     534:	86 95       	lsr	r24
     536:	71 05       	cpc	r23, r1
     538:	61 05       	cpc	r22, r1
     53a:	08 94       	sec
     53c:	08 95       	ret

0000053e <__fp_zero>:
     53e:	e8 94       	clt

00000540 <__fp_szero>:
     540:	bb 27       	eor	r27, r27
     542:	66 27       	eor	r22, r22
     544:	77 27       	eor	r23, r23
     546:	cb 01       	movw	r24, r22
     548:	97 f9       	bld	r25, 7
     54a:	08 95       	ret

0000054c <__mulsf3>:
     54c:	0e 94 b9 02 	call	0x572	; 0x572 <__mulsf3x>
     550:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_round>
     554:	0e 94 1c 03 	call	0x638	; 0x638 <__fp_pscA>
     558:	38 f0       	brcs	.+14     	; 0x568 <__mulsf3+0x1c>
     55a:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscB>
     55e:	20 f0       	brcs	.+8      	; 0x568 <__mulsf3+0x1c>
     560:	95 23       	and	r25, r21
     562:	11 f0       	breq	.+4      	; 0x568 <__mulsf3+0x1c>
     564:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>
     568:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_nan>
     56c:	11 24       	eor	r1, r1
     56e:	0c 94 a0 02 	jmp	0x540	; 0x540 <__fp_szero>

00000572 <__mulsf3x>:
     572:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_split3>
     576:	70 f3       	brcs	.-36     	; 0x554 <__mulsf3+0x8>

00000578 <__mulsf3_pse>:
     578:	95 9f       	mul	r25, r21
     57a:	c1 f3       	breq	.-16     	; 0x56c <__mulsf3+0x20>
     57c:	95 0f       	add	r25, r21
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	55 1f       	adc	r21, r21
     582:	62 9f       	mul	r22, r18
     584:	f0 01       	movw	r30, r0
     586:	72 9f       	mul	r23, r18
     588:	bb 27       	eor	r27, r27
     58a:	f0 0d       	add	r31, r0
     58c:	b1 1d       	adc	r27, r1
     58e:	63 9f       	mul	r22, r19
     590:	aa 27       	eor	r26, r26
     592:	f0 0d       	add	r31, r0
     594:	b1 1d       	adc	r27, r1
     596:	aa 1f       	adc	r26, r26
     598:	64 9f       	mul	r22, r20
     59a:	66 27       	eor	r22, r22
     59c:	b0 0d       	add	r27, r0
     59e:	a1 1d       	adc	r26, r1
     5a0:	66 1f       	adc	r22, r22
     5a2:	82 9f       	mul	r24, r18
     5a4:	22 27       	eor	r18, r18
     5a6:	b0 0d       	add	r27, r0
     5a8:	a1 1d       	adc	r26, r1
     5aa:	62 1f       	adc	r22, r18
     5ac:	73 9f       	mul	r23, r19
     5ae:	b0 0d       	add	r27, r0
     5b0:	a1 1d       	adc	r26, r1
     5b2:	62 1f       	adc	r22, r18
     5b4:	83 9f       	mul	r24, r19
     5b6:	a0 0d       	add	r26, r0
     5b8:	61 1d       	adc	r22, r1
     5ba:	22 1f       	adc	r18, r18
     5bc:	74 9f       	mul	r23, r20
     5be:	33 27       	eor	r19, r19
     5c0:	a0 0d       	add	r26, r0
     5c2:	61 1d       	adc	r22, r1
     5c4:	23 1f       	adc	r18, r19
     5c6:	84 9f       	mul	r24, r20
     5c8:	60 0d       	add	r22, r0
     5ca:	21 1d       	adc	r18, r1
     5cc:	82 2f       	mov	r24, r18
     5ce:	76 2f       	mov	r23, r22
     5d0:	6a 2f       	mov	r22, r26
     5d2:	11 24       	eor	r1, r1
     5d4:	9f 57       	subi	r25, 0x7F	; 127
     5d6:	50 40       	sbci	r21, 0x00	; 0
     5d8:	9a f0       	brmi	.+38     	; 0x600 <__mulsf3_pse+0x88>
     5da:	f1 f0       	breq	.+60     	; 0x618 <__mulsf3_pse+0xa0>
     5dc:	88 23       	and	r24, r24
     5de:	4a f0       	brmi	.+18     	; 0x5f2 <__mulsf3_pse+0x7a>
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	bb 1f       	adc	r27, r27
     5e6:	66 1f       	adc	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	88 1f       	adc	r24, r24
     5ec:	91 50       	subi	r25, 0x01	; 1
     5ee:	50 40       	sbci	r21, 0x00	; 0
     5f0:	a9 f7       	brne	.-22     	; 0x5dc <__mulsf3_pse+0x64>
     5f2:	9e 3f       	cpi	r25, 0xFE	; 254
     5f4:	51 05       	cpc	r21, r1
     5f6:	80 f0       	brcs	.+32     	; 0x618 <__mulsf3_pse+0xa0>
     5f8:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>
     5fc:	0c 94 a0 02 	jmp	0x540	; 0x540 <__fp_szero>
     600:	5f 3f       	cpi	r21, 0xFF	; 255
     602:	e4 f3       	brlt	.-8      	; 0x5fc <__mulsf3_pse+0x84>
     604:	98 3e       	cpi	r25, 0xE8	; 232
     606:	d4 f3       	brlt	.-12     	; 0x5fc <__mulsf3_pse+0x84>
     608:	86 95       	lsr	r24
     60a:	77 95       	ror	r23
     60c:	67 95       	ror	r22
     60e:	b7 95       	ror	r27
     610:	f7 95       	ror	r31
     612:	e7 95       	ror	r30
     614:	9f 5f       	subi	r25, 0xFF	; 255
     616:	c1 f7       	brne	.-16     	; 0x608 <__mulsf3_pse+0x90>
     618:	fe 2b       	or	r31, r30
     61a:	88 0f       	add	r24, r24
     61c:	91 1d       	adc	r25, r1
     61e:	96 95       	lsr	r25
     620:	87 95       	ror	r24
     622:	97 f9       	bld	r25, 7
     624:	08 95       	ret

00000626 <__fp_inf>:
     626:	97 f9       	bld	r25, 7
     628:	9f 67       	ori	r25, 0x7F	; 127
     62a:	80 e8       	ldi	r24, 0x80	; 128
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	08 95       	ret

00000632 <__fp_nan>:
     632:	9f ef       	ldi	r25, 0xFF	; 255
     634:	80 ec       	ldi	r24, 0xC0	; 192
     636:	08 95       	ret

00000638 <__fp_pscA>:
     638:	00 24       	eor	r0, r0
     63a:	0a 94       	dec	r0
     63c:	16 16       	cp	r1, r22
     63e:	17 06       	cpc	r1, r23
     640:	18 06       	cpc	r1, r24
     642:	09 06       	cpc	r0, r25
     644:	08 95       	ret

00000646 <__fp_pscB>:
     646:	00 24       	eor	r0, r0
     648:	0a 94       	dec	r0
     64a:	12 16       	cp	r1, r18
     64c:	13 06       	cpc	r1, r19
     64e:	14 06       	cpc	r1, r20
     650:	05 06       	cpc	r0, r21
     652:	08 95       	ret

00000654 <__fp_round>:
     654:	09 2e       	mov	r0, r25
     656:	03 94       	inc	r0
     658:	00 0c       	add	r0, r0
     65a:	11 f4       	brne	.+4      	; 0x660 <__fp_round+0xc>
     65c:	88 23       	and	r24, r24
     65e:	52 f0       	brmi	.+20     	; 0x674 <__fp_round+0x20>
     660:	bb 0f       	add	r27, r27
     662:	40 f4       	brcc	.+16     	; 0x674 <__fp_round+0x20>
     664:	bf 2b       	or	r27, r31
     666:	11 f4       	brne	.+4      	; 0x66c <__fp_round+0x18>
     668:	60 ff       	sbrs	r22, 0
     66a:	04 c0       	rjmp	.+8      	; 0x674 <__fp_round+0x20>
     66c:	6f 5f       	subi	r22, 0xFF	; 255
     66e:	7f 4f       	sbci	r23, 0xFF	; 255
     670:	8f 4f       	sbci	r24, 0xFF	; 255
     672:	9f 4f       	sbci	r25, 0xFF	; 255
     674:	08 95       	ret

00000676 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     676:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     678:	91 8d       	ldd	r25, Z+25	; 0x19
     67a:	22 8d       	ldd	r18, Z+26	; 0x1a
     67c:	89 2f       	mov	r24, r25
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	80 5c       	subi	r24, 0xC0	; 192
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	82 1b       	sub	r24, r18
     686:	91 09       	sbc	r25, r1
}
     688:	8f 73       	andi	r24, 0x3F	; 63
     68a:	99 27       	eor	r25, r25
     68c:	08 95       	ret

0000068e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     68e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     690:	91 8d       	ldd	r25, Z+25	; 0x19
     692:	82 8d       	ldd	r24, Z+26	; 0x1a
     694:	98 17       	cp	r25, r24
     696:	31 f0       	breq	.+12     	; 0x6a4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     698:	82 8d       	ldd	r24, Z+26	; 0x1a
     69a:	e8 0f       	add	r30, r24
     69c:	f1 1d       	adc	r31, r1
     69e:	85 8d       	ldd	r24, Z+29	; 0x1d
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     6a8:	08 95       	ret

000006aa <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     6aa:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     6ac:	91 8d       	ldd	r25, Z+25	; 0x19
     6ae:	82 8d       	ldd	r24, Z+26	; 0x1a
     6b0:	98 17       	cp	r25, r24
     6b2:	61 f0       	breq	.+24     	; 0x6cc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     6b4:	82 8d       	ldd	r24, Z+26	; 0x1a
     6b6:	df 01       	movw	r26, r30
     6b8:	a8 0f       	add	r26, r24
     6ba:	b1 1d       	adc	r27, r1
     6bc:	5d 96       	adiw	r26, 0x1d	; 29
     6be:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     6c0:	92 8d       	ldd	r25, Z+26	; 0x1a
     6c2:	9f 5f       	subi	r25, 0xFF	; 255
     6c4:	9f 73       	andi	r25, 0x3F	; 63
     6c6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     6d0:	08 95       	ret

000006d2 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     6d2:	fc 01       	movw	r30, r24
     6d4:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     6d6:	44 8d       	ldd	r20, Z+28	; 0x1c
     6d8:	25 2f       	mov	r18, r21
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	84 2f       	mov	r24, r20
     6de:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     6e0:	82 1b       	sub	r24, r18
     6e2:	93 0b       	sbc	r25, r19
     6e4:	54 17       	cp	r21, r20
     6e6:	10 f0       	brcs	.+4      	; 0x6ec <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     6e8:	cf 96       	adiw	r24, 0x3f	; 63
     6ea:	08 95       	ret
  return tail - head - 1;
     6ec:	01 97       	sbiw	r24, 0x01	; 1
}
     6ee:	08 95       	ret

000006f0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     6f0:	84 ed       	ldi	r24, 0xD4	; 212
     6f2:	94 e0       	ldi	r25, 0x04	; 4
     6f4:	89 2b       	or	r24, r25
     6f6:	49 f0       	breq	.+18     	; 0x70a <_Z14serialEventRunv+0x1a>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	89 2b       	or	r24, r25
     6fe:	29 f0       	breq	.+10     	; 0x70a <_Z14serialEventRunv+0x1a>
     700:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z17Serial0_availablev>
     704:	81 11       	cpse	r24, r1
     706:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     70a:	08 95       	ret

0000070c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     70c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     70e:	84 8d       	ldd	r24, Z+28	; 0x1c
     710:	df 01       	movw	r26, r30
     712:	a8 0f       	add	r26, r24
     714:	b1 1d       	adc	r27, r1
     716:	a3 5a       	subi	r26, 0xA3	; 163
     718:	bf 4f       	sbci	r27, 0xFF	; 255
     71a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     71c:	84 8d       	ldd	r24, Z+28	; 0x1c
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	8f 73       	andi	r24, 0x3F	; 63
     724:	99 27       	eor	r25, r25
     726:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     728:	a6 89       	ldd	r26, Z+22	; 0x16
     72a:	b7 89       	ldd	r27, Z+23	; 0x17
     72c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     72e:	a0 89       	ldd	r26, Z+16	; 0x10
     730:	b1 89       	ldd	r27, Z+17	; 0x11
     732:	8c 91       	ld	r24, X
     734:	83 70       	andi	r24, 0x03	; 3
     736:	80 64       	ori	r24, 0x40	; 64
     738:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     73a:	93 8d       	ldd	r25, Z+27	; 0x1b
     73c:	84 8d       	ldd	r24, Z+28	; 0x1c
     73e:	98 13       	cpse	r25, r24
     740:	06 c0       	rjmp	.+12     	; 0x74e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     742:	02 88       	ldd	r0, Z+18	; 0x12
     744:	f3 89       	ldd	r31, Z+19	; 0x13
     746:	e0 2d       	mov	r30, r0
     748:	80 81       	ld	r24, Z
     74a:	8f 7d       	andi	r24, 0xDF	; 223
     74c:	80 83       	st	Z, r24
     74e:	08 95       	ret

00000750 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	ec 01       	movw	r28, r24
  _written = true;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     762:	9b 8d       	ldd	r25, Y+27	; 0x1b
     764:	8c 8d       	ldd	r24, Y+28	; 0x1c
     766:	98 13       	cpse	r25, r24
     768:	05 c0       	rjmp	.+10     	; 0x774 <_ZN14HardwareSerial5writeEh+0x24>
     76a:	e8 89       	ldd	r30, Y+16	; 0x10
     76c:	f9 89       	ldd	r31, Y+17	; 0x11
     76e:	80 81       	ld	r24, Z
     770:	85 fd       	sbrc	r24, 5
     772:	26 c0       	rjmp	.+76     	; 0x7c0 <_ZN14HardwareSerial5writeEh+0x70>
     774:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     776:	0b 8d       	ldd	r16, Y+27	; 0x1b
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	0f 5f       	subi	r16, 0xFF	; 255
     77c:	1f 4f       	sbci	r17, 0xFF	; 255
     77e:	0f 73       	andi	r16, 0x3F	; 63
     780:	11 27       	eor	r17, r17
     782:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     784:	8c 8d       	ldd	r24, Y+28	; 0x1c
     786:	e8 12       	cpse	r14, r24
     788:	0c c0       	rjmp	.+24     	; 0x7a2 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	07 fc       	sbrc	r0, 7
     78e:	fa cf       	rjmp	.-12     	; 0x784 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     790:	e8 89       	ldd	r30, Y+16	; 0x10
     792:	f9 89       	ldd	r31, Y+17	; 0x11
     794:	80 81       	ld	r24, Z
     796:	85 ff       	sbrs	r24, 5
     798:	f5 cf       	rjmp	.-22     	; 0x784 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     79a:	ce 01       	movw	r24, r28
     79c:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7a0:	f1 cf       	rjmp	.-30     	; 0x784 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     7a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7a4:	fe 01       	movw	r30, r28
     7a6:	e8 0f       	add	r30, r24
     7a8:	f1 1d       	adc	r31, r1
     7aa:	e3 5a       	subi	r30, 0xA3	; 163
     7ac:	ff 4f       	sbci	r31, 0xFF	; 255
     7ae:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7b0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7b2:	f8 94       	cli
    _tx_buffer_head = i;
     7b4:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     7b6:	ea 89       	ldd	r30, Y+18	; 0x12
     7b8:	fb 89       	ldd	r31, Y+19	; 0x13
     7ba:	80 81       	ld	r24, Z
     7bc:	80 62       	ori	r24, 0x20	; 32
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7c0:	9f b7       	in	r25, 0x3f	; 63
     7c2:	f8 94       	cli
      *_udr = c;
     7c4:	ee 89       	ldd	r30, Y+22	; 0x16
     7c6:	ff 89       	ldd	r31, Y+23	; 0x17
     7c8:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     7ca:	e8 89       	ldd	r30, Y+16	; 0x10
     7cc:	f9 89       	ldd	r31, Y+17	; 0x11
     7ce:	80 81       	ld	r24, Z
     7d0:	83 70       	andi	r24, 0x03	; 3
     7d2:	80 64       	ori	r24, 0x40	; 64
     7d4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7d6:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	08 95       	ret

000007ea <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     7f0:	88 8d       	ldd	r24, Y+24	; 0x18
     7f2:	88 23       	and	r24, r24
     7f4:	c9 f0       	breq	.+50     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     7f6:	ea 89       	ldd	r30, Y+18	; 0x12
     7f8:	fb 89       	ldd	r31, Y+19	; 0x13
     7fa:	80 81       	ld	r24, Z
     7fc:	85 fd       	sbrc	r24, 5
     7fe:	05 c0       	rjmp	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     800:	a8 89       	ldd	r26, Y+16	; 0x10
     802:	b9 89       	ldd	r27, Y+17	; 0x11
     804:	8c 91       	ld	r24, X
     806:	86 fd       	sbrc	r24, 6
     808:	0f c0       	rjmp	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	07 fc       	sbrc	r0, 7
     80e:	f5 cf       	rjmp	.-22     	; 0x7fa <_ZN14HardwareSerial5flushEv+0x10>
     810:	80 81       	ld	r24, Z
     812:	85 ff       	sbrs	r24, 5
     814:	f2 cf       	rjmp	.-28     	; 0x7fa <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     816:	a8 89       	ldd	r26, Y+16	; 0x10
     818:	b9 89       	ldd	r27, Y+17	; 0x11
     81a:	8c 91       	ld	r24, X
     81c:	85 ff       	sbrs	r24, 5
     81e:	ed cf       	rjmp	.-38     	; 0x7fa <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     820:	ce 01       	movw	r24, r28
     822:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     826:	e7 cf       	rjmp	.-50     	; 0x7f6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
     83e:	6a 01       	movw	r12, r20
     840:	7b 01       	movw	r14, r22
     842:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     844:	e8 89       	ldd	r30, Y+16	; 0x10
     846:	f9 89       	ldd	r31, Y+17	; 0x11
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     84c:	41 15       	cp	r20, r1
     84e:	51 4e       	sbci	r21, 0xE1	; 225
     850:	61 05       	cpc	r22, r1
     852:	71 05       	cpc	r23, r1
     854:	b1 f0       	breq	.+44     	; 0x882 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	79 e0       	ldi	r23, 0x09	; 9
     85a:	8d e3       	ldi	r24, 0x3D	; 61
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	a7 01       	movw	r20, r14
     860:	96 01       	movw	r18, r12
     862:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__udivmodsi4>
     866:	da 01       	movw	r26, r20
     868:	c9 01       	movw	r24, r18
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	b6 95       	lsr	r27
     872:	a7 95       	ror	r26
     874:	97 95       	ror	r25
     876:	87 95       	ror	r24
     878:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     87a:	21 15       	cp	r18, r1
     87c:	80 e1       	ldi	r24, 0x10	; 16
     87e:	38 07       	cpc	r19, r24
     880:	a8 f0       	brcs	.+42     	; 0x8ac <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     882:	e8 89       	ldd	r30, Y+16	; 0x10
     884:	f9 89       	ldd	r31, Y+17	; 0x11
     886:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     888:	60 e8       	ldi	r22, 0x80	; 128
     88a:	74 e8       	ldi	r23, 0x84	; 132
     88c:	8e e1       	ldi	r24, 0x1E	; 30
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	a7 01       	movw	r20, r14
     892:	96 01       	movw	r18, r12
     894:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__udivmodsi4>
     898:	da 01       	movw	r26, r20
     89a:	c9 01       	movw	r24, r18
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	a1 09       	sbc	r26, r1
     8a0:	b1 09       	sbc	r27, r1
     8a2:	b6 95       	lsr	r27
     8a4:	a7 95       	ror	r26
     8a6:	97 95       	ror	r25
     8a8:	87 95       	ror	r24
     8aa:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     8ac:	ec 85       	ldd	r30, Y+12	; 0x0c
     8ae:	fd 85       	ldd	r31, Y+13	; 0x0d
     8b0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     8b2:	ee 85       	ldd	r30, Y+14	; 0x0e
     8b4:	ff 85       	ldd	r31, Y+15	; 0x0f
     8b6:	20 83       	st	Z, r18

  _written = false;
     8b8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     8ba:	ec 89       	ldd	r30, Y+20	; 0x14
     8bc:	fd 89       	ldd	r31, Y+21	; 0x15
     8be:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     8c0:	ea 89       	ldd	r30, Y+18	; 0x12
     8c2:	fb 89       	ldd	r31, Y+19	; 0x13
     8c4:	80 81       	ld	r24, Z
     8c6:	80 61       	ori	r24, 0x10	; 16
     8c8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     8ca:	ea 89       	ldd	r30, Y+18	; 0x12
     8cc:	fb 89       	ldd	r31, Y+19	; 0x13
     8ce:	80 81       	ld	r24, Z
     8d0:	88 60       	ori	r24, 0x08	; 8
     8d2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     8d4:	ea 89       	ldd	r30, Y+18	; 0x12
     8d6:	fb 89       	ldd	r31, Y+19	; 0x13
     8d8:	80 81       	ld	r24, Z
     8da:	80 68       	ori	r24, 0x80	; 128
     8dc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     8de:	ea 89       	ldd	r30, Y+18	; 0x12
     8e0:	fb 89       	ldd	r31, Y+19	; 0x13
     8e2:	80 81       	ld	r24, Z
     8e4:	8f 7d       	andi	r24, 0xDF	; 223
     8e6:	80 83       	st	Z, r24
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	08 95       	ret

000008f8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	ef 93       	push	r30
     90a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     90c:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <Serial+0x10>
     910:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <Serial+0x11>
     914:	80 81       	ld	r24, Z
     916:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Serial+0x16>
     91a:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <Serial+0x17>
     91e:	82 fd       	sbrc	r24, 2
     920:	12 c0       	rjmp	.+36     	; 0x946 <__stack+0x47>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     922:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     924:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <Serial+0x19>
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     92c:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <Serial+0x1a>
     930:	82 17       	cp	r24, r18
     932:	51 f0       	breq	.+20     	; 0x948 <__stack+0x49>
      _rx_buffer[_rx_buffer_head] = c;
     934:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Serial+0x19>
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	ec 5a       	subi	r30, 0xAC	; 172
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     940:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <Serial+0x19>
     944:	01 c0       	rjmp	.+2      	; 0x948 <__stack+0x49>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     946:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     948:	ff 91       	pop	r31
     94a:	ef 91       	pop	r30
     94c:	9f 91       	pop	r25
     94e:	8f 91       	pop	r24
     950:	2f 91       	pop	r18
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	0f 90       	pop	r0
     958:	1f 90       	pop	r1
     95a:	18 95       	reti

0000095c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     95c:	1f 92       	push	r1
     95e:	0f 92       	push	r0
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	0f 92       	push	r0
     964:	11 24       	eor	r1, r1
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	4f 93       	push	r20
     96c:	5f 93       	push	r21
     96e:	6f 93       	push	r22
     970:	7f 93       	push	r23
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
     97a:	ef 93       	push	r30
     97c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     97e:	84 e5       	ldi	r24, 0x54	; 84
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	bf 91       	pop	r27
     98c:	af 91       	pop	r26
     98e:	9f 91       	pop	r25
     990:	8f 91       	pop	r24
     992:	7f 91       	pop	r23
     994:	6f 91       	pop	r22
     996:	5f 91       	pop	r21
     998:	4f 91       	pop	r20
     99a:	3f 91       	pop	r19
     99c:	2f 91       	pop	r18
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     9a8:	84 e5       	ldi	r24, 0x54	; 84
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN14HardwareSerial9availableEv>
     9b0:	21 e0       	ldi	r18, 0x01	; 1
     9b2:	89 2b       	or	r24, r25
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <_Z17Serial0_availablev+0x10>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
}
     9b8:	82 2f       	mov	r24, r18
     9ba:	08 95       	ret

000009bc <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     9bc:	e4 e5       	ldi	r30, 0x54	; 84
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	13 82       	std	Z+3, r1	; 0x03
     9c2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     9c4:	88 ee       	ldi	r24, 0xE8	; 232
     9c6:	93 e0       	ldi	r25, 0x03	; 3
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	84 83       	std	Z+4, r24	; 0x04
     9ce:	95 83       	std	Z+5, r25	; 0x05
     9d0:	a6 83       	std	Z+6, r26	; 0x06
     9d2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     9d4:	85 e3       	ldi	r24, 0x35	; 53
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	91 83       	std	Z+1, r25	; 0x01
     9da:	80 83       	st	Z, r24
     9dc:	85 ec       	ldi	r24, 0xC5	; 197
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	95 87       	std	Z+13, r25	; 0x0d
     9e2:	84 87       	std	Z+12, r24	; 0x0c
     9e4:	84 ec       	ldi	r24, 0xC4	; 196
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	97 87       	std	Z+15, r25	; 0x0f
     9ea:	86 87       	std	Z+14, r24	; 0x0e
     9ec:	80 ec       	ldi	r24, 0xC0	; 192
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	91 8b       	std	Z+17, r25	; 0x11
     9f2:	80 8b       	std	Z+16, r24	; 0x10
     9f4:	81 ec       	ldi	r24, 0xC1	; 193
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	93 8b       	std	Z+19, r25	; 0x13
     9fa:	82 8b       	std	Z+18, r24	; 0x12
     9fc:	82 ec       	ldi	r24, 0xC2	; 194
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	95 8b       	std	Z+21, r25	; 0x15
     a02:	84 8b       	std	Z+20, r24	; 0x14
     a04:	86 ec       	ldi	r24, 0xC6	; 198
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	97 8b       	std	Z+23, r25	; 0x17
     a0a:	86 8b       	std	Z+22, r24	; 0x16
     a0c:	11 8e       	std	Z+25, r1	; 0x19
     a0e:	12 8e       	std	Z+26, r1	; 0x1a
     a10:	13 8e       	std	Z+27, r1	; 0x1b
     a12:	14 8e       	std	Z+28, r1	; 0x1c
     a14:	08 95       	ret

00000a16 <initVariant>:
     a16:	08 95       	ret

00000a18 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a18:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <init>

	initVariant();
     a1c:	0e 94 0b 05 	call	0xa16	; 0xa16 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a20:	0e 94 b8 01 	call	0x370	; 0x370 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a24:	c8 e7       	ldi	r28, 0x78	; 120
     a26:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     a28:	0e 94 ee 01 	call	0x3dc	; 0x3dc <loop>
		if (serialEventRun) serialEventRun();
     a2c:	20 97       	sbiw	r28, 0x00	; 0
     a2e:	e1 f3       	breq	.-8      	; 0xa28 <main+0x10>
     a30:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_Z14serialEventRunv>
     a34:	f9 cf       	rjmp	.-14     	; 0xa28 <main+0x10>

00000a36 <_Znwj>:
     a36:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <malloc>

00000a3a <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     a3a:	cf 92       	push	r12
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	6c 01       	movw	r12, r24
     a4c:	7a 01       	movw	r14, r20
     a4e:	8b 01       	movw	r16, r22
     a50:	c0 e0       	ldi	r28, 0x00	; 0
     a52:	d0 e0       	ldi	r29, 0x00	; 0
     a54:	ce 15       	cp	r28, r14
     a56:	df 05       	cpc	r29, r15
     a58:	81 f0       	breq	.+32     	; 0xa7a <_ZN5Print5writeEPKhj+0x40>
     a5a:	d8 01       	movw	r26, r16
     a5c:	6d 91       	ld	r22, X+
     a5e:	8d 01       	movw	r16, r26
     a60:	d6 01       	movw	r26, r12
     a62:	ed 91       	ld	r30, X+
     a64:	fc 91       	ld	r31, X
     a66:	01 90       	ld	r0, Z+
     a68:	f0 81       	ld	r31, Z
     a6a:	e0 2d       	mov	r30, r0
     a6c:	c6 01       	movw	r24, r12
     a6e:	09 95       	icall
     a70:	89 2b       	or	r24, r25
     a72:	11 f0       	breq	.+4      	; 0xa78 <_ZN5Print5writeEPKhj+0x3e>
     a74:	21 96       	adiw	r28, 0x01	; 1
     a76:	ee cf       	rjmp	.-36     	; 0xa54 <_ZN5Print5writeEPKhj+0x1a>
     a78:	7e 01       	movw	r14, r28
     a7a:	c7 01       	movw	r24, r14
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	08 95       	ret

00000a8e <_ZN5Print5writeEPKc>:
     a8e:	61 15       	cp	r22, r1
     a90:	71 05       	cpc	r23, r1
     a92:	79 f0       	breq	.+30     	; 0xab2 <_ZN5Print5writeEPKc+0x24>
     a94:	fb 01       	movw	r30, r22
     a96:	01 90       	ld	r0, Z+
     a98:	00 20       	and	r0, r0
     a9a:	e9 f7       	brne	.-6      	; 0xa96 <_ZN5Print5writeEPKc+0x8>
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	af 01       	movw	r20, r30
     aa0:	46 1b       	sub	r20, r22
     aa2:	57 0b       	sbc	r21, r23
     aa4:	dc 01       	movw	r26, r24
     aa6:	ed 91       	ld	r30, X+
     aa8:	fc 91       	ld	r31, X
     aaa:	02 80       	ldd	r0, Z+2	; 0x02
     aac:	f3 81       	ldd	r31, Z+3	; 0x03
     aae:	e0 2d       	mov	r30, r0
     ab0:	09 94       	ijmp
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	08 95       	ret

00000ab8 <_ZN5Print5printEPKc>:
     ab8:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_ZN5Print5writeEPKc>

00000abc <_ZN5Print5printEc>:
     abc:	dc 01       	movw	r26, r24
     abe:	ed 91       	ld	r30, X+
     ac0:	fc 91       	ld	r31, X
     ac2:	01 90       	ld	r0, Z+
     ac4:	f0 81       	ld	r31, Z
     ac6:	e0 2d       	mov	r30, r0
     ac8:	09 94       	ijmp

00000aca <_ZN5Print7printlnEv>:
     aca:	63 e4       	ldi	r22, 0x43	; 67
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_ZN5Print5writeEPKc>

00000ad2 <_ZN5Print7printlnEPKc>:
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	ec 01       	movw	r28, r24
     adc:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5writeEPKc>
     ae0:	8c 01       	movw	r16, r24
     ae2:	ce 01       	movw	r24, r28
     ae4:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN5Print7printlnEv>
     ae8:	80 0f       	add	r24, r16
     aea:	91 1f       	adc	r25, r17
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	08 95       	ret

00000af6 <_ZN5Print11printNumberEmh>:
     af6:	8f 92       	push	r8
     af8:	9f 92       	push	r9
     afa:	af 92       	push	r10
     afc:	bf 92       	push	r11
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	a1 97       	sbiw	r28, 0x21	; 33
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	7c 01       	movw	r14, r24
     b1c:	fa 01       	movw	r30, r20
     b1e:	cb 01       	movw	r24, r22
     b20:	19 a2       	std	Y+33, r1	; 0x21
     b22:	22 30       	cpi	r18, 0x02	; 2
     b24:	08 f4       	brcc	.+2      	; 0xb28 <_ZN5Print11printNumberEmh+0x32>
     b26:	2a e0       	ldi	r18, 0x0A	; 10
     b28:	8e 01       	movw	r16, r28
     b2a:	0f 5d       	subi	r16, 0xDF	; 223
     b2c:	1f 4f       	sbci	r17, 0xFF	; 255
     b2e:	82 2e       	mov	r8, r18
     b30:	91 2c       	mov	r9, r1
     b32:	a1 2c       	mov	r10, r1
     b34:	b1 2c       	mov	r11, r1
     b36:	bf 01       	movw	r22, r30
     b38:	a5 01       	movw	r20, r10
     b3a:	94 01       	movw	r18, r8
     b3c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__udivmodsi4>
     b40:	f9 01       	movw	r30, r18
     b42:	ca 01       	movw	r24, r20
     b44:	01 50       	subi	r16, 0x01	; 1
     b46:	11 09       	sbc	r17, r1
     b48:	6a 30       	cpi	r22, 0x0A	; 10
     b4a:	10 f4       	brcc	.+4      	; 0xb50 <_ZN5Print11printNumberEmh+0x5a>
     b4c:	60 5d       	subi	r22, 0xD0	; 208
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <_ZN5Print11printNumberEmh+0x5c>
     b50:	69 5c       	subi	r22, 0xC9	; 201
     b52:	d8 01       	movw	r26, r16
     b54:	6c 93       	st	X, r22
     b56:	23 2b       	or	r18, r19
     b58:	24 2b       	or	r18, r20
     b5a:	25 2b       	or	r18, r21
     b5c:	61 f7       	brne	.-40     	; 0xb36 <_ZN5Print11printNumberEmh+0x40>
     b5e:	b8 01       	movw	r22, r16
     b60:	c7 01       	movw	r24, r14
     b62:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5writeEPKc>
     b66:	a1 96       	adiw	r28, 0x21	; 33
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	bf 90       	pop	r11
     b80:	af 90       	pop	r10
     b82:	9f 90       	pop	r9
     b84:	8f 90       	pop	r8
     b86:	08 95       	ret

00000b88 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
  if (base == 0) {
     b98:	21 15       	cp	r18, r1
     b9a:	31 05       	cpc	r19, r1
     b9c:	81 f4       	brne	.+32     	; 0xbbe <_ZN5Print5printEli+0x36>
    return write(n);
     b9e:	dc 01       	movw	r26, r24
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	01 90       	ld	r0, Z+
     ba6:	f0 81       	ld	r31, Z
     ba8:	e0 2d       	mov	r30, r0
     baa:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     bbc:	09 94       	ijmp
  } else if (base == 10) {
     bbe:	2a 30       	cpi	r18, 0x0A	; 10
     bc0:	31 05       	cpc	r19, r1
     bc2:	01 f5       	brne	.+64     	; 0xc04 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     bc4:	77 ff       	sbrs	r23, 7
     bc6:	1d c0       	rjmp	.+58     	; 0xc02 <_ZN5Print5printEli+0x7a>
     bc8:	6a 01       	movw	r12, r20
     bca:	7b 01       	movw	r14, r22
     bcc:	ec 01       	movw	r28, r24
      int t = print('-');
     bce:	6d e2       	ldi	r22, 0x2D	; 45
     bd0:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Print5printEc>
     bd4:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     bd6:	44 27       	eor	r20, r20
     bd8:	55 27       	eor	r21, r21
     bda:	ba 01       	movw	r22, r20
     bdc:	4c 19       	sub	r20, r12
     bde:	5d 09       	sbc	r21, r13
     be0:	6e 09       	sbc	r22, r14
     be2:	7f 09       	sbc	r23, r15
     be4:	2a e0       	ldi	r18, 0x0A	; 10
     be6:	ce 01       	movw	r24, r28
     be8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN5Print11printNumberEmh>
     bec:	80 0f       	add	r24, r16
     bee:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     c02:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     c14:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <_ZN5Print11printNumberEmh>

00000c18 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     c18:	9a 01       	movw	r18, r20
  return print((long) n, base);
     c1a:	ab 01       	movw	r20, r22
     c1c:	77 0f       	add	r23, r23
     c1e:	66 0b       	sbc	r22, r22
     c20:	77 0b       	sbc	r23, r23
     c22:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <_ZN5Print5printEli>

00000c26 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
     c26:	4f 92       	push	r4
     c28:	5f 92       	push	r5
     c2a:	6f 92       	push	r6
     c2c:	7f 92       	push	r7
     c2e:	8f 92       	push	r8
     c30:	9f 92       	push	r9
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	00 d0       	rcall	.+0      	; 0xc48 <_Z4tonehjm+0x22>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <_Z4tonehjm+0x24>
     c4a:	1f 92       	push	r1
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	8b 01       	movw	r16, r22
     c52:	29 01       	movw	r4, r18
     c54:	3a 01       	movw	r6, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     c56:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_ZL9tone_pins>
     c5a:	89 17       	cp	r24, r25
     c5c:	21 f0       	breq	.+8      	; 0xc66 <_Z4tonehjm+0x40>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
     c5e:	9f 3f       	cpi	r25, 0xFF	; 255
     c60:	09 f0       	breq	.+2      	; 0xc64 <_Z4tonehjm+0x3e>
     c62:	4d c2       	rjmp	.+1178   	; 0x10fe <_Z4tonehjm+0x4d8>
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <_Z4tonehjm+0x4a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
     c66:	e8 e6       	ldi	r30, 0x68	; 104
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	24 91       	lpm	r18, Z
     c6c:	2d 83       	std	Y+5, r18	; 0x05
     c6e:	84 c0       	rjmp	.+264    	; 0xd78 <_Z4tonehjm+0x152>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
     c70:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9tone_pins>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     c74:	e8 e6       	ldi	r30, 0x68	; 104
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	94 91       	lpm	r25, Z
     c7a:	9d 83       	std	Y+5, r25	; 0x05
      break;
    }
  }
  
  if (_timer != -1)
     c7c:	9f 3f       	cpi	r25, 0xFF	; 255
     c7e:	09 f4       	brne	.+2      	; 0xc82 <_Z4tonehjm+0x5c>
     c80:	3e c2       	rjmp	.+1148   	; 0x10fe <_Z4tonehjm+0x4d8>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
     c82:	91 30       	cpi	r25, 0x01	; 1
     c84:	09 f4       	brne	.+2      	; 0xc88 <_Z4tonehjm+0x62>
     c86:	4d c0       	rjmp	.+154    	; 0xd22 <_Z4tonehjm+0xfc>
     c88:	58 f1       	brcs	.+86     	; 0xce0 <_Z4tonehjm+0xba>
     c8a:	92 30       	cpi	r25, 0x02	; 2
     c8c:	09 f0       	breq	.+2      	; 0xc90 <_Z4tonehjm+0x6a>
     c8e:	74 c0       	rjmp	.+232    	; 0xd78 <_Z4tonehjm+0x152>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
     c90:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
        TCCR2B = 0;
     c94:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
        bitWrite(TCCR2A, WGM21, 1);
     c98:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c9c:	92 60       	ori	r25, 0x02	; 2
     c9e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
        bitWrite(TCCR2B, CS20, 1);
     ca2:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     ca6:	91 60       	ori	r25, 0x01	; 1
     ca8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	f9 01       	movw	r30, r18
     cb2:	ef 56       	subi	r30, 0x6F	; 111
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	e4 91       	lpm	r30, Z
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	e1 55       	subi	r30, 0x51	; 81
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	45 91       	lpm	r20, Z+
     cc4:	54 91       	lpm	r21, Z
     cc6:	50 93 f3 01 	sts	0x01F3, r21	; 0x8001f3 <timer2_pin_port+0x1>
     cca:	40 93 f2 01 	sts	0x01F2, r20	; 0x8001f2 <timer2_pin_port>
        timer2_pin_mask = digitalPinToBitMask(_pin);
     cce:	f9 01       	movw	r30, r18
     cd0:	e3 58       	subi	r30, 0x83	; 131
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	e4 91       	lpm	r30, Z
     cd6:	e0 93 f1 01 	sts	0x01F1, r30	; 0x8001f1 <timer2_pin_mask>
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	9d 83       	std	Y+5, r25	; 0x05
     cde:	0b c2       	rjmp	.+1046   	; 0x10f6 <_Z4tonehjm+0x4d0>
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
     ce0:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
     ce2:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
     ce4:	94 b5       	in	r25, 0x24	; 36
     ce6:	92 60       	ori	r25, 0x02	; 2
     ce8:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
     cea:	95 b5       	in	r25, 0x25	; 37
     cec:	91 60       	ori	r25, 0x01	; 1
     cee:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	ef 56       	subi	r30, 0x6F	; 111
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	e4 91       	lpm	r30, Z
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	e1 55       	subi	r30, 0x51	; 81
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	45 91       	lpm	r20, Z+
     d08:	54 91       	lpm	r21, Z
     d0a:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <timer0_pin_port+0x1>
     d0e:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
     d12:	f9 01       	movw	r30, r18
     d14:	e3 58       	subi	r30, 0x83	; 131
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	e4 91       	lpm	r30, Z
     d1a:	e0 93 ff 01 	sts	0x01FF, r30	; 0x8001ff <timer0_pin_mask>
     d1e:	1d 82       	std	Y+5, r1	; 0x05
     d20:	ea c1       	rjmp	.+980    	; 0x10f6 <_Z4tonehjm+0x4d0>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
     d22:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
        TCCR1B = 0;
     d26:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        bitWrite(TCCR1B, WGM12, 1);
     d2a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d2e:	98 60       	ori	r25, 0x08	; 8
     d30:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        bitWrite(TCCR1B, CS10, 1);
     d34:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d38:	91 60       	ori	r25, 0x01	; 1
     d3a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	f9 01       	movw	r30, r18
     d44:	ef 56       	subi	r30, 0x6F	; 111
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	e4 91       	lpm	r30, Z
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	ee 0f       	add	r30, r30
     d4e:	ff 1f       	adc	r31, r31
     d50:	e1 55       	subi	r30, 0x51	; 81
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	45 91       	lpm	r20, Z+
     d56:	54 91       	lpm	r21, Z
     d58:	50 93 fa 01 	sts	0x01FA, r21	; 0x8001fa <timer1_pin_port+0x1>
     d5c:	40 93 f9 01 	sts	0x01F9, r20	; 0x8001f9 <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
     d60:	f9 01       	movw	r30, r18
     d62:	e3 58       	subi	r30, 0x83	; 131
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	e4 91       	lpm	r30, Z
     d68:	e0 93 f8 01 	sts	0x01F8, r30	; 0x8001f8 <timer1_pin_mask>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	0e 94 40 0a 	call	0x1480	; 0x1480 <pinMode>
     d72:	21 e0       	ldi	r18, 0x01	; 1
     d74:	2d 83       	std	Y+5, r18	; 0x05
     d76:	89 c0       	rjmp	.+274    	; 0xe8a <_Z4tonehjm+0x264>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
     d78:	2d 81       	ldd	r18, Y+5	; 0x05
     d7a:	27 fd       	sbrc	r18, 7
     d7c:	c0 c1       	rjmp	.+896    	; 0x10fe <_Z4tonehjm+0x4d8>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	0e 94 40 0a 	call	0x1480	; 0x1480 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	8d 7f       	andi	r24, 0xFD	; 253
     d88:	09 f0       	breq	.+2      	; 0xd8c <_Z4tonehjm+0x166>
     d8a:	7f c0       	rjmp	.+254    	; 0xe8a <_Z4tonehjm+0x264>
    {
      ocr = F_CPU / frequency / 2 - 1;
     d8c:	48 01       	movw	r8, r16
     d8e:	a1 2c       	mov	r10, r1
     d90:	b1 2c       	mov	r11, r1
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	72 e1       	ldi	r23, 0x12	; 18
     d96:	8a e7       	ldi	r24, 0x7A	; 122
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a5 01       	movw	r20, r10
     d9c:	94 01       	movw	r18, r8
     d9e:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
     da2:	29 83       	std	Y+1, r18	; 0x01
     da4:	3a 83       	std	Y+2, r19	; 0x02
     da6:	4b 83       	std	Y+3, r20	; 0x03
     da8:	5c 83       	std	Y+4, r21	; 0x04
     daa:	69 01       	movw	r12, r18
     dac:	7a 01       	movw	r14, r20
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	c8 1a       	sub	r12, r24
     db2:	d1 08       	sbc	r13, r1
     db4:	e1 08       	sbc	r14, r1
     db6:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
     db8:	9f ef       	ldi	r25, 0xFF	; 255
     dba:	c9 16       	cp	r12, r25
     dbc:	d1 04       	cpc	r13, r1
     dbe:	e1 04       	cpc	r14, r1
     dc0:	f1 04       	cpc	r15, r1
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <_Z4tonehjm+0x1a0>
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <_Z4tonehjm+0x1a2>
     dc6:	4e c0       	rjmp	.+156    	; 0xe64 <_Z4tonehjm+0x23e>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
     dc8:	60 e4       	ldi	r22, 0x40	; 64
     dca:	72 e4       	ldi	r23, 0x42	; 66
     dcc:	8f e0       	ldi	r24, 0x0F	; 15
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a5 01       	movw	r20, r10
     dd2:	94 01       	movw	r18, r8
     dd4:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
     dd8:	69 01       	movw	r12, r18
     dda:	7a 01       	movw	r14, r20
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	c8 1a       	sub	r12, r24
     de0:	d1 08       	sbc	r13, r1
     de2:	e1 08       	sbc	r14, r1
     de4:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	92 30       	cpi	r25, 0x02	; 2
     dea:	09 f5       	brne	.+66     	; 0xe2e <_Z4tonehjm+0x208>
     dec:	2f ef       	ldi	r18, 0xFF	; 255
     dee:	c2 16       	cp	r12, r18
     df0:	d1 04       	cpc	r13, r1
     df2:	e1 04       	cpc	r14, r1
     df4:	f1 04       	cpc	r15, r1
     df6:	09 f0       	breq	.+2      	; 0xdfa <_Z4tonehjm+0x1d4>
     df8:	08 f4       	brcc	.+2      	; 0xdfc <_Z4tonehjm+0x1d6>
     dfa:	44 c1       	rjmp	.+648    	; 0x1084 <_Z4tonehjm+0x45e>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
     dfc:	60 e9       	ldi	r22, 0x90	; 144
     dfe:	70 ed       	ldi	r23, 0xD0	; 208
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a5 01       	movw	r20, r10
     e06:	94 01       	movw	r18, r8
     e08:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
     e0c:	69 01       	movw	r12, r18
     e0e:	7a 01       	movw	r14, r20
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	c8 1a       	sub	r12, r24
     e14:	d1 08       	sbc	r13, r1
     e16:	e1 08       	sbc	r14, r1
     e18:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
     e1a:	9f ef       	ldi	r25, 0xFF	; 255
     e1c:	c9 16       	cp	r12, r25
     e1e:	d1 04       	cpc	r13, r1
     e20:	e1 04       	cpc	r14, r1
     e22:	f1 04       	cpc	r15, r1
     e24:	11 f0       	breq	.+4      	; 0xe2a <_Z4tonehjm+0x204>
     e26:	08 f0       	brcs	.+2      	; 0xe2a <_Z4tonehjm+0x204>
     e28:	ba c0       	rjmp	.+372    	; 0xf9e <_Z4tonehjm+0x378>
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	27 c0       	rjmp	.+78     	; 0xe7c <_Z4tonehjm+0x256>
        }

        if (ocr > 255)
     e2e:	2f ef       	ldi	r18, 0xFF	; 255
     e30:	c2 16       	cp	r12, r18
     e32:	d1 04       	cpc	r13, r1
     e34:	e1 04       	cpc	r14, r1
     e36:	f1 04       	cpc	r15, r1
     e38:	b9 f0       	breq	.+46     	; 0xe68 <_Z4tonehjm+0x242>
     e3a:	b0 f0       	brcs	.+44     	; 0xe68 <_Z4tonehjm+0x242>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
     e3c:	68 e4       	ldi	r22, 0x48	; 72
     e3e:	78 ee       	ldi	r23, 0xE8	; 232
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a5 01       	movw	r20, r10
     e46:	94 01       	movw	r18, r8
     e48:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
     e4c:	69 01       	movw	r12, r18
     e4e:	7a 01       	movw	r14, r20
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	c8 1a       	sub	r12, r24
     e54:	d1 08       	sbc	r13, r1
     e56:	e1 08       	sbc	r14, r1
     e58:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	99 23       	and	r25, r25
     e5e:	09 f4       	brne	.+2      	; 0xe62 <_Z4tonehjm+0x23c>
     e60:	13 c1       	rjmp	.+550    	; 0x1088 <_Z4tonehjm+0x462>
     e62:	dc c0       	rjmp	.+440    	; 0x101c <_Z4tonehjm+0x3f6>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <_Z4tonehjm+0x244>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
     e68:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	91 11       	cpse	r25, r1
     e6e:	06 c0       	rjmp	.+12     	; 0xe7c <_Z4tonehjm+0x256>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
     e70:	95 b5       	in	r25, 0x25	; 37
     e72:	98 7f       	andi	r25, 0xF8	; 248
     e74:	89 2b       	or	r24, r25
     e76:	85 bd       	out	0x25, r24	; 37
     e78:	44 c0       	rjmp	.+136    	; 0xf02 <_Z4tonehjm+0x2dc>
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
     e7a:	85 e0       	ldi	r24, 0x05	; 5
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
     e7c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e80:	98 7f       	andi	r25, 0xF8	; 248
     e82:	89 2b       	or	r24, r25
     e84:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e88:	3c c0       	rjmp	.+120    	; 0xf02 <_Z4tonehjm+0x2dc>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
     e8a:	48 01       	movw	r8, r16
     e8c:	a1 2c       	mov	r10, r1
     e8e:	b1 2c       	mov	r11, r1
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	72 e1       	ldi	r23, 0x12	; 18
     e94:	8a e7       	ldi	r24, 0x7A	; 122
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	a5 01       	movw	r20, r10
     e9a:	94 01       	movw	r18, r8
     e9c:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
     ea0:	69 01       	movw	r12, r18
     ea2:	7a 01       	movw	r14, r20
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	c8 1a       	sub	r12, r24
     ea8:	d1 08       	sbc	r13, r1
     eaa:	e1 08       	sbc	r14, r1
     eac:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
     eae:	c1 14       	cp	r12, r1
     eb0:	d1 04       	cpc	r13, r1
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	e9 06       	cpc	r14, r25
     eb6:	f1 04       	cpc	r15, r1
     eb8:	88 f0       	brcs	.+34     	; 0xedc <_Z4tonehjm+0x2b6>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
     eba:	68 e4       	ldi	r22, 0x48	; 72
     ebc:	78 ee       	ldi	r23, 0xE8	; 232
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	a5 01       	movw	r20, r10
     ec4:	94 01       	movw	r18, r8
     ec6:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
     eca:	69 01       	movw	r12, r18
     ecc:	7a 01       	movw	r14, r20
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	c8 1a       	sub	r12, r24
     ed2:	d1 08       	sbc	r13, r1
     ed4:	e1 08       	sbc	r14, r1
     ed6:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	01 c0       	rjmp	.+2      	; 0xede <_Z4tonehjm+0x2b8>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
     edc:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
     ede:	9d 81       	ldd	r25, Y+5	; 0x05
     ee0:	91 30       	cpi	r25, 0x01	; 1
     ee2:	79 f4       	brne	.+30     	; 0xf02 <_Z4tonehjm+0x2dc>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
     ee4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ee8:	98 7f       	andi	r25, 0xF8	; 248
     eea:	89 2b       	or	r24, r25
     eec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    }
    

    // Calculate the toggle count
    if (duration > 0)
     ef0:	41 14       	cp	r4, r1
     ef2:	51 04       	cpc	r5, r1
     ef4:	61 04       	cpc	r6, r1
     ef6:	71 04       	cpc	r7, r1
     ef8:	49 f4       	brne	.+18     	; 0xf0c <_Z4tonehjm+0x2e6>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
     efa:	2f ef       	ldi	r18, 0xFF	; 255
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	a9 01       	movw	r20, r18
     f00:	2c c0       	rjmp	.+88     	; 0xf5a <_Z4tonehjm+0x334>

    }
    

    // Calculate the toggle count
    if (duration > 0)
     f02:	41 14       	cp	r4, r1
     f04:	51 04       	cpc	r5, r1
     f06:	61 04       	cpc	r6, r1
     f08:	71 04       	cpc	r7, r1
     f0a:	71 f0       	breq	.+28     	; 0xf28 <_Z4tonehjm+0x302>
    {
      toggle_count = 2 * frequency * duration / 1000;
     f0c:	d8 01       	movw	r26, r16
     f0e:	aa 0f       	add	r26, r26
     f10:	bb 1f       	adc	r27, r27
     f12:	a3 01       	movw	r20, r6
     f14:	92 01       	movw	r18, r4
     f16:	0e 94 1f 0b 	call	0x163e	; 0x163e <__muluhisi3>
     f1a:	28 ee       	ldi	r18, 0xE8	; 232
     f1c:	33 e0       	ldi	r19, 0x03	; 3
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__udivmodsi4>
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <_Z4tonehjm+0x308>
    }
    else
    {
      toggle_count = -1;
     f28:	2f ef       	ldi	r18, 0xFF	; 255
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	99 f0       	breq	.+38     	; 0xf5a <_Z4tonehjm+0x334>
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	19 f1       	breq	.+70     	; 0xf7e <_Z4tonehjm+0x358>
     f38:	81 11       	cpse	r24, r1
     f3a:	e1 c0       	rjmp	.+450    	; 0x10fe <_Z4tonehjm+0x4d8>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
     f3c:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
     f3e:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <timer0_toggle_count>
     f42:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <timer0_toggle_count+0x1>
     f46:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <timer0_toggle_count+0x2>
     f4a:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
     f4e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f52:	82 60       	ori	r24, 0x02	; 2
     f54:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
        break;
     f58:	d2 c0       	rjmp	.+420    	; 0x10fe <_Z4tonehjm+0x4d8>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
     f5a:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     f5e:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
        timer1_toggle_count = toggle_count;
     f62:	20 93 fb 01 	sts	0x01FB, r18	; 0x8001fb <timer1_toggle_count>
     f66:	30 93 fc 01 	sts	0x01FC, r19	; 0x8001fc <timer1_toggle_count+0x1>
     f6a:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <timer1_toggle_count+0x2>
     f6e:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
     f72:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     f76:	82 60       	ori	r24, 0x02	; 2
     f78:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
     f7c:	c0 c0       	rjmp	.+384    	; 0x10fe <_Z4tonehjm+0x4d8>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
     f7e:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
        timer2_toggle_count = toggle_count;
     f82:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <timer2_toggle_count>
     f86:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <timer2_toggle_count+0x1>
     f8a:	40 93 f6 01 	sts	0x01F6, r20	; 0x8001f6 <timer2_toggle_count+0x2>
     f8e:	50 93 f7 01 	sts	0x01F7, r21	; 0x8001f7 <timer2_toggle_count+0x3>
        bitWrite(TIMSK2, OCIE2A, 1);
     f92:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     f96:	82 60       	ori	r24, 0x02	; 2
     f98:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
        break;
#endif

    }
  }
}
     f9c:	b0 c0       	rjmp	.+352    	; 0x10fe <_Z4tonehjm+0x4d8>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
     f9e:	68 e4       	ldi	r22, 0x48	; 72
     fa0:	78 ee       	ldi	r23, 0xE8	; 232
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a5 01       	movw	r20, r10
     fa8:	94 01       	movw	r18, r8
     faa:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
     fae:	69 01       	movw	r12, r18
     fb0:	7a 01       	movw	r14, r20
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	c9 1a       	sub	r12, r25
     fb6:	d1 08       	sbc	r13, r1
     fb8:	e1 08       	sbc	r14, r1
     fba:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
     fbc:	2f ef       	ldi	r18, 0xFF	; 255
     fbe:	c2 16       	cp	r12, r18
     fc0:	d1 04       	cpc	r13, r1
     fc2:	e1 04       	cpc	r14, r1
     fc4:	f1 04       	cpc	r15, r1
     fc6:	41 f1       	breq	.+80     	; 0x1018 <_Z4tonehjm+0x3f2>
     fc8:	38 f1       	brcs	.+78     	; 0x1018 <_Z4tonehjm+0x3f2>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
     fca:	64 e2       	ldi	r22, 0x24	; 36
     fcc:	74 ef       	ldi	r23, 0xF4	; 244
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a5 01       	movw	r20, r10
     fd4:	94 01       	movw	r18, r8
     fd6:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
     fda:	69 01       	movw	r12, r18
     fdc:	7a 01       	movw	r14, r20
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	c8 1a       	sub	r12, r24
     fe2:	d1 08       	sbc	r13, r1
     fe4:	e1 08       	sbc	r14, r1
     fe6:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
     fe8:	9f ef       	ldi	r25, 0xFF	; 255
     fea:	c9 16       	cp	r12, r25
     fec:	d1 04       	cpc	r13, r1
     fee:	e1 04       	cpc	r14, r1
     ff0:	f1 04       	cpc	r15, r1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <_Z4tonehjm+0x3d0>
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <_Z4tonehjm+0x3d2>
     ff6:	41 cf       	rjmp	.-382    	; 0xe7a <_Z4tonehjm+0x254>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
     ff8:	62 e1       	ldi	r22, 0x12	; 18
     ffa:	7a e7       	ldi	r23, 0x7A	; 122
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a5 01       	movw	r20, r10
    1002:	94 01       	movw	r18, r8
    1004:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
    1008:	69 01       	movw	r12, r18
    100a:	7a 01       	movw	r14, r20
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	c8 1a       	sub	r12, r24
    1010:	d1 08       	sbc	r13, r1
    1012:	e1 08       	sbc	r14, r1
    1014:	f1 08       	sbc	r15, r1
    1016:	19 c0       	rjmp	.+50     	; 0x104a <_Z4tonehjm+0x424>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1018:	84 e0       	ldi	r24, 0x04	; 4
    101a:	30 cf       	rjmp	.-416    	; 0xe7c <_Z4tonehjm+0x256>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	c2 16       	cp	r12, r18
    1020:	d1 04       	cpc	r13, r1
    1022:	e1 04       	cpc	r14, r1
    1024:	f1 04       	cpc	r15, r1
    1026:	09 f0       	breq	.+2      	; 0x102a <_Z4tonehjm+0x404>
    1028:	08 f4       	brcc	.+2      	; 0x102c <_Z4tonehjm+0x406>
    102a:	63 c0       	rjmp	.+198    	; 0x10f2 <_Z4tonehjm+0x4cc>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    102c:	62 e1       	ldi	r22, 0x12	; 18
    102e:	7a e7       	ldi	r23, 0x7A	; 122
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a5 01       	movw	r20, r10
    1036:	94 01       	movw	r18, r8
    1038:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
    103c:	69 01       	movw	r12, r18
    103e:	7a 01       	movw	r14, r20
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	c9 1a       	sub	r12, r25
    1044:	d1 08       	sbc	r13, r1
    1046:	e1 08       	sbc	r14, r1
    1048:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	c8 16       	cp	r12, r24
    104e:	d1 04       	cpc	r13, r1
    1050:	e1 04       	cpc	r14, r1
    1052:	f1 04       	cpc	r15, r1
    1054:	a9 f0       	breq	.+42     	; 0x1080 <_Z4tonehjm+0x45a>
    1056:	a0 f0       	brcs	.+40     	; 0x1080 <_Z4tonehjm+0x45a>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	ab 81       	ldd	r26, Y+3	; 0x03
    105e:	bc 81       	ldd	r27, Y+4	; 0x04
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	b5 95       	asr	r27
    1064:	a7 95       	ror	r26
    1066:	97 95       	ror	r25
    1068:	87 95       	ror	r24
    106a:	2a 95       	dec	r18
    106c:	d1 f7       	brne	.-12     	; 0x1062 <_Z4tonehjm+0x43c>
    106e:	6c 01       	movw	r12, r24
    1070:	7d 01       	movw	r14, r26
    1072:	21 e0       	ldi	r18, 0x01	; 1
    1074:	c2 1a       	sub	r12, r18
    1076:	d1 08       	sbc	r13, r1
    1078:	e1 08       	sbc	r14, r1
    107a:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    107c:	87 e0       	ldi	r24, 0x07	; 7
    107e:	fe ce       	rjmp	.-516    	; 0xe7c <_Z4tonehjm+0x256>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    1080:	86 e0       	ldi	r24, 0x06	; 6
    1082:	fc ce       	rjmp	.-520    	; 0xe7c <_Z4tonehjm+0x256>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	fa ce       	rjmp	.-524    	; 0xe7c <_Z4tonehjm+0x256>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	c8 16       	cp	r12, r24
    108c:	d1 04       	cpc	r13, r1
    108e:	e1 04       	cpc	r14, r1
    1090:	f1 04       	cpc	r15, r1
    1092:	69 f1       	breq	.+90     	; 0x10ee <_Z4tonehjm+0x4c8>
    1094:	60 f1       	brcs	.+88     	; 0x10ee <_Z4tonehjm+0x4c8>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    1096:	62 e1       	ldi	r22, 0x12	; 18
    1098:	7a e7       	ldi	r23, 0x7A	; 122
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a5 01       	movw	r20, r10
    10a0:	94 01       	movw	r18, r8
    10a2:	0e 94 00 0b 	call	0x1600	; 0x1600 <__divmodsi4>
    10a6:	69 01       	movw	r12, r18
    10a8:	7a 01       	movw	r14, r20
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	c9 1a       	sub	r12, r25
    10ae:	d1 08       	sbc	r13, r1
    10b0:	e1 08       	sbc	r14, r1
    10b2:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    10b4:	2f ef       	ldi	r18, 0xFF	; 255
    10b6:	c2 16       	cp	r12, r18
    10b8:	d1 04       	cpc	r13, r1
    10ba:	e1 04       	cpc	r14, r1
    10bc:	f1 04       	cpc	r15, r1
    10be:	a9 f0       	breq	.+42     	; 0x10ea <_Z4tonehjm+0x4c4>
    10c0:	a0 f0       	brcs	.+40     	; 0x10ea <_Z4tonehjm+0x4c4>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	ab 81       	ldd	r26, Y+3	; 0x03
    10c8:	bc 81       	ldd	r27, Y+4	; 0x04
    10ca:	3a e0       	ldi	r19, 0x0A	; 10
    10cc:	b5 95       	asr	r27
    10ce:	a7 95       	ror	r26
    10d0:	97 95       	ror	r25
    10d2:	87 95       	ror	r24
    10d4:	3a 95       	dec	r19
    10d6:	d1 f7       	brne	.-12     	; 0x10cc <_Z4tonehjm+0x4a6>
    10d8:	6c 01       	movw	r12, r24
    10da:	7d 01       	movw	r14, r26
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	c2 1a       	sub	r12, r18
    10e0:	d1 08       	sbc	r13, r1
    10e2:	e1 08       	sbc	r14, r1
    10e4:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    10e6:	85 e0       	ldi	r24, 0x05	; 5
    10e8:	c3 ce       	rjmp	.-634    	; 0xe70 <_Z4tonehjm+0x24a>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	c1 ce       	rjmp	.-638    	; 0xe70 <_Z4tonehjm+0x24a>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	bf ce       	rjmp	.-642    	; 0xe70 <_Z4tonehjm+0x24a>
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	ba ce       	rjmp	.-652    	; 0xe6a <_Z4tonehjm+0x244>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	0e 94 40 0a 	call	0x1480	; 0x1480 <pinMode>
    10fc:	47 ce       	rjmp	.-882    	; 0xd8c <_Z4tonehjm+0x166>
        break;
#endif

    }
  }
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	df 90       	pop	r13
    1116:	cf 90       	pop	r12
    1118:	bf 90       	pop	r11
    111a:	af 90       	pop	r10
    111c:	9f 90       	pop	r9
    111e:	8f 90       	pop	r8
    1120:	7f 90       	pop	r7
    1122:	6f 90       	pop	r6
    1124:	5f 90       	pop	r5
    1126:	4f 90       	pop	r4
    1128:	08 95       	ret

0000112a <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	39 f0       	breq	.+14     	; 0x113c <_Z12disableTimerh+0x12>
    112e:	18 f0       	brcs	.+6      	; 0x1136 <_Z12disableTimerh+0xc>
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	51 f0       	breq	.+20     	; 0x1148 <_Z12disableTimerh+0x1e>
    1134:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1136:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    113a:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    113c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1140:	8d 7f       	andi	r24, 0xFD	; 253
    1142:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
      break;
    1146:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1148:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1158:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    115c:	88 7f       	andi	r24, 0xF8	; 248
    115e:	84 60       	ori	r24, 0x04	; 4
    1160:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1164:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1168:	08 95       	ret

0000116a <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    116a:	cf 93       	push	r28
    116c:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    116e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
    1172:	c8 13       	cpse	r28, r24
    1174:	07 c0       	rjmp	.+14     	; 0x1184 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1176:	e8 e6       	ldi	r30, 0x68	; 104
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    117c:	9f ef       	ldi	r25, 0xFF	; 255
    117e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_ZL9tone_pins>
      break;
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    1184:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    1186:	0e 94 95 08 	call	0x112a	; 0x112a <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	8c 2f       	mov	r24, r28
}
    118e:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    1190:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <digitalWrite>

00001194 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    11b6:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <timer2_toggle_count>
    11ba:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <timer2_toggle_count+0x1>
    11be:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <timer2_toggle_count+0x2>
    11c2:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <timer2_toggle_count+0x3>
    11c6:	89 2b       	or	r24, r25
    11c8:	8a 2b       	or	r24, r26
    11ca:	8b 2b       	or	r24, r27
    11cc:	51 f1       	breq	.+84     	; 0x1222 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    11ce:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer2_pin_mask>
    11d2:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <timer2_pin_port>
    11d6:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <timer2_pin_port+0x1>
    11da:	80 81       	ld	r24, Z
    11dc:	89 27       	eor	r24, r25
    11de:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    11e0:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <timer2_toggle_count>
    11e4:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <timer2_toggle_count+0x1>
    11e8:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <timer2_toggle_count+0x2>
    11ec:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <timer2_toggle_count+0x3>
    11f0:	18 16       	cp	r1, r24
    11f2:	19 06       	cpc	r1, r25
    11f4:	1a 06       	cpc	r1, r26
    11f6:	1b 06       	cpc	r1, r27
    11f8:	c4 f4       	brge	.+48     	; 0x122a <__vector_7+0x96>
      timer2_toggle_count--;
    11fa:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <timer2_toggle_count>
    11fe:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <timer2_toggle_count+0x1>
    1202:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <timer2_toggle_count+0x2>
    1206:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <timer2_toggle_count+0x3>
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	a1 09       	sbc	r26, r1
    120e:	b1 09       	sbc	r27, r1
    1210:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <timer2_toggle_count>
    1214:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <timer2_toggle_count+0x1>
    1218:	a0 93 f6 01 	sts	0x01F6, r26	; 0x8001f6 <timer2_toggle_count+0x2>
    121c:	b0 93 f7 01 	sts	0x01F7, r27	; 0x8001f7 <timer2_toggle_count+0x3>
    1220:	04 c0       	rjmp	.+8      	; 0x122a <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1222:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
    1226:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    122a:	ff 91       	pop	r31
    122c:	ef 91       	pop	r30
    122e:	bf 91       	pop	r27
    1230:	af 91       	pop	r26
    1232:	9f 91       	pop	r25
    1234:	8f 91       	pop	r24
    1236:	7f 91       	pop	r23
    1238:	6f 91       	pop	r22
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <timer0_millis>
    1266:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <timer0_millis+0x1>
    126a:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <timer0_millis+0x2>
    126e:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <timer0_millis+0x3>
    1272:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <timer0_fract>
    1276:	23 e0       	ldi	r18, 0x03	; 3
    1278:	23 0f       	add	r18, r19
    127a:	2d 37       	cpi	r18, 0x7D	; 125
    127c:	20 f4       	brcc	.+8      	; 0x1286 <__vector_16+0x3a>
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	a1 1d       	adc	r26, r1
    1282:	b1 1d       	adc	r27, r1
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <__vector_16+0x44>
    1286:	26 e8       	ldi	r18, 0x86	; 134
    1288:	23 0f       	add	r18, r19
    128a:	02 96       	adiw	r24, 0x02	; 2
    128c:	a1 1d       	adc	r26, r1
    128e:	b1 1d       	adc	r27, r1
    1290:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <timer0_fract>
    1294:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <timer0_millis>
    1298:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <timer0_millis+0x1>
    129c:	a0 93 09 02 	sts	0x0209, r26	; 0x800209 <timer0_millis+0x2>
    12a0:	b0 93 0a 02 	sts	0x020A, r27	; 0x80020a <timer0_millis+0x3>
    12a4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer0_overflow_count>
    12a8:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer0_overflow_count+0x1>
    12ac:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer0_overflow_count+0x2>
    12b0:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer0_overflow_count+0x3>
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	a1 1d       	adc	r26, r1
    12b8:	b1 1d       	adc	r27, r1
    12ba:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <timer0_overflow_count>
    12be:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <timer0_overflow_count+0x1>
    12c2:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <timer0_overflow_count+0x2>
    12c6:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <timer0_overflow_count+0x3>
    12ca:	bf 91       	pop	r27
    12cc:	af 91       	pop	r26
    12ce:	9f 91       	pop	r25
    12d0:	8f 91       	pop	r24
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    12e0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    12e2:	f8 94       	cli
	m = timer0_overflow_count;
    12e4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer0_overflow_count>
    12e8:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer0_overflow_count+0x1>
    12ec:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer0_overflow_count+0x2>
    12f0:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    12f4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    12f6:	a8 9b       	sbis	0x15, 0	; 21
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <micros+0x24>
    12fa:	2f 3f       	cpi	r18, 0xFF	; 255
    12fc:	19 f0       	breq	.+6      	; 0x1304 <micros+0x24>
		m++;
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	a1 1d       	adc	r26, r1
    1302:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1304:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1306:	ba 2f       	mov	r27, r26
    1308:	a9 2f       	mov	r26, r25
    130a:	98 2f       	mov	r25, r24
    130c:	88 27       	eor	r24, r24
    130e:	82 0f       	add	r24, r18
    1310:	91 1d       	adc	r25, r1
    1312:	a1 1d       	adc	r26, r1
    1314:	b1 1d       	adc	r27, r1
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	42 e0       	ldi	r20, 0x02	; 2
    131c:	66 0f       	add	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	4a 95       	dec	r20
    1326:	d1 f7       	brne	.-12     	; 0x131c <micros+0x3c>
}
    1328:	08 95       	ret

0000132a <delay>:

void delay(unsigned long ms)
{
    132a:	8f 92       	push	r8
    132c:	9f 92       	push	r9
    132e:	af 92       	push	r10
    1330:	bf 92       	push	r11
    1332:	cf 92       	push	r12
    1334:	df 92       	push	r13
    1336:	ef 92       	push	r14
    1338:	ff 92       	push	r15
    133a:	6b 01       	movw	r12, r22
    133c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    133e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <micros>
    1342:	4b 01       	movw	r8, r22
    1344:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1346:	c1 14       	cp	r12, r1
    1348:	d1 04       	cpc	r13, r1
    134a:	e1 04       	cpc	r14, r1
    134c:	f1 04       	cpc	r15, r1
    134e:	01 f1       	breq	.+64     	; 0x1390 <delay+0x66>
		yield();
    1350:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1354:	0e 94 70 09 	call	0x12e0	; 0x12e0 <micros>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	88 19       	sub	r24, r8
    135e:	99 09       	sbc	r25, r9
    1360:	aa 09       	sbc	r26, r10
    1362:	bb 09       	sbc	r27, r11
    1364:	88 3e       	cpi	r24, 0xE8	; 232
    1366:	93 40       	sbci	r25, 0x03	; 3
    1368:	a1 05       	cpc	r26, r1
    136a:	b1 05       	cpc	r27, r1
    136c:	60 f3       	brcs	.-40     	; 0x1346 <delay+0x1c>
			ms--;
    136e:	21 e0       	ldi	r18, 0x01	; 1
    1370:	c2 1a       	sub	r12, r18
    1372:	d1 08       	sbc	r13, r1
    1374:	e1 08       	sbc	r14, r1
    1376:	f1 08       	sbc	r15, r1
			start += 1000;
    1378:	88 ee       	ldi	r24, 0xE8	; 232
    137a:	88 0e       	add	r8, r24
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	98 1e       	adc	r9, r24
    1380:	a1 1c       	adc	r10, r1
    1382:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1384:	c1 14       	cp	r12, r1
    1386:	d1 04       	cpc	r13, r1
    1388:	e1 04       	cpc	r14, r1
    138a:	f1 04       	cpc	r15, r1
    138c:	19 f7       	brne	.-58     	; 0x1354 <delay+0x2a>
    138e:	db cf       	rjmp	.-74     	; 0x1346 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	9f 90       	pop	r9
    139e:	8f 90       	pop	r8
    13a0:	08 95       	ret

000013a2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    13a2:	82 30       	cpi	r24, 0x02	; 2
    13a4:	91 05       	cpc	r25, r1
    13a6:	38 f0       	brcs	.+14     	; 0x13b6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    13b0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <delayMicroseconds+0x10>
    13b6:	08 95       	ret

000013b8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    13b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    13ba:	84 b5       	in	r24, 0x24	; 36
    13bc:	82 60       	ori	r24, 0x02	; 2
    13be:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    13c0:	84 b5       	in	r24, 0x24	; 36
    13c2:	81 60       	ori	r24, 0x01	; 1
    13c4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    13c6:	85 b5       	in	r24, 0x25	; 37
    13c8:	82 60       	ori	r24, 0x02	; 2
    13ca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    13cc:	85 b5       	in	r24, 0x25	; 37
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    13d2:	ee e6       	ldi	r30, 0x6E	; 110
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	81 60       	ori	r24, 0x01	; 1
    13da:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    13dc:	e1 e8       	ldi	r30, 0x81	; 129
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    13e2:	80 81       	ld	r24, Z
    13e4:	82 60       	ori	r24, 0x02	; 2
    13e6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    13e8:	80 81       	ld	r24, Z
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    13ee:	e0 e8       	ldi	r30, 0x80	; 128
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	81 60       	ori	r24, 0x01	; 1
    13f6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    13f8:	e1 eb       	ldi	r30, 0xB1	; 177
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	84 60       	ori	r24, 0x04	; 4
    1400:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1402:	e0 eb       	ldi	r30, 0xB0	; 176
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    140c:	ea e7       	ldi	r30, 0x7A	; 122
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1416:	80 81       	ld	r24, Z
    1418:	82 60       	ori	r24, 0x02	; 2
    141a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    141c:	80 81       	ld	r24, Z
    141e:	81 60       	ori	r24, 0x01	; 1
    1420:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1422:	80 81       	ld	r24, Z
    1424:	80 68       	ori	r24, 0x80	; 128
    1426:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1428:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    142c:	08 95       	ret

0000142e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	81 f0       	breq	.+32     	; 0x1452 <turnOffPWM+0x24>
    1432:	28 f4       	brcc	.+10     	; 0x143e <turnOffPWM+0x10>
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	99 f0       	breq	.+38     	; 0x145e <turnOffPWM+0x30>
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	a1 f0       	breq	.+40     	; 0x1464 <turnOffPWM+0x36>
    143c:	08 95       	ret
    143e:	87 30       	cpi	r24, 0x07	; 7
    1440:	a9 f0       	breq	.+42     	; 0x146c <turnOffPWM+0x3e>
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	b9 f0       	breq	.+46     	; 0x1474 <turnOffPWM+0x46>
    1446:	84 30       	cpi	r24, 0x04	; 4
    1448:	d1 f4       	brne	.+52     	; 0x147e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    144a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    144e:	8f 7d       	andi	r24, 0xDF	; 223
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1452:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1456:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1458:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    145c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    145e:	84 b5       	in	r24, 0x24	; 36
    1460:	8f 77       	andi	r24, 0x7F	; 127
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1464:	84 b5       	in	r24, 0x24	; 36
    1466:	8f 7d       	andi	r24, 0xDF	; 223
    1468:	84 bd       	out	0x24, r24	; 36
    146a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    146c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1470:	8f 77       	andi	r24, 0x7F	; 127
    1472:	03 c0       	rjmp	.+6      	; 0x147a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1474:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1478:	8f 7d       	andi	r24, 0xDF	; 223
    147a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    147e:	08 95       	ret

00001480 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	fc 01       	movw	r30, r24
    1488:	e3 58       	subi	r30, 0x83	; 131
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    148e:	fc 01       	movw	r30, r24
    1490:	ef 56       	subi	r30, 0x6F	; 111
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1496:	88 23       	and	r24, r24
    1498:	61 f1       	breq	.+88     	; 0x14f2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	fc 01       	movw	r30, r24
    14a2:	e7 54       	subi	r30, 0x47	; 71
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	c5 91       	lpm	r28, Z+
    14a8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    14aa:	fc 01       	movw	r30, r24
    14ac:	e1 55       	subi	r30, 0x51	; 81
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	a5 91       	lpm	r26, Z+
    14b2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    14b4:	61 11       	cpse	r22, r1
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    14b8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    14ba:	f8 94       	cli
		*reg &= ~bit;
    14bc:	88 81       	ld	r24, Y
    14be:	20 95       	com	r18
    14c0:	82 23       	and	r24, r18
    14c2:	88 83       	st	Y, r24
		*out &= ~bit;
    14c4:	ec 91       	ld	r30, X
    14c6:	2e 23       	and	r18, r30
    14c8:	0b c0       	rjmp	.+22     	; 0x14e0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    14ca:	62 30       	cpi	r22, 0x02	; 2
    14cc:	61 f4       	brne	.+24     	; 0x14e6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    14ce:	9f b7       	in	r25, 0x3f	; 63
                cli();
    14d0:	f8 94       	cli
		*reg &= ~bit;
    14d2:	88 81       	ld	r24, Y
    14d4:	32 2f       	mov	r19, r18
    14d6:	30 95       	com	r19
    14d8:	83 23       	and	r24, r19
    14da:	88 83       	st	Y, r24
		*out |= bit;
    14dc:	ec 91       	ld	r30, X
    14de:	2e 2b       	or	r18, r30
    14e0:	2c 93       	st	X, r18
		SREG = oldSREG;
    14e2:	9f bf       	out	0x3f, r25	; 63
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    14e6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    14e8:	f8 94       	cli
		*reg |= bit;
    14ea:	e8 81       	ld	r30, Y
    14ec:	2e 2b       	or	r18, r30
    14ee:	28 83       	st	Y, r18
		SREG = oldSREG;
    14f0:	8f bf       	out	0x3f, r24	; 63
	}
}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	f9 01       	movw	r30, r18
    1504:	e7 59       	subi	r30, 0x97	; 151
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    150a:	f9 01       	movw	r30, r18
    150c:	e3 58       	subi	r30, 0x83	; 131
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1512:	f9 01       	movw	r30, r18
    1514:	ef 56       	subi	r30, 0x6F	; 111
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    151a:	cc 23       	and	r28, r28
    151c:	c1 f0       	breq	.+48     	; 0x154e <digitalWrite+0x56>
    151e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1520:	81 11       	cpse	r24, r1
    1522:	0e 94 17 0a 	call	0x142e	; 0x142e <turnOffPWM>

	out = portOutputRegister(port);
    1526:	ec 2f       	mov	r30, r28
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	e1 55       	subi	r30, 0x51	; 81
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	a5 91       	lpm	r26, Z+
    1534:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1536:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1538:	f8 94       	cli

	if (val == LOW) {
    153a:	11 11       	cpse	r17, r1
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <digitalWrite+0x4e>
		*out &= ~bit;
    153e:	8c 91       	ld	r24, X
    1540:	d0 95       	com	r29
    1542:	d8 23       	and	r29, r24
    1544:	02 c0       	rjmp	.+4      	; 0x154a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1546:	ec 91       	ld	r30, X
    1548:	de 2b       	or	r29, r30
    154a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    154c:	9f bf       	out	0x3f, r25	; 63
}
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	08 95       	ret

00001556 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	e3 58       	subi	r30, 0x83	; 131
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    1564:	fc 01       	movw	r30, r24
    1566:	ef 56       	subi	r30, 0x6F	; 111
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    156c:	66 23       	and	r22, r22
    156e:	11 f0       	breq	.+4      	; 0x1574 <pulseIn+0x1e>
    1570:	67 2f       	mov	r22, r23
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <pulseIn+0x20>
    1574:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	eb 55       	subi	r30, 0x5B	; 91
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	85 91       	lpm	r24, Z+
    1582:	94 91       	lpm	r25, Z
    1584:	89 01       	movw	r16, r18
    1586:	9a 01       	movw	r18, r20
    1588:	3f 70       	andi	r19, 0x0F	; 15
    158a:	46 2f       	mov	r20, r22
    158c:	67 2f       	mov	r22, r23
    158e:	0e 94 8e 00 	call	0x11c	; 0x11c <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    1592:	61 15       	cp	r22, r1
    1594:	71 05       	cpc	r23, r1
    1596:	81 05       	cpc	r24, r1
    1598:	91 05       	cpc	r25, r1
    159a:	49 f0       	breq	.+18     	; 0x15ae <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	a1 1d       	adc	r26, r1
    15a4:	b1 1d       	adc	r27, r1
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	9f 70       	andi	r25, 0x0F	; 15
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <pulseIn+0x5e>
	else
		return 0;
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	cb 01       	movw	r24, r22
}
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	08 95       	ret

000015ba <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    15ba:	08 95       	ret

000015bc <__udivmodsi4>:
    15bc:	a1 e2       	ldi	r26, 0x21	; 33
    15be:	1a 2e       	mov	r1, r26
    15c0:	aa 1b       	sub	r26, r26
    15c2:	bb 1b       	sub	r27, r27
    15c4:	fd 01       	movw	r30, r26
    15c6:	0d c0       	rjmp	.+26     	; 0x15e2 <__udivmodsi4_ep>

000015c8 <__udivmodsi4_loop>:
    15c8:	aa 1f       	adc	r26, r26
    15ca:	bb 1f       	adc	r27, r27
    15cc:	ee 1f       	adc	r30, r30
    15ce:	ff 1f       	adc	r31, r31
    15d0:	a2 17       	cp	r26, r18
    15d2:	b3 07       	cpc	r27, r19
    15d4:	e4 07       	cpc	r30, r20
    15d6:	f5 07       	cpc	r31, r21
    15d8:	20 f0       	brcs	.+8      	; 0x15e2 <__udivmodsi4_ep>
    15da:	a2 1b       	sub	r26, r18
    15dc:	b3 0b       	sbc	r27, r19
    15de:	e4 0b       	sbc	r30, r20
    15e0:	f5 0b       	sbc	r31, r21

000015e2 <__udivmodsi4_ep>:
    15e2:	66 1f       	adc	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	1a 94       	dec	r1
    15ec:	69 f7       	brne	.-38     	; 0x15c8 <__udivmodsi4_loop>
    15ee:	60 95       	com	r22
    15f0:	70 95       	com	r23
    15f2:	80 95       	com	r24
    15f4:	90 95       	com	r25
    15f6:	9b 01       	movw	r18, r22
    15f8:	ac 01       	movw	r20, r24
    15fa:	bd 01       	movw	r22, r26
    15fc:	cf 01       	movw	r24, r30
    15fe:	08 95       	ret

00001600 <__divmodsi4>:
    1600:	05 2e       	mov	r0, r21
    1602:	97 fb       	bst	r25, 7
    1604:	1e f4       	brtc	.+6      	; 0x160c <__divmodsi4+0xc>
    1606:	00 94       	com	r0
    1608:	0e 94 17 0b 	call	0x162e	; 0x162e <__negsi2>
    160c:	57 fd       	sbrc	r21, 7
    160e:	07 d0       	rcall	.+14     	; 0x161e <__divmodsi4_neg2>
    1610:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__udivmodsi4>
    1614:	07 fc       	sbrc	r0, 7
    1616:	03 d0       	rcall	.+6      	; 0x161e <__divmodsi4_neg2>
    1618:	4e f4       	brtc	.+18     	; 0x162c <__divmodsi4_exit>
    161a:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__negsi2>

0000161e <__divmodsi4_neg2>:
    161e:	50 95       	com	r21
    1620:	40 95       	com	r20
    1622:	30 95       	com	r19
    1624:	21 95       	neg	r18
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	4f 4f       	sbci	r20, 0xFF	; 255
    162a:	5f 4f       	sbci	r21, 0xFF	; 255

0000162c <__divmodsi4_exit>:
    162c:	08 95       	ret

0000162e <__negsi2>:
    162e:	90 95       	com	r25
    1630:	80 95       	com	r24
    1632:	70 95       	com	r23
    1634:	61 95       	neg	r22
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	8f 4f       	sbci	r24, 0xFF	; 255
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	08 95       	ret

0000163e <__muluhisi3>:
    163e:	0e 94 30 0b 	call	0x1660	; 0x1660 <__umulhisi3>
    1642:	a5 9f       	mul	r26, r21
    1644:	90 0d       	add	r25, r0
    1646:	b4 9f       	mul	r27, r20
    1648:	90 0d       	add	r25, r0
    164a:	a4 9f       	mul	r26, r20
    164c:	80 0d       	add	r24, r0
    164e:	91 1d       	adc	r25, r1
    1650:	11 24       	eor	r1, r1
    1652:	08 95       	ret

00001654 <__tablejump2__>:
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	05 90       	lpm	r0, Z+
    165a:	f4 91       	lpm	r31, Z
    165c:	e0 2d       	mov	r30, r0
    165e:	09 94       	ijmp

00001660 <__umulhisi3>:
    1660:	a2 9f       	mul	r26, r18
    1662:	b0 01       	movw	r22, r0
    1664:	b3 9f       	mul	r27, r19
    1666:	c0 01       	movw	r24, r0
    1668:	a3 9f       	mul	r26, r19
    166a:	70 0d       	add	r23, r0
    166c:	81 1d       	adc	r24, r1
    166e:	11 24       	eor	r1, r1
    1670:	91 1d       	adc	r25, r1
    1672:	b2 9f       	mul	r27, r18
    1674:	70 0d       	add	r23, r0
    1676:	81 1d       	adc	r24, r1
    1678:	11 24       	eor	r1, r1
    167a:	91 1d       	adc	r25, r1
    167c:	08 95       	ret

0000167e <malloc>:
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	91 05       	cpc	r25, r1
    168a:	10 f4       	brcc	.+4      	; 0x1690 <malloc+0x12>
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <__flp>
    1694:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <__flp+0x1>
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	30 97       	sbiw	r30, 0x00	; 0
    16a2:	19 f1       	breq	.+70     	; 0x16ea <malloc+0x6c>
    16a4:	40 81       	ld	r20, Z
    16a6:	51 81       	ldd	r21, Z+1	; 0x01
    16a8:	02 81       	ldd	r16, Z+2	; 0x02
    16aa:	13 81       	ldd	r17, Z+3	; 0x03
    16ac:	48 17       	cp	r20, r24
    16ae:	59 07       	cpc	r21, r25
    16b0:	c8 f0       	brcs	.+50     	; 0x16e4 <malloc+0x66>
    16b2:	84 17       	cp	r24, r20
    16b4:	95 07       	cpc	r25, r21
    16b6:	69 f4       	brne	.+26     	; 0x16d2 <malloc+0x54>
    16b8:	10 97       	sbiw	r26, 0x00	; 0
    16ba:	31 f0       	breq	.+12     	; 0x16c8 <malloc+0x4a>
    16bc:	12 96       	adiw	r26, 0x02	; 2
    16be:	0c 93       	st	X, r16
    16c0:	12 97       	sbiw	r26, 0x02	; 2
    16c2:	13 96       	adiw	r26, 0x03	; 3
    16c4:	1c 93       	st	X, r17
    16c6:	27 c0       	rjmp	.+78     	; 0x1716 <malloc+0x98>
    16c8:	00 93 11 02 	sts	0x0211, r16	; 0x800211 <__flp>
    16cc:	10 93 12 02 	sts	0x0212, r17	; 0x800212 <__flp+0x1>
    16d0:	22 c0       	rjmp	.+68     	; 0x1716 <malloc+0x98>
    16d2:	21 15       	cp	r18, r1
    16d4:	31 05       	cpc	r19, r1
    16d6:	19 f0       	breq	.+6      	; 0x16de <malloc+0x60>
    16d8:	42 17       	cp	r20, r18
    16da:	53 07       	cpc	r21, r19
    16dc:	18 f4       	brcc	.+6      	; 0x16e4 <malloc+0x66>
    16de:	9a 01       	movw	r18, r20
    16e0:	bd 01       	movw	r22, r26
    16e2:	ef 01       	movw	r28, r30
    16e4:	df 01       	movw	r26, r30
    16e6:	f8 01       	movw	r30, r16
    16e8:	db cf       	rjmp	.-74     	; 0x16a0 <malloc+0x22>
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	f9 f0       	breq	.+62     	; 0x172e <malloc+0xb0>
    16f0:	28 1b       	sub	r18, r24
    16f2:	39 0b       	sbc	r19, r25
    16f4:	24 30       	cpi	r18, 0x04	; 4
    16f6:	31 05       	cpc	r19, r1
    16f8:	80 f4       	brcc	.+32     	; 0x171a <malloc+0x9c>
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	9b 81       	ldd	r25, Y+3	; 0x03
    16fe:	61 15       	cp	r22, r1
    1700:	71 05       	cpc	r23, r1
    1702:	21 f0       	breq	.+8      	; 0x170c <malloc+0x8e>
    1704:	fb 01       	movw	r30, r22
    1706:	93 83       	std	Z+3, r25	; 0x03
    1708:	82 83       	std	Z+2, r24	; 0x02
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <malloc+0x96>
    170c:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <__flp+0x1>
    1710:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <__flp>
    1714:	fe 01       	movw	r30, r28
    1716:	32 96       	adiw	r30, 0x02	; 2
    1718:	44 c0       	rjmp	.+136    	; 0x17a2 <malloc+0x124>
    171a:	fe 01       	movw	r30, r28
    171c:	e2 0f       	add	r30, r18
    171e:	f3 1f       	adc	r31, r19
    1720:	81 93       	st	Z+, r24
    1722:	91 93       	st	Z+, r25
    1724:	22 50       	subi	r18, 0x02	; 2
    1726:	31 09       	sbc	r19, r1
    1728:	39 83       	std	Y+1, r19	; 0x01
    172a:	28 83       	st	Y, r18
    172c:	3a c0       	rjmp	.+116    	; 0x17a2 <malloc+0x124>
    172e:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <__brkval>
    1732:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <__brkval+0x1>
    1736:	23 2b       	or	r18, r19
    1738:	41 f4       	brne	.+16     	; 0x174a <malloc+0xcc>
    173a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    173e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1742:	30 93 10 02 	sts	0x0210, r19	; 0x800210 <__brkval+0x1>
    1746:	20 93 0f 02 	sts	0x020F, r18	; 0x80020f <__brkval>
    174a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    174e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1752:	21 15       	cp	r18, r1
    1754:	31 05       	cpc	r19, r1
    1756:	41 f4       	brne	.+16     	; 0x1768 <malloc+0xea>
    1758:	2d b7       	in	r18, 0x3d	; 61
    175a:	3e b7       	in	r19, 0x3e	; 62
    175c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1760:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1764:	24 1b       	sub	r18, r20
    1766:	35 0b       	sbc	r19, r21
    1768:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <__brkval>
    176c:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <__brkval+0x1>
    1770:	e2 17       	cp	r30, r18
    1772:	f3 07       	cpc	r31, r19
    1774:	a0 f4       	brcc	.+40     	; 0x179e <malloc+0x120>
    1776:	2e 1b       	sub	r18, r30
    1778:	3f 0b       	sbc	r19, r31
    177a:	28 17       	cp	r18, r24
    177c:	39 07       	cpc	r19, r25
    177e:	78 f0       	brcs	.+30     	; 0x179e <malloc+0x120>
    1780:	ac 01       	movw	r20, r24
    1782:	4e 5f       	subi	r20, 0xFE	; 254
    1784:	5f 4f       	sbci	r21, 0xFF	; 255
    1786:	24 17       	cp	r18, r20
    1788:	35 07       	cpc	r19, r21
    178a:	48 f0       	brcs	.+18     	; 0x179e <malloc+0x120>
    178c:	4e 0f       	add	r20, r30
    178e:	5f 1f       	adc	r21, r31
    1790:	50 93 10 02 	sts	0x0210, r21	; 0x800210 <__brkval+0x1>
    1794:	40 93 0f 02 	sts	0x020F, r20	; 0x80020f <__brkval>
    1798:	81 93       	st	Z+, r24
    179a:	91 93       	st	Z+, r25
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <malloc+0x124>
    179e:	e0 e0       	ldi	r30, 0x00	; 0
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	cf 01       	movw	r24, r30
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	08 95       	ret

000017ae <free>:
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <free+0xa>
    17b6:	81 c0       	rjmp	.+258    	; 0x18ba <free+0x10c>
    17b8:	fc 01       	movw	r30, r24
    17ba:	32 97       	sbiw	r30, 0x02	; 2
    17bc:	13 82       	std	Z+3, r1	; 0x03
    17be:	12 82       	std	Z+2, r1	; 0x02
    17c0:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <__flp>
    17c4:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <__flp+0x1>
    17c8:	10 97       	sbiw	r26, 0x00	; 0
    17ca:	81 f4       	brne	.+32     	; 0x17ec <free+0x3e>
    17cc:	20 81       	ld	r18, Z
    17ce:	31 81       	ldd	r19, Z+1	; 0x01
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <__brkval>
    17d8:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <__brkval+0x1>
    17dc:	28 17       	cp	r18, r24
    17de:	39 07       	cpc	r19, r25
    17e0:	51 f5       	brne	.+84     	; 0x1836 <free+0x88>
    17e2:	f0 93 10 02 	sts	0x0210, r31	; 0x800210 <__brkval+0x1>
    17e6:	e0 93 0f 02 	sts	0x020F, r30	; 0x80020f <__brkval>
    17ea:	67 c0       	rjmp	.+206    	; 0x18ba <free+0x10c>
    17ec:	ed 01       	movw	r28, r26
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	ce 17       	cp	r28, r30
    17f4:	df 07       	cpc	r29, r31
    17f6:	40 f4       	brcc	.+16     	; 0x1808 <free+0x5a>
    17f8:	4a 81       	ldd	r20, Y+2	; 0x02
    17fa:	5b 81       	ldd	r21, Y+3	; 0x03
    17fc:	9e 01       	movw	r18, r28
    17fe:	41 15       	cp	r20, r1
    1800:	51 05       	cpc	r21, r1
    1802:	f1 f0       	breq	.+60     	; 0x1840 <free+0x92>
    1804:	ea 01       	movw	r28, r20
    1806:	f5 cf       	rjmp	.-22     	; 0x17f2 <free+0x44>
    1808:	d3 83       	std	Z+3, r29	; 0x03
    180a:	c2 83       	std	Z+2, r28	; 0x02
    180c:	40 81       	ld	r20, Z
    180e:	51 81       	ldd	r21, Z+1	; 0x01
    1810:	84 0f       	add	r24, r20
    1812:	95 1f       	adc	r25, r21
    1814:	c8 17       	cp	r28, r24
    1816:	d9 07       	cpc	r29, r25
    1818:	59 f4       	brne	.+22     	; 0x1830 <free+0x82>
    181a:	88 81       	ld	r24, Y
    181c:	99 81       	ldd	r25, Y+1	; 0x01
    181e:	84 0f       	add	r24, r20
    1820:	95 1f       	adc	r25, r21
    1822:	02 96       	adiw	r24, 0x02	; 2
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	80 83       	st	Z, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	93 83       	std	Z+3, r25	; 0x03
    182e:	82 83       	std	Z+2, r24	; 0x02
    1830:	21 15       	cp	r18, r1
    1832:	31 05       	cpc	r19, r1
    1834:	29 f4       	brne	.+10     	; 0x1840 <free+0x92>
    1836:	f0 93 12 02 	sts	0x0212, r31	; 0x800212 <__flp+0x1>
    183a:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <__flp>
    183e:	3d c0       	rjmp	.+122    	; 0x18ba <free+0x10c>
    1840:	e9 01       	movw	r28, r18
    1842:	fb 83       	std	Y+3, r31	; 0x03
    1844:	ea 83       	std	Y+2, r30	; 0x02
    1846:	49 91       	ld	r20, Y+
    1848:	59 91       	ld	r21, Y+
    184a:	c4 0f       	add	r28, r20
    184c:	d5 1f       	adc	r29, r21
    184e:	ec 17       	cp	r30, r28
    1850:	fd 07       	cpc	r31, r29
    1852:	61 f4       	brne	.+24     	; 0x186c <free+0xbe>
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	84 0f       	add	r24, r20
    185a:	95 1f       	adc	r25, r21
    185c:	02 96       	adiw	r24, 0x02	; 2
    185e:	e9 01       	movw	r28, r18
    1860:	99 83       	std	Y+1, r25	; 0x01
    1862:	88 83       	st	Y, r24
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	9b 83       	std	Y+3, r25	; 0x03
    186a:	8a 83       	std	Y+2, r24	; 0x02
    186c:	e0 e0       	ldi	r30, 0x00	; 0
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	12 96       	adiw	r26, 0x02	; 2
    1872:	8d 91       	ld	r24, X+
    1874:	9c 91       	ld	r25, X
    1876:	13 97       	sbiw	r26, 0x03	; 3
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	19 f0       	breq	.+6      	; 0x1882 <free+0xd4>
    187c:	fd 01       	movw	r30, r26
    187e:	dc 01       	movw	r26, r24
    1880:	f7 cf       	rjmp	.-18     	; 0x1870 <free+0xc2>
    1882:	8d 91       	ld	r24, X+
    1884:	9c 91       	ld	r25, X
    1886:	11 97       	sbiw	r26, 0x01	; 1
    1888:	9d 01       	movw	r18, r26
    188a:	2e 5f       	subi	r18, 0xFE	; 254
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	82 0f       	add	r24, r18
    1890:	93 1f       	adc	r25, r19
    1892:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <__brkval>
    1896:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <__brkval+0x1>
    189a:	28 17       	cp	r18, r24
    189c:	39 07       	cpc	r19, r25
    189e:	69 f4       	brne	.+26     	; 0x18ba <free+0x10c>
    18a0:	30 97       	sbiw	r30, 0x00	; 0
    18a2:	29 f4       	brne	.+10     	; 0x18ae <free+0x100>
    18a4:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__flp+0x1>
    18a8:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <__flp>
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <free+0x104>
    18ae:	13 82       	std	Z+3, r1	; 0x03
    18b0:	12 82       	std	Z+2, r1	; 0x02
    18b2:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <__brkval+0x1>
    18b6:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <__brkval>
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <_exit>:
    18c0:	f8 94       	cli

000018c2 <__stop_program>:
    18c2:	ff cf       	rjmp	.-2      	; 0x18c2 <__stop_program>
