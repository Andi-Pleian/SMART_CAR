
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800100  00002b0c  00002ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  00800344  00800344  00002de4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e0  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000148c6  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024c6  00000000  00000000  00017efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005626  00000000  00000000  0001a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025a0  00000000  00000000  0001f9e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000478c  00000000  00000000  00021f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f735  00000000  00000000  00026714  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f0  00000000  00000000  00035e49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__vector_7>
      20:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_8>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_18>
      4c:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	ae 0e       	add	r10, r30
      c6:	84 10       	cpse	r8, r4

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	13 e0       	ldi	r17, 0x03	; 3
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	ec e0       	ldi	r30, 0x0C	; 12
      dc:	fb e2       	ldi	r31, 0x2B	; 43
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a4 34       	cpi	r26, 0x44	; 68
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	25 e0       	ldi	r18, 0x05	; 5
      ec:	a4 e4       	ldi	r26, 0x44	; 68
      ee:	b3 e0       	ldi	r27, 0x03	; 3
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a2 30       	cpi	r26, 0x02	; 2
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 b2 10 	call	0x2164	; 0x2164 <main>
     114:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN13Motor_ControlC1Etttttt>:
Motor_Control::~Motor_Control()
{
} //~Motor_Control

// default constructor
Motor_Control::Motor_Control(
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	fc 01       	movw	r30, r24
								unsigned short int in1_arg,
								unsigned short int in2_arg,
								unsigned short int in3_arg,
								unsigned short int in4_arg	) {
									
	this->enA = enA_arg;
     12a:	71 83       	std	Z+1, r23	; 0x01
     12c:	60 83       	st	Z, r22
	this->enB = enB_arg;
     12e:	53 83       	std	Z+3, r21	; 0x03
     130:	42 83       	std	Z+2, r20	; 0x02
	
	this->rightBackward = in1_arg;
     132:	35 83       	std	Z+5, r19	; 0x05
     134:	24 83       	std	Z+4, r18	; 0x04
	this->rightForward = in2_arg;
     136:	17 83       	std	Z+7, r17	; 0x07
     138:	06 83       	std	Z+6, r16	; 0x06
	this->leftForward = in3_arg;
     13a:	f1 86       	std	Z+9, r15	; 0x09
     13c:	e0 86       	std	Z+8, r14	; 0x08
	this->leftBackward = in4_arg;		
     13e:	d3 86       	std	Z+11, r13	; 0x0b
     140:	c2 86       	std	Z+10, r12	; 0x0a
									
} //Motor_Control
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	ff 90       	pop	r15
     148:	ef 90       	pop	r14
     14a:	df 90       	pop	r13
     14c:	cf 90       	pop	r12
     14e:	08 95       	ret

00000150 <_Z21timerConfigForReceivev>:

    mark(DISH_HEADER_MARK);
    space(DISH_HEADER_SPACE);

    sendPulseDistanceWidthData(DISH_BIT_MARK, DISH_ONE_SPACE, DISH_BIT_MARK, DISH_ZERO_SPACE, data, nbits, PROTOCOL_IS_MSB_FIRST);
    mark(DISH_HEADER_MARK); //added 26th March 2016, by AnalysIR ( https://www.AnalysIR.com )
     150:	82 e0       	ldi	r24, 0x02	; 2
     152:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     156:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     15a:	84 e6       	ldi	r24, 0x64	; 100
     15c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     160:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     164:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     168:	08 95       	ret

0000016a <_Z14setLEDFeedbackhb>:
     16a:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <FeedbackLEDControl>
     16e:	60 93 50 04 	sts	0x0450, r22	; 0x800450 <FeedbackLEDControl+0x1>
     172:	66 23       	and	r22, r22
     174:	31 f0       	breq	.+12     	; 0x182 <_Z14setLEDFeedbackhb+0x18>
     176:	61 e0       	ldi	r22, 0x01	; 1
     178:	81 11       	cpse	r24, r1
     17a:	01 c0       	rjmp	.+2      	; 0x17e <_Z14setLEDFeedbackhb+0x14>
     17c:	8d e0       	ldi	r24, 0x0D	; 13
     17e:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <pinMode>
     182:	08 95       	ret

00000184 <_Z14setFeedbackLEDb>:
     184:	98 2f       	mov	r25, r24
     186:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <FeedbackLEDControl+0x1>
     18a:	88 23       	and	r24, r24
     18c:	81 f0       	breq	.+32     	; 0x1ae <_Z14setFeedbackLEDb+0x2a>
     18e:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <FeedbackLEDControl>
     192:	99 23       	and	r25, r25
     194:	31 f0       	breq	.+12     	; 0x1a2 <_Z14setFeedbackLEDb+0x1e>
     196:	88 23       	and	r24, r24
     198:	11 f0       	breq	.+4      	; 0x19e <_Z14setFeedbackLEDb+0x1a>
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	05 c0       	rjmp	.+10     	; 0x1a8 <_Z14setFeedbackLEDb+0x24>
     19e:	2d 9a       	sbi	0x05, 5	; 5
     1a0:	08 95       	ret
     1a2:	88 23       	and	r24, r24
     1a4:	19 f0       	breq	.+6      	; 0x1ac <_Z14setFeedbackLEDb+0x28>
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <digitalWrite>
     1ac:	2d 98       	cbi	0x05, 5	; 5
     1ae:	08 95       	ret

000001b0 <_ZN6IRrecv13setReceivePinEh>:
     1b0:	ac e4       	ldi	r26, 0x4C	; 76
     1b2:	b3 e0       	ldi	r27, 0x03	; 3
     1b4:	11 96       	adiw	r26, 0x01	; 1
     1b6:	6c 93       	st	X, r22
     1b8:	11 97       	sbiw	r26, 0x01	; 1
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	fb 01       	movw	r30, r22
     1be:	e3 58       	subi	r30, 0x83	; 131
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
     1c2:	e4 91       	lpm	r30, Z
     1c4:	14 96       	adiw	r26, 0x04	; 4
     1c6:	ec 93       	st	X, r30
     1c8:	14 97       	sbiw	r26, 0x04	; 4
     1ca:	fb 01       	movw	r30, r22
     1cc:	ef 56       	subi	r30, 0x6F	; 111
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	e4 91       	lpm	r30, Z
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	eb 55       	subi	r30, 0x5B	; 91
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	85 91       	lpm	r24, Z+
     1de:	94 91       	lpm	r25, Z
     1e0:	13 96       	adiw	r26, 0x03	; 3
     1e2:	9c 93       	st	X, r25
     1e4:	8e 93       	st	-X, r24
     1e6:	12 97       	sbiw	r26, 0x02	; 2
     1e8:	08 95       	ret

000001ea <_ZN6IRrecvC1Ev>:
     1ea:	2c e4       	ldi	r18, 0x4C	; 76
     1ec:	33 e0       	ldi	r19, 0x03	; 3
     1ee:	fc 01       	movw	r30, r24
     1f0:	37 87       	std	Z+15, r19	; 0x0f
     1f2:	26 87       	std	Z+14, r18	; 0x0e
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN6IRrecv13setReceivePinEh>
     1fa:	ef e4       	ldi	r30, 0x4F	; 79
     1fc:	f4 e0       	ldi	r31, 0x04	; 4
     1fe:	10 82       	st	Z, r1
     200:	11 82       	std	Z+1, r1	; 0x01
     202:	08 95       	ret

00000204 <_ZN6IRrecv6resumeEv>:
     204:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <irparams>
     208:	83 30       	cpi	r24, 0x03	; 3
     20a:	11 f4       	brne	.+4      	; 0x210 <_ZN6IRrecv6resumeEv+0xc>
     20c:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <irparams>
     210:	08 95       	ret

00000212 <_ZN6IRrecv10enableIRInEv>:
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
     218:	f8 94       	cli
     21a:	0e 94 a8 00 	call	0x150	; 0x150 <_Z21timerConfigForReceivev>
     21e:	84 e0       	ldi	r24, 0x04	; 4
     220:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     224:	ce 01       	movw	r24, r28
     226:	0e 94 02 01 	call	0x204	; 0x204 <_ZN6IRrecv6resumeEv>
     22a:	78 94       	sei
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <irparams+0x1>
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <pinMode>

0000023a <_ZN6IRrecv5beginEhbh>:
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ec 01       	movw	r28, r24
     244:	04 2f       	mov	r16, r20
     246:	12 2f       	mov	r17, r18
     248:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN6IRrecv13setReceivePinEh>
     24c:	60 2f       	mov	r22, r16
     24e:	81 2f       	mov	r24, r17
     250:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z14setLEDFeedbackhb>
     254:	ce 01       	movw	r24, r28
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	0c 94 09 01 	jmp	0x212	; 0x212 <_ZN6IRrecv10enableIRInEv>

00000262 <_ZN6IRrecv17initDecodedIRDataEv>:
     262:	fc 01       	movw	r30, r24
     264:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <irparams+0x7>
     268:	88 23       	and	r24, r24
     26a:	39 f0       	breq	.+14     	; 0x27a <_ZN6IRrecv17initDecodedIRDataEv+0x18>
     26c:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <irparams+0x7>
     270:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <irparams+0x8>
     274:	80 e4       	ldi	r24, 0x40	; 64
     276:	81 87       	std	Z+9, r24	; 0x09
     278:	13 c0       	rjmp	.+38     	; 0x2a0 <_ZN6IRrecv17initDecodedIRDataEv+0x3e>
     27a:	11 86       	std	Z+9, r1	; 0x09
     27c:	80 81       	ld	r24, Z
     27e:	80 8b       	std	Z+16, r24	; 0x10
     280:	83 81       	ldd	r24, Z+3	; 0x03
     282:	94 81       	ldd	r25, Z+4	; 0x04
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	85 8b       	std	Z+21, r24	; 0x15
     28a:	96 8b       	std	Z+22, r25	; 0x16
     28c:	a7 8b       	std	Z+23, r26	; 0x17
     28e:	b0 8f       	std	Z+24, r27	; 0x18
     290:	81 81       	ldd	r24, Z+1	; 0x01
     292:	92 81       	ldd	r25, Z+2	; 0x02
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	81 8b       	std	Z+17, r24	; 0x11
     29a:	92 8b       	std	Z+18, r25	; 0x12
     29c:	a3 8b       	std	Z+19, r26	; 0x13
     29e:	b4 8b       	std	Z+20, r27	; 0x14
     2a0:	10 82       	st	Z, r1
     2a2:	14 82       	std	Z+4, r1	; 0x04
     2a4:	13 82       	std	Z+3, r1	; 0x03
     2a6:	12 82       	std	Z+2, r1	; 0x02
     2a8:	11 82       	std	Z+1, r1	; 0x01
     2aa:	12 86       	std	Z+10, r1	; 0x0a
     2ac:	13 86       	std	Z+11, r1	; 0x0b
     2ae:	14 86       	std	Z+12, r1	; 0x0c
     2b0:	15 86       	std	Z+13, r1	; 0x0d
     2b2:	10 86       	std	Z+8, r1	; 0x08
     2b4:	17 82       	std	Z+7, r1	; 0x07
     2b6:	08 95       	ret

000002b8 <_ZN6IRrecv7compareEjj>:
     2b8:	8a e0       	ldi	r24, 0x0A	; 10
     2ba:	84 9f       	mul	r24, r20
     2bc:	f0 01       	movw	r30, r0
     2be:	85 9f       	mul	r24, r21
     2c0:	f0 0d       	add	r31, r0
     2c2:	11 24       	eor	r1, r1
     2c4:	9b 01       	movw	r18, r22
     2c6:	93 e0       	ldi	r25, 0x03	; 3
     2c8:	22 0f       	add	r18, r18
     2ca:	33 1f       	adc	r19, r19
     2cc:	9a 95       	dec	r25
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <_ZN6IRrecv7compareEjj+0x10>
     2d0:	e2 17       	cp	r30, r18
     2d2:	f3 07       	cpc	r31, r19
     2d4:	78 f0       	brcs	.+30     	; 0x2f4 <_ZN6IRrecv7compareEjj+0x3c>
     2d6:	86 9f       	mul	r24, r22
     2d8:	90 01       	movw	r18, r0
     2da:	87 9f       	mul	r24, r23
     2dc:	30 0d       	add	r19, r0
     2de:	11 24       	eor	r1, r1
     2e0:	83 e0       	ldi	r24, 0x03	; 3
     2e2:	44 0f       	add	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	8a 95       	dec	r24
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <_ZN6IRrecv7compareEjj+0x2a>
     2ea:	24 17       	cp	r18, r20
     2ec:	35 07       	cpc	r19, r21
     2ee:	20 f0       	brcs	.+8      	; 0x2f8 <_ZN6IRrecv7compareEjj+0x40>
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	08 95       	ret
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 95       	ret
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	08 95       	ret

000002fc <_ZN6IRrecv10decodeHashEv>:
     2fc:	8f 92       	push	r8
     2fe:	9f 92       	push	r9
     300:	af 92       	push	r10
     302:	bf 92       	push	r11
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	fc 01       	movw	r30, r24
     314:	e6 84       	ldd	r14, Z+14	; 0x0e
     316:	f7 84       	ldd	r15, Z+15	; 0x0f
     318:	f7 01       	movw	r30, r14
     31a:	00 85       	ldd	r16, Z+8	; 0x08
     31c:	06 30       	cpi	r16, 0x06	; 6
     31e:	f0 f1       	brcs	.+124    	; 0x39c <_ZN6IRrecv10decodeHashEv+0xa0>
     320:	ec 01       	movw	r28, r24
     322:	dd 24       	eor	r13, r13
     324:	d3 94       	inc	r13
     326:	75 ec       	ldi	r23, 0xC5	; 197
     328:	87 2e       	mov	r8, r23
     32a:	7d e9       	ldi	r23, 0x9D	; 157
     32c:	97 2e       	mov	r9, r23
     32e:	7c e1       	ldi	r23, 0x1C	; 28
     330:	a7 2e       	mov	r10, r23
     332:	71 e8       	ldi	r23, 0x81	; 129
     334:	b7 2e       	mov	r11, r23
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	8d 2d       	mov	r24, r13
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9c 01       	movw	r18, r24
     33e:	2e 5f       	subi	r18, 0xFE	; 254
     340:	3f 4f       	sbci	r19, 0xFF	; 255
     342:	20 17       	cp	r18, r16
     344:	31 07       	cpc	r19, r17
     346:	fc f4       	brge	.+62     	; 0x386 <_ZN6IRrecv10decodeHashEv+0x8a>
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	f7 01       	movw	r30, r14
     34e:	e2 0f       	add	r30, r18
     350:	f3 1f       	adc	r31, r19
     352:	41 85       	ldd	r20, Z+9	; 0x09
     354:	52 85       	ldd	r21, Z+10	; 0x0a
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	f7 01       	movw	r30, r14
     35c:	e8 0f       	add	r30, r24
     35e:	f9 1f       	adc	r31, r25
     360:	61 85       	ldd	r22, Z+9	; 0x09
     362:	72 85       	ldd	r23, Z+10	; 0x0a
     364:	ce 01       	movw	r24, r28
     366:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN6IRrecv7compareEjj>
     36a:	e8 2f       	mov	r30, r24
     36c:	a5 01       	movw	r20, r10
     36e:	94 01       	movw	r18, r8
     370:	63 e9       	ldi	r22, 0x93	; 147
     372:	71 e0       	ldi	r23, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__mulsi3>
     37c:	4b 01       	movw	r8, r22
     37e:	5c 01       	movw	r10, r24
     380:	8e 26       	eor	r8, r30
     382:	d3 94       	inc	r13
     384:	d9 cf       	rjmp	.-78     	; 0x338 <_ZN6IRrecv10decodeHashEv+0x3c>
     386:	8a 86       	std	Y+10, r8	; 0x0a
     388:	9b 86       	std	Y+11, r9	; 0x0b
     38a:	ac 86       	std	Y+12, r10	; 0x0c
     38c:	bd 86       	std	Y+13, r11	; 0x0d
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	98 87       	std	Y+8, r25	; 0x08
     394:	8f 83       	std	Y+7, r24	; 0x07
     396:	18 82       	st	Y, r1
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	01 c0       	rjmp	.+2      	; 0x39e <_ZN6IRrecv10decodeHashEv+0xa2>
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	9f 90       	pop	r9
     3b2:	8f 90       	pop	r8
     3b4:	08 95       	ret

000003b6 <_Z10matchTicksjj>:
     3b6:	9c 01       	movw	r18, r24
     3b8:	fb 01       	movw	r30, r22
     3ba:	cb 01       	movw	r24, r22
     3bc:	63 e4       	ldi	r22, 0x43	; 67
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__udivmodhi4>
     3c4:	26 17       	cp	r18, r22
     3c6:	37 07       	cpc	r19, r23
     3c8:	58 f0       	brcs	.+22     	; 0x3e0 <_Z10matchTicksjj+0x2a>
     3ca:	cf 01       	movw	r24, r30
     3cc:	68 e2       	ldi	r22, 0x28	; 40
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__udivmodhi4>
     3d4:	6f 5f       	subi	r22, 0xFF	; 255
     3d6:	7f 4f       	sbci	r23, 0xFF	; 255
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	62 17       	cp	r22, r18
     3dc:	73 07       	cpc	r23, r19
     3de:	08 f4       	brcc	.+2      	; 0x3e2 <_Z10matchTicksjj+0x2c>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	08 95       	ret

000003e4 <_ZN6IRrecv15getBiphaselevelEv>:
     3e4:	bf 92       	push	r11
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	dc 01       	movw	r26, r24
     3f8:	1e 96       	adiw	r26, 0x0e	; 14
     3fa:	ed 91       	ld	r30, X+
     3fc:	fc 91       	ld	r31, X
     3fe:	1f 97       	sbiw	r26, 0x0f	; 15
     400:	00 91 4b 03 	lds	r16, 0x034B	; 0x80034b <sBiphaseDecodeRawbuffOffset>
     404:	80 85       	ldd	r24, Z+8	; 0x08
     406:	08 17       	cp	r16, r24
     408:	08 f0       	brcs	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40a:	4d c0       	rjmp	.+154    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     40c:	10 2f       	mov	r17, r16
     40e:	11 70       	andi	r17, 0x01	; 1
     410:	b0 90 48 03 	lds	r11, 0x0348	; 0x800348 <sUsedTimingIntervals>
     414:	b1 10       	cpse	r11, r1
     416:	35 c0       	rjmp	.+106    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     418:	e0 0f       	add	r30, r16
     41a:	f1 1d       	adc	r31, r1
     41c:	e0 0f       	add	r30, r16
     41e:	f1 1d       	adc	r31, r1
     420:	e1 84       	ldd	r14, Z+9	; 0x09
     422:	f2 84       	ldd	r15, Z+10	; 0x0a
     424:	11 30       	cpi	r17, 0x01	; 1
     426:	19 f0       	breq	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     428:	cc ee       	ldi	r28, 0xEC	; 236
     42a:	df ef       	ldi	r29, 0xFF	; 255
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     42e:	c4 e1       	ldi	r28, 0x14	; 20
     430:	d0 e0       	ldi	r29, 0x00	; 0
     432:	c0 90 46 03 	lds	r12, 0x0346	; 0x800346 <sBiphaseTimeUnit>
     436:	d0 90 47 03 	lds	r13, 0x0347	; 0x800347 <sBiphaseTimeUnit+0x1>
     43a:	cc 0d       	add	r28, r12
     43c:	dd 1d       	adc	r29, r13
     43e:	be 01       	movw	r22, r28
     440:	c7 01       	movw	r24, r14
     442:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z10matchTicksjj>
     446:	88 23       	and	r24, r24
     448:	19 f0       	breq	.+6      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	15 c0       	rjmp	.+42     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     450:	cc 0d       	add	r28, r12
     452:	dd 1d       	adc	r29, r13
     454:	be 01       	movw	r22, r28
     456:	c7 01       	movw	r24, r14
     458:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z10matchTicksjj>
     45c:	88 23       	and	r24, r24
     45e:	19 f0       	breq	.+6      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0a c0       	rjmp	.+20     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     466:	b6 01       	movw	r22, r12
     468:	6c 0f       	add	r22, r28
     46a:	7d 1f       	adc	r23, r29
     46c:	c7 01       	movw	r24, r14
     46e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z10matchTicksjj>
     472:	88 23       	and	r24, r24
     474:	d1 f0       	breq	.+52     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <sCurrentTimingIntervals+0x1>
     47e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <sCurrentTimingIntervals>
     482:	b3 94       	inc	r11
     484:	b0 92 48 03 	sts	0x0348, r11	; 0x800348 <sUsedTimingIntervals>
     488:	8b 2d       	mov	r24, r11
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <sCurrentTimingIntervals>
     490:	30 91 4a 03 	lds	r19, 0x034A	; 0x80034a <sCurrentTimingIntervals+0x1>
     494:	82 17       	cp	r24, r18
     496:	93 07       	cpc	r25, r19
     498:	50 f0       	brcs	.+20     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     49a:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <sUsedTimingIntervals>
     49e:	0f 5f       	subi	r16, 0xFF	; 255
     4a0:	00 93 4b 03 	sts	0x034B, r16	; 0x80034b <sBiphaseDecodeRawbuffOffset>
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4ae:	81 2f       	mov	r24, r17
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	08 95       	ret

000004c4 <_Z9matchMarkjj>:
     4c4:	fc 01       	movw	r30, r24
     4c6:	9b 01       	movw	r18, r22
     4c8:	2c 5e       	subi	r18, 0xEC	; 236
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	c9 01       	movw	r24, r18
     4ce:	63 e4       	ldi	r22, 0x43	; 67
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__udivmodhi4>
     4d6:	e6 17       	cp	r30, r22
     4d8:	f7 07       	cpc	r31, r23
     4da:	58 f0       	brcs	.+22     	; 0x4f2 <_Z9matchMarkjj+0x2e>
     4dc:	c9 01       	movw	r24, r18
     4de:	68 e2       	ldi	r22, 0x28	; 40
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__udivmodhi4>
     4e6:	6f 5f       	subi	r22, 0xFF	; 255
     4e8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	6e 17       	cp	r22, r30
     4ee:	7f 07       	cpc	r23, r31
     4f0:	08 f4       	brcc	.+2      	; 0x4f4 <_Z9matchMarkjj+0x30>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	08 95       	ret

000004f6 <_Z10matchSpacejj>:
     4f6:	fc 01       	movw	r30, r24
     4f8:	9b 01       	movw	r18, r22
     4fa:	24 51       	subi	r18, 0x14	; 20
     4fc:	31 09       	sbc	r19, r1
     4fe:	c9 01       	movw	r24, r18
     500:	63 e4       	ldi	r22, 0x43	; 67
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__udivmodhi4>
     508:	e6 17       	cp	r30, r22
     50a:	f7 07       	cpc	r31, r23
     50c:	58 f0       	brcs	.+22     	; 0x524 <_Z10matchSpacejj+0x2e>
     50e:	c9 01       	movw	r24, r18
     510:	68 e2       	ldi	r22, 0x28	; 40
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__udivmodhi4>
     518:	6f 5f       	subi	r22, 0xFF	; 255
     51a:	7f 4f       	sbci	r23, 0xFF	; 255
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	6e 17       	cp	r22, r30
     520:	7f 07       	cpc	r23, r31
     522:	08 f4       	brcc	.+2      	; 0x526 <_Z10matchSpacejj+0x30>
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	08 95       	ret

00000528 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb>:
     528:	2f 92       	push	r2
     52a:	3f 92       	push	r3
     52c:	4f 92       	push	r4
     52e:	5f 92       	push	r5
     530:	6f 92       	push	r6
     532:	7f 92       	push	r7
     534:	8f 92       	push	r8
     536:	9f 92       	push	r9
     538:	af 92       	push	r10
     53a:	bf 92       	push	r11
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	27 97       	sbiw	r28, 0x07	; 7
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	9b 83       	std	Y+3, r25	; 0x03
     55e:	8a 83       	std	Y+2, r24	; 0x02
     560:	69 83       	std	Y+1, r22	; 0x01
     562:	3d 83       	std	Y+5, r19	; 0x05
     564:	2c 83       	std	Y+4, r18	; 0x04
     566:	28 01       	movw	r4, r16
     568:	37 01       	movw	r6, r14
     56a:	fc 01       	movw	r30, r24
     56c:	06 85       	ldd	r16, Z+14	; 0x0e
     56e:	17 85       	ldd	r17, Z+15	; 0x0f
     570:	c8 01       	movw	r24, r16
     572:	84 0f       	add	r24, r20
     574:	91 1d       	adc	r25, r1
     576:	84 0f       	add	r24, r20
     578:	91 1d       	adc	r25, r1
     57a:	09 96       	adiw	r24, 0x09	; 9
     57c:	9f 83       	std	Y+7, r25	; 0x07
     57e:	8e 83       	std	Y+6, r24	; 0x06
     580:	c1 10       	cpse	r12, r1
     582:	08 c0       	rjmp	.+16     	; 0x594 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x6c>
     584:	81 2c       	mov	r8, r1
     586:	91 2c       	mov	r9, r1
     588:	54 01       	movw	r10, r8
     58a:	83 94       	inc	r8
     58c:	c1 2c       	mov	r12, r1
     58e:	d1 2c       	mov	r13, r1
     590:	76 01       	movw	r14, r12
     592:	6d c0       	rjmp	.+218    	; 0x66e <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x146>
     594:	91 2c       	mov	r9, r1
     596:	c1 2c       	mov	r12, r1
     598:	d1 2c       	mov	r13, r1
     59a:	76 01       	movw	r14, r12
     59c:	99 81       	ldd	r25, Y+1	; 0x01
     59e:	99 16       	cp	r9, r25
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x7c>
     5a2:	7e c0       	rjmp	.+252    	; 0x6a0 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x178>
     5a4:	ee 81       	ldd	r30, Y+6	; 0x06
     5a6:	ff 81       	ldd	r31, Y+7	; 0x07
     5a8:	a0 80       	ld	r10, Z
     5aa:	b1 80       	ldd	r11, Z+1	; 0x01
     5ac:	6c 81       	ldd	r22, Y+4	; 0x04
     5ae:	7d 81       	ldd	r23, Y+5	; 0x05
     5b0:	c5 01       	movw	r24, r10
     5b2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z9matchMarkjj>
     5b6:	88 23       	and	r24, r24
     5b8:	39 f0       	breq	.+14     	; 0x5c8 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0xa0>
     5ba:	cc 0c       	add	r12, r12
     5bc:	dd 1c       	adc	r13, r13
     5be:	ee 1c       	adc	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	68 94       	set
     5c4:	c0 f8       	bld	r12, 0
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0xb6>
     5c8:	b2 01       	movw	r22, r4
     5ca:	c5 01       	movw	r24, r10
     5cc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z9matchMarkjj>
     5d0:	88 23       	and	r24, r24
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0xae>
     5d4:	6c c0       	rjmp	.+216    	; 0x6ae <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x186>
     5d6:	cc 0c       	add	r12, r12
     5d8:	dd 1c       	adc	r13, r13
     5da:	ee 1c       	adc	r14, r14
     5dc:	ff 1c       	adc	r15, r15
     5de:	2e 81       	ldd	r18, Y+6	; 0x06
     5e0:	3f 81       	ldd	r19, Y+7	; 0x07
     5e2:	2e 5f       	subi	r18, 0xFE	; 254
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	f8 01       	movw	r30, r16
     5e8:	40 85       	ldd	r20, Z+8	; 0x08
     5ea:	c8 01       	movw	r24, r16
     5ec:	84 0f       	add	r24, r20
     5ee:	91 1d       	adc	r25, r1
     5f0:	84 0f       	add	r24, r20
     5f2:	91 1d       	adc	r25, r1
     5f4:	09 96       	adiw	r24, 0x09	; 9
     5f6:	28 17       	cp	r18, r24
     5f8:	39 07       	cpc	r19, r25
     5fa:	70 f4       	brcc	.+28     	; 0x618 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0xf0>
     5fc:	b3 01       	movw	r22, r6
     5fe:	ee 81       	ldd	r30, Y+6	; 0x06
     600:	ff 81       	ldd	r31, Y+7	; 0x07
     602:	82 81       	ldd	r24, Z+2	; 0x02
     604:	93 81       	ldd	r25, Z+3	; 0x03
     606:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10matchSpacejj>
     60a:	88 23       	and	r24, r24
     60c:	09 f4       	brne	.+2      	; 0x610 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0xe8>
     60e:	4f c0       	rjmp	.+158    	; 0x6ae <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x186>
     610:	2e 81       	ldd	r18, Y+6	; 0x06
     612:	3f 81       	ldd	r19, Y+7	; 0x07
     614:	2c 5f       	subi	r18, 0xFC	; 252
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	93 94       	inc	r9
     61a:	3f 83       	std	Y+7, r19	; 0x07
     61c:	2e 83       	std	Y+6, r18	; 0x06
     61e:	be cf       	rjmp	.-132    	; 0x59c <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x74>
     620:	ee 81       	ldd	r30, Y+6	; 0x06
     622:	ff 81       	ldd	r31, Y+7	; 0x07
     624:	20 80       	ld	r2, Z
     626:	31 80       	ldd	r3, Z+1	; 0x01
     628:	6c 81       	ldd	r22, Y+4	; 0x04
     62a:	7d 81       	ldd	r23, Y+5	; 0x05
     62c:	c1 01       	movw	r24, r2
     62e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z9matchMarkjj>
     632:	88 23       	and	r24, r24
     634:	01 f1       	breq	.+64     	; 0x676 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x14e>
     636:	c8 28       	or	r12, r8
     638:	d9 28       	or	r13, r9
     63a:	ea 28       	or	r14, r10
     63c:	fb 28       	or	r15, r11
     63e:	2e 81       	ldd	r18, Y+6	; 0x06
     640:	3f 81       	ldd	r19, Y+7	; 0x07
     642:	2e 5f       	subi	r18, 0xFE	; 254
     644:	3f 4f       	sbci	r19, 0xFF	; 255
     646:	f8 01       	movw	r30, r16
     648:	40 85       	ldd	r20, Z+8	; 0x08
     64a:	c8 01       	movw	r24, r16
     64c:	84 0f       	add	r24, r20
     64e:	91 1d       	adc	r25, r1
     650:	84 0f       	add	r24, r20
     652:	91 1d       	adc	r25, r1
     654:	09 96       	adiw	r24, 0x09	; 9
     656:	28 17       	cp	r18, r24
     658:	39 07       	cpc	r19, r25
     65a:	a0 f0       	brcs	.+40     	; 0x684 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x15c>
     65c:	88 0c       	add	r8, r8
     65e:	99 1c       	adc	r9, r9
     660:	aa 1c       	adc	r10, r10
     662:	bb 1c       	adc	r11, r11
     664:	f9 81       	ldd	r31, Y+1	; 0x01
     666:	f1 50       	subi	r31, 0x01	; 1
     668:	f9 83       	std	Y+1, r31	; 0x01
     66a:	3f 83       	std	Y+7, r19	; 0x07
     66c:	2e 83       	std	Y+6, r18	; 0x06
     66e:	f9 81       	ldd	r31, Y+1	; 0x01
     670:	f1 11       	cpse	r31, r1
     672:	d6 cf       	rjmp	.-84     	; 0x620 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0xf8>
     674:	15 c0       	rjmp	.+42     	; 0x6a0 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x178>
     676:	b2 01       	movw	r22, r4
     678:	c1 01       	movw	r24, r2
     67a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z9matchMarkjj>
     67e:	81 11       	cpse	r24, r1
     680:	de cf       	rjmp	.-68     	; 0x63e <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x116>
     682:	15 c0       	rjmp	.+42     	; 0x6ae <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x186>
     684:	b3 01       	movw	r22, r6
     686:	ee 81       	ldd	r30, Y+6	; 0x06
     688:	ff 81       	ldd	r31, Y+7	; 0x07
     68a:	82 81       	ldd	r24, Z+2	; 0x02
     68c:	93 81       	ldd	r25, Z+3	; 0x03
     68e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10matchSpacejj>
     692:	88 23       	and	r24, r24
     694:	61 f0       	breq	.+24     	; 0x6ae <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x186>
     696:	2e 81       	ldd	r18, Y+6	; 0x06
     698:	3f 81       	ldd	r19, Y+7	; 0x07
     69a:	2c 5f       	subi	r18, 0xFC	; 252
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	de cf       	rjmp	.-68     	; 0x65c <_ZN6IRrecv20decodePulseWidthDataEhhjjjb+0x134>
     6a0:	ea 81       	ldd	r30, Y+2	; 0x02
     6a2:	fb 81       	ldd	r31, Y+3	; 0x03
     6a4:	c2 86       	std	Z+10, r12	; 0x0a
     6a6:	d3 86       	std	Z+11, r13	; 0x0b
     6a8:	e4 86       	std	Z+12, r14	; 0x0c
     6aa:	f5 86       	std	Z+13, r15	; 0x0d
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	27 96       	adiw	r28, 0x07	; 7
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	7f 90       	pop	r7
     6d4:	6f 90       	pop	r6
     6d6:	5f 90       	pop	r5
     6d8:	4f 90       	pop	r4
     6da:	3f 90       	pop	r3
     6dc:	2f 90       	pop	r2
     6de:	08 95       	ret

000006e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>:
     6e0:	2f 92       	push	r2
     6e2:	3f 92       	push	r3
     6e4:	4f 92       	push	r4
     6e6:	5f 92       	push	r5
     6e8:	6f 92       	push	r6
     6ea:	7f 92       	push	r7
     6ec:	8f 92       	push	r8
     6ee:	9f 92       	push	r9
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	00 d0       	rcall	.+0      	; 0x706 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x26>
     706:	00 d0       	rcall	.+0      	; 0x708 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x28>
     708:	1f 92       	push	r1
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	9b 83       	std	Y+3, r25	; 0x03
     710:	8a 83       	std	Y+2, r24	; 0x02
     712:	69 83       	std	Y+1, r22	; 0x01
     714:	19 01       	movw	r2, r18
     716:	38 01       	movw	r6, r16
     718:	87 01       	movw	r16, r14
     71a:	84 2f       	mov	r24, r20
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	09 96       	adiw	r24, 0x09	; 9
     724:	ea 81       	ldd	r30, Y+2	; 0x02
     726:	fb 81       	ldd	r31, Y+3	; 0x03
     728:	46 85       	ldd	r20, Z+14	; 0x0e
     72a:	57 85       	ldd	r21, Z+15	; 0x0f
     72c:	84 0f       	add	r24, r20
     72e:	95 1f       	adc	r25, r21
     730:	9d 83       	std	Y+5, r25	; 0x05
     732:	8c 83       	std	Y+4, r24	; 0x04
     734:	c1 10       	cpse	r12, r1
     736:	08 c0       	rjmp	.+16     	; 0x748 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x68>
     738:	81 2c       	mov	r8, r1
     73a:	91 2c       	mov	r9, r1
     73c:	54 01       	movw	r10, r8
     73e:	83 94       	inc	r8
     740:	c1 2c       	mov	r12, r1
     742:	d1 2c       	mov	r13, r1
     744:	76 01       	movw	r14, r12
     746:	58 c0       	rjmp	.+176    	; 0x7f8 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x118>
     748:	91 2c       	mov	r9, r1
     74a:	c1 2c       	mov	r12, r1
     74c:	d1 2c       	mov	r13, r1
     74e:	76 01       	movw	r14, r12
     750:	f9 81       	ldd	r31, Y+1	; 0x01
     752:	9f 16       	cp	r9, r31
     754:	09 f4       	brne	.+2      	; 0x758 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x78>
     756:	5b c0       	rjmp	.+182    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     758:	b1 01       	movw	r22, r2
     75a:	ec 81       	ldd	r30, Y+4	; 0x04
     75c:	fd 81       	ldd	r31, Y+5	; 0x05
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z9matchMarkjj>
     766:	88 23       	and	r24, r24
     768:	09 f4       	brne	.+2      	; 0x76c <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x8c>
     76a:	58 c0       	rjmp	.+176    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     76c:	ec 81       	ldd	r30, Y+4	; 0x04
     76e:	fd 81       	ldd	r31, Y+5	; 0x05
     770:	a2 80       	ldd	r10, Z+2	; 0x02
     772:	b3 80       	ldd	r11, Z+3	; 0x03
     774:	b3 01       	movw	r22, r6
     776:	c5 01       	movw	r24, r10
     778:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10matchSpacejj>
     77c:	88 23       	and	r24, r24
     77e:	39 f0       	breq	.+14     	; 0x78e <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0xae>
     780:	cc 0c       	add	r12, r12
     782:	dd 1c       	adc	r13, r13
     784:	ee 1c       	adc	r14, r14
     786:	ff 1c       	adc	r15, r15
     788:	68 94       	set
     78a:	c0 f8       	bld	r12, 0
     78c:	0b c0       	rjmp	.+22     	; 0x7a4 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0xc4>
     78e:	b8 01       	movw	r22, r16
     790:	c5 01       	movw	r24, r10
     792:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10matchSpacejj>
     796:	88 23       	and	r24, r24
     798:	09 f4       	brne	.+2      	; 0x79c <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0xbc>
     79a:	40 c0       	rjmp	.+128    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     79c:	cc 0c       	add	r12, r12
     79e:	dd 1c       	adc	r13, r13
     7a0:	ee 1c       	adc	r14, r14
     7a2:	ff 1c       	adc	r15, r15
     7a4:	8c 81       	ldd	r24, Y+4	; 0x04
     7a6:	9d 81       	ldd	r25, Y+5	; 0x05
     7a8:	04 96       	adiw	r24, 0x04	; 4
     7aa:	9d 83       	std	Y+5, r25	; 0x05
     7ac:	8c 83       	std	Y+4, r24	; 0x04
     7ae:	93 94       	inc	r9
     7b0:	cf cf       	rjmp	.-98     	; 0x750 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x70>
     7b2:	b1 01       	movw	r22, r2
     7b4:	ec 81       	ldd	r30, Y+4	; 0x04
     7b6:	fd 81       	ldd	r31, Y+5	; 0x05
     7b8:	80 81       	ld	r24, Z
     7ba:	91 81       	ldd	r25, Z+1	; 0x01
     7bc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z9matchMarkjj>
     7c0:	88 23       	and	r24, r24
     7c2:	61 f1       	breq	.+88     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7c4:	ec 81       	ldd	r30, Y+4	; 0x04
     7c6:	fd 81       	ldd	r31, Y+5	; 0x05
     7c8:	42 80       	ldd	r4, Z+2	; 0x02
     7ca:	53 80       	ldd	r5, Z+3	; 0x03
     7cc:	b3 01       	movw	r22, r6
     7ce:	c2 01       	movw	r24, r4
     7d0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10matchSpacejj>
     7d4:	88 23       	and	r24, r24
     7d6:	a1 f0       	breq	.+40     	; 0x800 <__DATA_REGION_LENGTH__>
     7d8:	c8 28       	or	r12, r8
     7da:	d9 28       	or	r13, r9
     7dc:	ea 28       	or	r14, r10
     7de:	fb 28       	or	r15, r11
     7e0:	8c 81       	ldd	r24, Y+4	; 0x04
     7e2:	9d 81       	ldd	r25, Y+5	; 0x05
     7e4:	04 96       	adiw	r24, 0x04	; 4
     7e6:	9d 83       	std	Y+5, r25	; 0x05
     7e8:	8c 83       	std	Y+4, r24	; 0x04
     7ea:	88 0c       	add	r8, r8
     7ec:	99 1c       	adc	r9, r9
     7ee:	aa 1c       	adc	r10, r10
     7f0:	bb 1c       	adc	r11, r11
     7f2:	99 81       	ldd	r25, Y+1	; 0x01
     7f4:	91 50       	subi	r25, 0x01	; 1
     7f6:	99 83       	std	Y+1, r25	; 0x01
     7f8:	99 81       	ldd	r25, Y+1	; 0x01
     7fa:	91 11       	cpse	r25, r1
     7fc:	da cf       	rjmp	.-76     	; 0x7b2 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0xd2>
     7fe:	07 c0       	rjmp	.+14     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     800:	b8 01       	movw	r22, r16
     802:	c2 01       	movw	r24, r4
     804:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10matchSpacejj>
     808:	81 11       	cpse	r24, r1
     80a:	ea cf       	rjmp	.-44     	; 0x7e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb+0x100>
     80c:	07 c0       	rjmp	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     80e:	ea 81       	ldd	r30, Y+2	; 0x02
     810:	fb 81       	ldd	r31, Y+3	; 0x03
     812:	c2 86       	std	Z+10, r12	; 0x0a
     814:	d3 86       	std	Z+11, r13	; 0x0b
     816:	e4 86       	std	Z+12, r14	; 0x0c
     818:	f5 86       	std	Z+13, r15	; 0x0d
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	bf 90       	pop	r11
     838:	af 90       	pop	r10
     83a:	9f 90       	pop	r9
     83c:	8f 90       	pop	r8
     83e:	7f 90       	pop	r7
     840:	6f 90       	pop	r6
     842:	5f 90       	pop	r5
     844:	4f 90       	pop	r4
     846:	3f 90       	pop	r3
     848:	2f 90       	pop	r2
     84a:	08 95       	ret

0000084c <__vector_8>:
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
     86e:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <irparams+0x2>
     872:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <irparams+0x3>
     876:	90 81       	ld	r25, Z
     878:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <irparams+0x4>
     87c:	98 23       	and	r25, r24
     87e:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <irparams+0x5>
     882:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <irparams+0x6>
     886:	2f 3f       	cpi	r18, 0xFF	; 255
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	38 07       	cpc	r19, r24
     88c:	31 f0       	breq	.+12     	; 0x89a <__vector_8+0x4e>
     88e:	2f 5f       	subi	r18, 0xFF	; 255
     890:	3f 4f       	sbci	r19, 0xFF	; 255
     892:	30 93 52 03 	sts	0x0352, r19	; 0x800352 <irparams+0x6>
     896:	20 93 51 03 	sts	0x0351, r18	; 0x800351 <irparams+0x5>
     89a:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <irparams>
     89e:	81 11       	cpse	r24, r1
     8a0:	19 c0       	rjmp	.+50     	; 0x8d4 <__vector_8+0x88>
     8a2:	91 11       	cpse	r25, r1
     8a4:	61 c0       	rjmp	.+194    	; 0x968 <__stack+0x69>
     8a6:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <irparams+0x5>
     8aa:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <irparams+0x6>
     8ae:	25 36       	cpi	r18, 0x65	; 101
     8b0:	31 05       	cpc	r19, r1
     8b2:	58 f0       	brcs	.+22     	; 0x8ca <__vector_8+0x7e>
     8b4:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <irparams+0x7>
     8b8:	30 93 56 03 	sts	0x0356, r19	; 0x800356 <irparams+0xa>
     8bc:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <irparams+0x9>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <irparams+0x8>
     8c6:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <irparams>
     8ca:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <irparams+0x6>
     8ce:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <irparams+0x5>
     8d2:	4a c0       	rjmp	.+148    	; 0x968 <__stack+0x69>
     8d4:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <irparams>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	a9 f4       	brne	.+42     	; 0x906 <__stack+0x7>
     8dc:	99 23       	and	r25, r25
     8de:	09 f4       	brne	.+2      	; 0x8e2 <__vector_8+0x96>
     8e0:	43 c0       	rjmp	.+134    	; 0x968 <__stack+0x69>
     8e2:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <irparams+0x8>
     8e6:	8e 0f       	add	r24, r30
     8e8:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <irparams+0x8>
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	e4 5b       	subi	r30, 0xB4	; 180
     8f4:	fc 4f       	sbci	r31, 0xFC	; 252
     8f6:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <irparams+0x5>
     8fa:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <irparams+0x6>
     8fe:	32 87       	std	Z+10, r19	; 0x0a
     900:	21 87       	std	Z+9, r18	; 0x09
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	e0 cf       	rjmp	.-64     	; 0x8c6 <__vector_8+0x7a>
     906:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <irparams>
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	31 f5       	brne	.+76     	; 0x95a <__stack+0x5b>
     90e:	91 11       	cpse	r25, r1
     910:	19 c0       	rjmp	.+50     	; 0x944 <__stack+0x45>
     912:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <irparams+0x8>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	e0 37       	cpi	r30, 0x70	; 112
     91a:	20 f0       	brcs	.+8      	; 0x924 <__stack+0x25>
     91c:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <irparams+0x7>
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	d1 cf       	rjmp	.-94     	; 0x8c6 <__vector_8+0x7a>
     924:	8e 0f       	add	r24, r30
     926:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <irparams+0x8>
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	e4 5b       	subi	r30, 0xB4	; 180
     932:	fc 4f       	sbci	r31, 0xFC	; 252
     934:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <irparams+0x5>
     938:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <irparams+0x6>
     93c:	32 87       	std	Z+10, r19	; 0x0a
     93e:	21 87       	std	Z+9, r18	; 0x09
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	c1 cf       	rjmp	.-126    	; 0x8c6 <__vector_8+0x7a>
     944:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <irparams+0x5>
     948:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <irparams+0x6>
     94c:	25 36       	cpi	r18, 0x65	; 101
     94e:	31 05       	cpc	r19, r1
     950:	58 f0       	brcs	.+22     	; 0x968 <__stack+0x69>
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <irparams>
     958:	07 c0       	rjmp	.+14     	; 0x968 <__stack+0x69>
     95a:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <irparams>
     95e:	83 30       	cpi	r24, 0x03	; 3
     960:	19 f4       	brne	.+6      	; 0x968 <__stack+0x69>
     962:	99 23       	and	r25, r25
     964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x69>
     966:	b1 cf       	rjmp	.-158    	; 0x8ca <__vector_8+0x7e>
     968:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <FeedbackLEDControl+0x1>
     96c:	88 23       	and	r24, r24
     96e:	29 f0       	breq	.+10     	; 0x97a <__stack+0x7b>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	91 11       	cpse	r25, r1
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0e 94 c2 00 	call	0x184	; 0x184 <_Z14setFeedbackLEDb>
     97a:	ff 91       	pop	r31
     97c:	ef 91       	pop	r30
     97e:	bf 91       	pop	r27
     980:	af 91       	pop	r26
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	7f 91       	pop	r23
     988:	6f 91       	pop	r22
     98a:	5f 91       	pop	r21
     98c:	4f 91       	pop	r20
     98e:	3f 91       	pop	r19
     990:	2f 91       	pop	r18
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <_ZN6IRrecv14decodeBoseWaveEv>:
     99c:	cf 92       	push	r12
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	dc 01       	movw	r26, r24
     9ac:	1e 96       	adiw	r26, 0x0e	; 14
     9ae:	ed 91       	ld	r30, X+
     9b0:	fc 91       	ld	r31, X
     9b2:	1f 97       	sbiw	r26, 0x0f	; 15
     9b4:	23 85       	ldd	r18, Z+11	; 0x0b
     9b6:	34 85       	ldd	r19, Z+12	; 0x0c
     9b8:	20 51       	subi	r18, 0x10	; 16
     9ba:	31 09       	sbc	r19, r1
     9bc:	2d 30       	cpi	r18, 0x0D	; 13
     9be:	31 05       	cpc	r19, r1
     9c0:	10 f0       	brcs	.+4      	; 0x9c6 <_ZN6IRrecv14decodeBoseWaveEv+0x2a>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	3c c0       	rjmp	.+120    	; 0xa3e <_ZN6IRrecv14decodeBoseWaveEv+0xa2>
     9c6:	20 85       	ldd	r18, Z+8	; 0x08
     9c8:	24 32       	cpi	r18, 0x24	; 36
     9ca:	d9 f7       	brne	.-10     	; 0x9c2 <_ZN6IRrecv14decodeBoseWaveEv+0x26>
     9cc:	25 85       	ldd	r18, Z+13	; 0x0d
     9ce:	36 85       	ldd	r19, Z+14	; 0x0e
     9d0:	25 51       	subi	r18, 0x15	; 21
     9d2:	31 09       	sbc	r19, r1
     9d4:	20 31       	cpi	r18, 0x10	; 16
     9d6:	31 05       	cpc	r19, r1
     9d8:	a0 f7       	brcc	.-24     	; 0x9c2 <_ZN6IRrecv14decodeBoseWaveEv+0x26>
     9da:	ec 01       	movw	r28, r24
     9dc:	c1 2c       	mov	r12, r1
     9de:	87 ea       	ldi	r24, 0xA7	; 167
     9e0:	e8 2e       	mov	r14, r24
     9e2:	85 e0       	ldi	r24, 0x05	; 5
     9e4:	f8 2e       	mov	r15, r24
     9e6:	04 ed       	ldi	r16, 0xD4	; 212
     9e8:	11 e0       	ldi	r17, 0x01	; 1
     9ea:	26 e1       	ldi	r18, 0x16	; 22
     9ec:	32 e0       	ldi	r19, 0x02	; 2
     9ee:	43 e0       	ldi	r20, 0x03	; 3
     9f0:	60 e1       	ldi	r22, 0x10	; 16
     9f2:	ce 01       	movw	r24, r28
     9f4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
     9f8:	88 23       	and	r24, r24
     9fa:	19 f3       	breq	.-58     	; 0x9c2 <_ZN6IRrecv14decodeBoseWaveEv+0x26>
     9fc:	ee 85       	ldd	r30, Y+14	; 0x0e
     9fe:	ff 85       	ldd	r31, Y+15	; 0x0f
     a00:	df 01       	movw	r26, r30
     a02:	a1 5b       	subi	r26, 0xB1	; 177
     a04:	bf 4f       	sbci	r27, 0xFF	; 255
     a06:	2d 91       	ld	r18, X+
     a08:	3c 91       	ld	r19, X
     a0a:	28 50       	subi	r18, 0x08	; 8
     a0c:	31 09       	sbc	r19, r1
     a0e:	27 30       	cpi	r18, 0x07	; 7
     a10:	31 05       	cpc	r19, r1
     a12:	b8 f6       	brcc	.-82     	; 0x9c2 <_ZN6IRrecv14decodeBoseWaveEv+0x26>
     a14:	2a 85       	ldd	r18, Y+10	; 0x0a
     a16:	9b 85       	ldd	r25, Y+11	; 0x0b
     a18:	92 27       	eor	r25, r18
     a1a:	9f 3f       	cpi	r25, 0xFF	; 255
     a1c:	91 f6       	brne	.-92     	; 0x9c2 <_ZN6IRrecv14decodeBoseWaveEv+0x26>
     a1e:	41 85       	ldd	r20, Z+9	; 0x09
     a20:	52 85       	ldd	r21, Z+10	; 0x0a
     a22:	44 31       	cpi	r20, 0x14	; 20
     a24:	55 40       	sbci	r21, 0x05	; 5
     a26:	10 f4       	brcc	.+4      	; 0xa2c <_ZN6IRrecv14decodeBoseWaveEv+0x90>
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	99 87       	std	Y+9, r25	; 0x09
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	3c 83       	std	Y+4, r19	; 0x04
     a30:	2b 83       	std	Y+3, r18	; 0x03
     a32:	96 e1       	ldi	r25, 0x16	; 22
     a34:	98 83       	st	Y, r25
     a36:	20 e1       	ldi	r18, 0x10	; 16
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	38 87       	std	Y+8, r19	; 0x08
     a3c:	2f 83       	std	Y+7, r18	; 0x07
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	cf 90       	pop	r12
     a4c:	08 95       	ret

00000a4e <_ZN6IRrecv11decodeDenonEv>:
     a4e:	cf 92       	push	r12
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	dc 01       	movw	r26, r24
     a5e:	1e 96       	adiw	r26, 0x0e	; 14
     a60:	ed 91       	ld	r30, X+
     a62:	fc 91       	ld	r31, X
     a64:	1f 97       	sbiw	r26, 0x0f	; 15
     a66:	20 85       	ldd	r18, Z+8	; 0x08
     a68:	20 32       	cpi	r18, 0x20	; 32
     a6a:	11 f0       	breq	.+4      	; 0xa70 <_ZN6IRrecv11decodeDenonEv+0x22>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	5d c0       	rjmp	.+186    	; 0xb2a <_ZN6IRrecv11decodeDenonEv+0xdc>
     a70:	ec 01       	movw	r28, r24
     a72:	cc 24       	eor	r12, r12
     a74:	c3 94       	inc	r12
     a76:	2c e0       	ldi	r18, 0x0C	; 12
     a78:	e2 2e       	mov	r14, r18
     a7a:	23 e0       	ldi	r18, 0x03	; 3
     a7c:	f2 2e       	mov	r15, r18
     a7e:	0c e1       	ldi	r16, 0x1C	; 28
     a80:	17 e0       	ldi	r17, 0x07	; 7
     a82:	24 e0       	ldi	r18, 0x04	; 4
     a84:	31 e0       	ldi	r19, 0x01	; 1
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	6f e0       	ldi	r22, 0x0F	; 15
     a8a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
     a8e:	88 23       	and	r24, r24
     a90:	69 f3       	breq	.-38     	; 0xa6c <_ZN6IRrecv11decodeDenonEv+0x1e>
     a92:	ae 85       	ldd	r26, Y+14	; 0x0e
     a94:	bf 85       	ldd	r27, Y+15	; 0x0f
     a96:	fd 01       	movw	r30, r26
     a98:	e9 5b       	subi	r30, 0xB9	; 185
     a9a:	ff 4f       	sbci	r31, 0xFF	; 255
     a9c:	20 81       	ld	r18, Z
     a9e:	31 81       	ldd	r19, Z+1	; 0x01
     aa0:	24 50       	subi	r18, 0x04	; 4
     aa2:	31 09       	sbc	r19, r1
     aa4:	25 30       	cpi	r18, 0x05	; 5
     aa6:	31 05       	cpc	r19, r1
     aa8:	08 f7       	brcc	.-62     	; 0xa6c <_ZN6IRrecv11decodeDenonEv+0x1e>
     aaa:	90 e8       	ldi	r25, 0x80	; 128
     aac:	99 87       	std	Y+9, r25	; 0x09
     aae:	0a 85       	ldd	r16, Y+10	; 0x0a
     ab0:	1b 85       	ldd	r17, Y+11	; 0x0b
     ab2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ab4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ab6:	e0 2f       	mov	r30, r16
     ab8:	e3 70       	andi	r30, 0x03	; 3
     aba:	b9 01       	movw	r22, r18
     abc:	a8 01       	movw	r20, r16
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	76 95       	lsr	r23
     ac2:	67 95       	ror	r22
     ac4:	57 95       	ror	r21
     ac6:	47 95       	ror	r20
     ac8:	9a 95       	dec	r25
     aca:	d1 f7       	brne	.-12     	; 0xac0 <_ZN6IRrecv11decodeDenonEv+0x72>
     acc:	59 83       	std	Y+1, r21	; 0x01
     ace:	1a 82       	std	Y+2, r1	; 0x02
     ad0:	7a 01       	movw	r14, r20
     ad2:	ff 24       	eor	r15, r15
     ad4:	fc 82       	std	Y+4, r15	; 0x04
     ad6:	eb 82       	std	Y+3, r14	; 0x03
     ad8:	19 96       	adiw	r26, 0x09	; 9
     ada:	0d 90       	ld	r0, X+
     adc:	bc 91       	ld	r27, X
     ade:	a0 2d       	mov	r26, r0
     ae0:	a5 36       	cpi	r26, 0x65	; 101
     ae2:	b4 40       	sbci	r27, 0x04	; 4
     ae4:	b0 f4       	brcc	.+44     	; 0xb12 <_ZN6IRrecv11decodeDenonEv+0xc4>
     ae6:	99 8d       	ldd	r25, Y+25	; 0x19
     ae8:	9f 5f       	subi	r25, 0xFF	; 255
     aea:	99 8f       	std	Y+25, r25	; 0x19
     aec:	00 ff       	sbrs	r16, 0
     aee:	0b c0       	rjmp	.+22     	; 0xb06 <_ZN6IRrecv11decodeDenonEv+0xb8>
     af0:	22 e8       	ldi	r18, 0x82	; 130
     af2:	29 87       	std	Y+9, r18	; 0x09
     af4:	2d 89       	ldd	r18, Y+21	; 0x15
     af6:	40 95       	com	r20
     af8:	24 17       	cp	r18, r20
     afa:	11 f0       	breq	.+4      	; 0xb00 <_ZN6IRrecv11decodeDenonEv+0xb2>
     afc:	36 e8       	ldi	r19, 0x86	; 134
     afe:	39 87       	std	Y+9, r19	; 0x09
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	3c 83       	std	Y+4, r19	; 0x04
     b04:	2b 83       	std	Y+3, r18	; 0x03
     b06:	92 30       	cpi	r25, 0x02	; 2
     b08:	28 f0       	brcs	.+10     	; 0xb14 <_ZN6IRrecv11decodeDenonEv+0xc6>
     b0a:	99 85       	ldd	r25, Y+9	; 0x09
     b0c:	91 60       	ori	r25, 0x01	; 1
     b0e:	99 87       	std	Y+9, r25	; 0x09
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <_ZN6IRrecv11decodeDenonEv+0xc6>
     b12:	19 8e       	std	Y+25, r1	; 0x19
     b14:	2f e0       	ldi	r18, 0x0F	; 15
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	38 87       	std	Y+8, r19	; 0x08
     b1a:	2f 83       	std	Y+7, r18	; 0x07
     b1c:	e1 50       	subi	r30, 0x01	; 1
     b1e:	e2 30       	cpi	r30, 0x02	; 2
     b20:	10 f4       	brcc	.+4      	; 0xb26 <_ZN6IRrecv11decodeDenonEv+0xd8>
     b22:	92 e1       	ldi	r25, 0x12	; 18
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <_ZN6IRrecv11decodeDenonEv+0xda>
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	98 83       	st	Y, r25
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	cf 90       	pop	r12
     b38:	08 95       	ret

00000b3a <_Z20aggregateArrayCountsPhhS_S_>:
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	ec 01       	movw	r28, r24
     b48:	f6 2f       	mov	r31, r22
     b4a:	8a 01       	movw	r16, r20
     b4c:	79 01       	movw	r14, r18
     b4e:	e0 e0       	ldi	r30, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	de 01       	movw	r26, r28
     b58:	ae 0f       	add	r26, r30
     b5a:	b1 1d       	adc	r27, r1
     b5c:	5c 91       	ld	r21, X
     b5e:	55 23       	and	r21, r21
     b60:	41 f0       	breq	.+16     	; 0xb72 <_Z20aggregateArrayCountsPhhS_S_+0x38>
     b62:	35 0f       	add	r19, r21
     b64:	5e 9f       	mul	r21, r30
     b66:	80 0d       	add	r24, r0
     b68:	91 1d       	adc	r25, r1
     b6a:	11 24       	eor	r1, r1
     b6c:	1c 92       	st	X, r1
     b6e:	fe 13       	cpse	r31, r30
     b70:	1a c0       	rjmp	.+52     	; 0xba6 <_Z20aggregateArrayCountsPhhS_S_+0x6c>
     b72:	33 23       	and	r19, r19
     b74:	c1 f0       	breq	.+48     	; 0xba6 <_Z20aggregateArrayCountsPhhS_S_+0x6c>
     b76:	23 2f       	mov	r18, r19
     b78:	26 95       	lsr	r18
     b7a:	82 0f       	add	r24, r18
     b7c:	91 1d       	adc	r25, r1
     b7e:	63 2f       	mov	r22, r19
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__udivmodhi4>
     b86:	de 01       	movw	r26, r28
     b88:	a6 0f       	add	r26, r22
     b8a:	b1 1d       	adc	r27, r1
     b8c:	3c 93       	st	X, r19
     b8e:	d8 01       	movw	r26, r16
     b90:	8c 91       	ld	r24, X
     b92:	88 23       	and	r24, r24
     b94:	21 f0       	breq	.+8      	; 0xb9e <_Z20aggregateArrayCountsPhhS_S_+0x64>
     b96:	d7 01       	movw	r26, r14
     b98:	8c 91       	ld	r24, X
     b9a:	81 11       	cpse	r24, r1
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <_Z20aggregateArrayCountsPhhS_S_+0x76>
     b9e:	6c 93       	st	X, r22
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	ef 5f       	subi	r30, 0xFF	; 255
     ba8:	fe 17       	cp	r31, r30
     baa:	a8 f6       	brcc	.-86     	; 0xb56 <_Z20aggregateArrayCountsPhhS_S_+0x1c>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <_Z20aggregateArrayCountsPhhS_S_+0x78>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	08 95       	ret

00000bc0 <_ZN6IRrecv14decodeDistanceEv>:
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	e6 97       	sbiw	r28, 0x36	; 54
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	fc 01       	movw	r30, r24
     bee:	a6 85       	ldd	r26, Z+14	; 0x0e
     bf0:	b7 85       	ldd	r27, Z+15	; 0x0f
     bf2:	18 96       	adiw	r26, 0x08	; 8
     bf4:	2c 91       	ld	r18, X
     bf6:	18 97       	sbiw	r26, 0x08	; 8
     bf8:	24 31       	cpi	r18, 0x14	; 20
     bfa:	10 f4       	brcc	.+4      	; 0xc00 <_ZN6IRrecv14decodeDistanceEv+0x40>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	ee c0       	rjmp	.+476    	; 0xddc <_ZN6IRrecv14decodeDistanceEv+0x21c>
     c00:	8e 01       	movw	r16, r28
     c02:	0f 5f       	subi	r16, 0xFF	; 255
     c04:	1f 4f       	sbci	r17, 0xFF	; 255
     c06:	22 e3       	ldi	r18, 0x32	; 50
     c08:	f8 01       	movw	r30, r16
     c0a:	11 92       	st	Z+, r1
     c0c:	2a 95       	dec	r18
     c0e:	e9 f7       	brne	.-6      	; 0xc0a <_ZN6IRrecv14decodeDistanceEv+0x4a>
     c10:	18 96       	adiw	r26, 0x08	; 8
     c12:	4c 91       	ld	r20, X
     c14:	18 97       	sbiw	r26, 0x08	; 8
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	42 50       	subi	r20, 0x02	; 2
     c1a:	51 09       	sbc	r21, r1
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	74 e0       	ldi	r23, 0x04	; 4
     c20:	27 2f       	mov	r18, r23
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	24 17       	cp	r18, r20
     c26:	35 07       	cpc	r19, r21
     c28:	b4 f4       	brge	.+44     	; 0xc56 <_ZN6IRrecv14decodeDistanceEv+0x96>
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	fd 01       	movw	r30, r26
     c30:	e2 0f       	add	r30, r18
     c32:	f3 1f       	adc	r31, r19
     c34:	21 85       	ldd	r18, Z+9	; 0x09
     c36:	32 85       	ldd	r19, Z+10	; 0x0a
     c38:	f9 01       	movw	r30, r18
     c3a:	ff 27       	eor	r31, r31
     c3c:	e2 33       	cpi	r30, 0x32	; 50
     c3e:	f1 05       	cpc	r31, r1
     c40:	40 f4       	brcc	.+16     	; 0xc52 <_ZN6IRrecv14decodeDistanceEv+0x92>
     c42:	e0 0f       	add	r30, r16
     c44:	f1 1f       	adc	r31, r17
     c46:	f0 80       	ld	r15, Z
     c48:	f3 94       	inc	r15
     c4a:	f0 82       	st	Z, r15
     c4c:	62 17       	cp	r22, r18
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <_ZN6IRrecv14decodeDistanceEv+0x92>
     c50:	62 2f       	mov	r22, r18
     c52:	7e 5f       	subi	r23, 0xFE	; 254
     c54:	e5 cf       	rjmp	.-54     	; 0xc20 <_ZN6IRrecv14decodeDistanceEv+0x60>
     c56:	5c 01       	movw	r10, r24
     c58:	1e aa       	std	Y+54, r1	; 0x36
     c5a:	1d aa       	std	Y+53, r1	; 0x35
     c5c:	9e 01       	movw	r18, r28
     c5e:	2b 5c       	subi	r18, 0xCB	; 203
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	ae 01       	movw	r20, r28
     c64:	4a 5c       	subi	r20, 0xCA	; 202
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	c8 01       	movw	r24, r16
     c6a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z20aggregateArrayCountsPhhS_S_>
     c6e:	88 23       	and	r24, r24
     c70:	29 f2       	breq	.-118    	; 0xbfc <_ZN6IRrecv14decodeDistanceEv+0x3c>
     c72:	82 e3       	ldi	r24, 0x32	; 50
     c74:	d8 01       	movw	r26, r16
     c76:	1d 92       	st	X+, r1
     c78:	8a 95       	dec	r24
     c7a:	e9 f7       	brne	.-6      	; 0xc76 <_ZN6IRrecv14decodeDistanceEv+0xb6>
     c7c:	f5 01       	movw	r30, r10
     c7e:	a6 85       	ldd	r26, Z+14	; 0x0e
     c80:	b7 85       	ldd	r27, Z+15	; 0x0f
     c82:	18 96       	adiw	r26, 0x08	; 8
     c84:	2c 91       	ld	r18, X
     c86:	18 97       	sbiw	r26, 0x08	; 8
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	22 50       	subi	r18, 0x02	; 2
     c8c:	31 09       	sbc	r19, r1
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	43 e0       	ldi	r20, 0x03	; 3
     c92:	84 2f       	mov	r24, r20
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	82 17       	cp	r24, r18
     c98:	93 07       	cpc	r25, r19
     c9a:	b4 f4       	brge	.+44     	; 0xcc8 <_ZN6IRrecv14decodeDistanceEv+0x108>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	fd 01       	movw	r30, r26
     ca2:	e8 0f       	add	r30, r24
     ca4:	f9 1f       	adc	r31, r25
     ca6:	81 85       	ldd	r24, Z+9	; 0x09
     ca8:	92 85       	ldd	r25, Z+10	; 0x0a
     caa:	fc 01       	movw	r30, r24
     cac:	ff 27       	eor	r31, r31
     cae:	e2 33       	cpi	r30, 0x32	; 50
     cb0:	f1 05       	cpc	r31, r1
     cb2:	40 f4       	brcc	.+16     	; 0xcc4 <_ZN6IRrecv14decodeDistanceEv+0x104>
     cb4:	e0 0f       	add	r30, r16
     cb6:	f1 1f       	adc	r31, r17
     cb8:	50 81       	ld	r21, Z
     cba:	5f 5f       	subi	r21, 0xFF	; 255
     cbc:	50 83       	st	Z, r21
     cbe:	68 17       	cp	r22, r24
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <_ZN6IRrecv14decodeDistanceEv+0x104>
     cc2:	68 2f       	mov	r22, r24
     cc4:	4e 5f       	subi	r20, 0xFE	; 254
     cc6:	e5 cf       	rjmp	.-54     	; 0xc92 <_ZN6IRrecv14decodeDistanceEv+0xd2>
     cc8:	1c aa       	std	Y+52, r1	; 0x34
     cca:	1b aa       	std	Y+51, r1	; 0x33
     ccc:	9e 01       	movw	r18, r28
     cce:	2d 5c       	subi	r18, 0xCD	; 205
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	ae 01       	movw	r20, r28
     cd4:	4c 5c       	subi	r20, 0xCC	; 204
     cd6:	5f 4f       	sbci	r21, 0xFF	; 255
     cd8:	c8 01       	movw	r24, r16
     cda:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z20aggregateArrayCountsPhhS_S_>
     cde:	d5 01       	movw	r26, r10
     ce0:	1e 96       	adiw	r26, 0x0e	; 14
     ce2:	ed 91       	ld	r30, X+
     ce4:	fc 91       	ld	r31, X
     ce6:	1f 97       	sbiw	r26, 0x0f	; 15
     ce8:	20 85       	ldd	r18, Z+8	; 0x08
     cea:	26 95       	lsr	r18
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	49 01       	movw	r8, r18
     cf0:	b2 e0       	ldi	r27, 0x02	; 2
     cf2:	8b 1a       	sub	r8, r27
     cf4:	91 08       	sbc	r9, r1
     cf6:	f5 01       	movw	r30, r10
     cf8:	90 86       	std	Z+8, r9	; 0x08
     cfa:	87 82       	std	Z+7, r8	; 0x07
     cfc:	23 50       	subi	r18, 0x03	; 3
     cfe:	31 09       	sbc	r19, r1
     d00:	55 e0       	ldi	r21, 0x05	; 5
     d02:	36 95       	lsr	r19
     d04:	27 95       	ror	r18
     d06:	5a 95       	dec	r21
     d08:	e1 f7       	brne	.-8      	; 0xd02 <_ZN6IRrecv14decodeDistanceEv+0x142>
     d0a:	d2 2e       	mov	r13, r18
     d0c:	7d a8       	ldd	r7, Y+53	; 0x35
     d0e:	71 10       	cpse	r7, r1
     d10:	34 c0       	rjmp	.+104    	; 0xd7a <_ZN6IRrecv14decodeDistanceEv+0x1ba>
     d12:	8b a9       	ldd	r24, Y+51	; 0x33
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <_ZN6IRrecv14decodeDistanceEv+0x15a>
     d18:	71 cf       	rjmp	.-286    	; 0xbfc <_ZN6IRrecv14decodeDistanceEv+0x3c>
     d1a:	61 2c       	mov	r6, r1
     d1c:	ee a8       	ldd	r14, Y+54	; 0x36
     d1e:	0c a9       	ldd	r16, Y+52	; 0x34
     d20:	2b a9       	ldd	r18, Y+51	; 0x33
     d22:	f2 e3       	ldi	r31, 0x32	; 50
     d24:	ef 9e       	mul	r14, r31
     d26:	70 01       	movw	r14, r0
     d28:	11 24       	eor	r1, r1
     d2a:	82 e3       	ldi	r24, 0x32	; 50
     d2c:	08 9f       	mul	r16, r24
     d2e:	80 01       	movw	r16, r0
     d30:	11 24       	eor	r1, r1
     d32:	92 e3       	ldi	r25, 0x32	; 50
     d34:	29 9f       	mul	r18, r25
     d36:	90 01       	movw	r18, r0
     d38:	11 24       	eor	r1, r1
     d3a:	47 2d       	mov	r20, r7
     d3c:	41 95       	neg	r20
     d3e:	44 0f       	add	r20, r20
     d40:	4d 5f       	subi	r20, 0xFD	; 253
     d42:	67 2d       	mov	r22, r7
     d44:	68 0d       	add	r22, r8
     d46:	61 32       	cpi	r22, 0x21	; 33
     d48:	08 f0       	brcs	.+2      	; 0xd4c <_ZN6IRrecv14decodeDistanceEv+0x18c>
     d4a:	60 e2       	ldi	r22, 0x20	; 32
     d4c:	c1 2c       	mov	r12, r1
     d4e:	c5 01       	movw	r24, r10
     d50:	0e 94 94 02 	call	0x528	; 0x528 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb>
     d54:	88 23       	and	r24, r24
     d56:	09 f4       	brne	.+2      	; 0xd5a <_ZN6IRrecv14decodeDistanceEv+0x19a>
     d58:	51 cf       	rjmp	.-350    	; 0xbfc <_ZN6IRrecv14decodeDistanceEv+0x3c>
     d5a:	63 94       	inc	r6
     d5c:	a0 ee       	ldi	r26, 0xE0	; 224
     d5e:	7a 0e       	add	r7, r26
     d60:	d6 14       	cp	r13, r6
     d62:	e0 f6       	brcc	.-72     	; 0xd1c <_ZN6IRrecv14decodeDistanceEv+0x15c>
     d64:	2c a9       	ldd	r18, Y+52	; 0x34
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	32 2f       	mov	r19, r18
     d6a:	22 27       	eor	r18, r18
     d6c:	9b a9       	ldd	r25, Y+51	; 0x33
     d6e:	29 2b       	or	r18, r25
     d70:	f5 01       	movw	r30, r10
     d72:	36 83       	std	Z+6, r19	; 0x06
     d74:	25 83       	std	Z+5, r18	; 0x05
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	30 c0       	rjmp	.+96     	; 0xdda <_ZN6IRrecv14decodeDistanceEv+0x21a>
     d7a:	71 2c       	mov	r7, r1
     d7c:	61 2c       	mov	r6, r1
     d7e:	ee a8       	ldd	r14, Y+54	; 0x36
     d80:	0d a9       	ldd	r16, Y+53	; 0x35
     d82:	2c a9       	ldd	r18, Y+52	; 0x34
     d84:	f2 e3       	ldi	r31, 0x32	; 50
     d86:	ef 9e       	mul	r14, r31
     d88:	70 01       	movw	r14, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	82 e3       	ldi	r24, 0x32	; 50
     d8e:	08 9f       	mul	r16, r24
     d90:	80 01       	movw	r16, r0
     d92:	11 24       	eor	r1, r1
     d94:	92 e3       	ldi	r25, 0x32	; 50
     d96:	29 9f       	mul	r18, r25
     d98:	90 01       	movw	r18, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	47 2d       	mov	r20, r7
     d9e:	41 95       	neg	r20
     da0:	44 0f       	add	r20, r20
     da2:	4d 5f       	subi	r20, 0xFD	; 253
     da4:	67 2d       	mov	r22, r7
     da6:	68 0d       	add	r22, r8
     da8:	61 32       	cpi	r22, 0x21	; 33
     daa:	08 f0       	brcs	.+2      	; 0xdae <_ZN6IRrecv14decodeDistanceEv+0x1ee>
     dac:	60 e2       	ldi	r22, 0x20	; 32
     dae:	c1 2c       	mov	r12, r1
     db0:	c5 01       	movw	r24, r10
     db2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
     db6:	88 23       	and	r24, r24
     db8:	09 f4       	brne	.+2      	; 0xdbc <_ZN6IRrecv14decodeDistanceEv+0x1fc>
     dba:	20 cf       	rjmp	.-448    	; 0xbfc <_ZN6IRrecv14decodeDistanceEv+0x3c>
     dbc:	63 94       	inc	r6
     dbe:	a0 ee       	ldi	r26, 0xE0	; 224
     dc0:	7a 0e       	add	r7, r26
     dc2:	d6 14       	cp	r13, r6
     dc4:	e0 f6       	brcc	.-72     	; 0xd7e <_ZN6IRrecv14decodeDistanceEv+0x1be>
     dc6:	2e a9       	ldd	r18, Y+54	; 0x36
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	32 2f       	mov	r19, r18
     dcc:	22 27       	eor	r18, r18
     dce:	9d a9       	ldd	r25, Y+53	; 0x35
     dd0:	29 2b       	or	r18, r25
     dd2:	f5 01       	movw	r30, r10
     dd4:	36 83       	std	Z+6, r19	; 0x06
     dd6:	25 83       	std	Z+5, r18	; 0x05
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	90 83       	st	Z, r25
     ddc:	e6 96       	adiw	r28, 0x36	; 54
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	bf 90       	pop	r11
     dfa:	af 90       	pop	r10
     dfc:	9f 90       	pop	r9
     dfe:	8f 90       	pop	r8
     e00:	7f 90       	pop	r7
     e02:	6f 90       	pop	r6
     e04:	08 95       	ret

00000e06 <_ZN6IRrecv9decodeJVCEv>:
     e06:	cf 92       	push	r12
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	fc 01       	movw	r30, r24
     e16:	a6 85       	ldd	r26, Z+14	; 0x0e
     e18:	b7 85       	ldd	r27, Z+15	; 0x0f
     e1a:	18 96       	adiw	r26, 0x08	; 8
     e1c:	8c 91       	ld	r24, X
     e1e:	18 97       	sbiw	r26, 0x08	; 8
     e20:	84 32       	cpi	r24, 0x24	; 36
     e22:	a1 f0       	breq	.+40     	; 0xe4c <_ZN6IRrecv9decodeJVCEv+0x46>
     e24:	82 32       	cpi	r24, 0x22	; 34
     e26:	11 f0       	breq	.+4      	; 0xe2c <_ZN6IRrecv9decodeJVCEv+0x26>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	57 c0       	rjmp	.+174    	; 0xeda <_ZN6IRrecv9decodeJVCEv+0xd4>
     e2c:	19 96       	adiw	r26, 0x09	; 9
     e2e:	8d 91       	ld	r24, X+
     e30:	9c 91       	ld	r25, X
     e32:	1a 97       	sbiw	r26, 0x0a	; 10
     e34:	8c 3e       	cpi	r24, 0xEC	; 236
     e36:	9c 45       	sbci	r25, 0x5C	; 92
     e38:	08 f0       	brcs	.+2      	; 0xe3c <_ZN6IRrecv9decodeJVCEv+0x36>
     e3a:	4e c0       	rjmp	.+156    	; 0xed8 <_ZN6IRrecv9decodeJVCEv+0xd2>
     e3c:	1b 96       	adiw	r26, 0x0b	; 11
     e3e:	8d 91       	ld	r24, X+
     e40:	9c 91       	ld	r25, X
     e42:	1c 97       	sbiw	r26, 0x0c	; 12
     e44:	08 97       	sbiw	r24, 0x08	; 8
     e46:	07 97       	sbiw	r24, 0x07	; 7
     e48:	58 f0       	brcs	.+22     	; 0xe60 <_ZN6IRrecv9decodeJVCEv+0x5a>
     e4a:	46 c0       	rjmp	.+140    	; 0xed8 <_ZN6IRrecv9decodeJVCEv+0xd2>
     e4c:	1b 96       	adiw	r26, 0x0b	; 11
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	1c 97       	sbiw	r26, 0x0c	; 12
     e54:	8d 57       	subi	r24, 0x7D	; 125
     e56:	91 09       	sbc	r25, r1
     e58:	87 35       	cpi	r24, 0x57	; 87
     e5a:	91 05       	cpc	r25, r1
     e5c:	a8 f0       	brcs	.+42     	; 0xe88 <_ZN6IRrecv9decodeJVCEv+0x82>
     e5e:	e4 cf       	rjmp	.-56     	; 0xe28 <_ZN6IRrecv9decodeJVCEv+0x22>
     e60:	a5 5b       	subi	r26, 0xB5	; 181
     e62:	bf 4f       	sbci	r27, 0xFF	; 255
     e64:	8d 91       	ld	r24, X+
     e66:	9c 91       	ld	r25, X
     e68:	08 97       	sbiw	r24, 0x08	; 8
     e6a:	07 97       	sbiw	r24, 0x07	; 7
     e6c:	a8 f5       	brcc	.+106    	; 0xed8 <_ZN6IRrecv9decodeJVCEv+0xd2>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	81 87       	std	Z+9, r24	; 0x09
     e72:	81 89       	ldd	r24, Z+17	; 0x11
     e74:	92 89       	ldd	r25, Z+18	; 0x12
     e76:	92 83       	std	Z+2, r25	; 0x02
     e78:	81 83       	std	Z+1, r24	; 0x01
     e7a:	85 89       	ldd	r24, Z+21	; 0x15
     e7c:	96 89       	ldd	r25, Z+22	; 0x16
     e7e:	94 83       	std	Z+4, r25	; 0x04
     e80:	83 83       	std	Z+3, r24	; 0x03
     e82:	85 e0       	ldi	r24, 0x05	; 5
     e84:	80 83       	st	Z, r24
     e86:	28 c0       	rjmp	.+80     	; 0xed8 <_ZN6IRrecv9decodeJVCEv+0xd2>
     e88:	1d 96       	adiw	r26, 0x0d	; 13
     e8a:	8d 91       	ld	r24, X+
     e8c:	9c 91       	ld	r25, X
     e8e:	1e 97       	sbiw	r26, 0x0e	; 14
     e90:	ce 97       	sbiw	r24, 0x3e	; 62
     e92:	8c 97       	sbiw	r24, 0x2c	; 44
     e94:	48 f6       	brcc	.-110    	; 0xe28 <_ZN6IRrecv9decodeJVCEv+0x22>
     e96:	ef 01       	movw	r28, r30
     e98:	c1 2c       	mov	r12, r1
     e9a:	8e e0       	ldi	r24, 0x0E	; 14
     e9c:	e8 2e       	mov	r14, r24
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	f8 2e       	mov	r15, r24
     ea2:	0a e2       	ldi	r16, 0x2A	; 42
     ea4:	16 e0       	ldi	r17, 0x06	; 6
     ea6:	2e e0       	ldi	r18, 0x0E	; 14
     ea8:	32 e0       	ldi	r19, 0x02	; 2
     eaa:	43 e0       	ldi	r20, 0x03	; 3
     eac:	60 e1       	ldi	r22, 0x10	; 16
     eae:	cf 01       	movw	r24, r30
     eb0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
     eb4:	88 23       	and	r24, r24
     eb6:	09 f4       	brne	.+2      	; 0xeba <_ZN6IRrecv9decodeJVCEv+0xb4>
     eb8:	b7 cf       	rjmp	.-146    	; 0xe28 <_ZN6IRrecv9decodeJVCEv+0x22>
     eba:	2a 85       	ldd	r18, Y+10	; 0x0a
     ebc:	4b 85       	ldd	r20, Y+11	; 0x0b
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	5c 83       	std	Y+4, r21	; 0x04
     ec2:	4b 83       	std	Y+3, r20	; 0x03
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3a 83       	std	Y+2, r19	; 0x02
     ec8:	29 83       	std	Y+1, r18	; 0x01
     eca:	20 e1       	ldi	r18, 0x10	; 16
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	38 87       	std	Y+8, r19	; 0x08
     ed0:	2f 83       	std	Y+7, r18	; 0x07
     ed2:	95 e0       	ldi	r25, 0x05	; 5
     ed4:	98 83       	st	Y, r25
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <_ZN6IRrecv9decodeJVCEv+0xd4>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret

00000eea <_ZN6IRrecv14decodeKaseikyoEv>:
     eea:	9f 92       	push	r9
     eec:	af 92       	push	r10
     eee:	bf 92       	push	r11
     ef0:	cf 92       	push	r12
     ef2:	df 92       	push	r13
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	dc 01       	movw	r26, r24
     f02:	1e 96       	adiw	r26, 0x0e	; 14
     f04:	ed 91       	ld	r30, X+
     f06:	fc 91       	ld	r31, X
     f08:	1f 97       	sbiw	r26, 0x0f	; 15
     f0a:	20 85       	ldd	r18, Z+8	; 0x08
     f0c:	24 36       	cpi	r18, 0x64	; 100
     f0e:	11 f0       	breq	.+4      	; 0xf14 <_ZN6IRrecv14decodeKaseikyoEv+0x2a>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	9f c0       	rjmp	.+318    	; 0x1052 <_ZN6IRrecv14decodeKaseikyoEv+0x168>
     f14:	23 85       	ldd	r18, Z+11	; 0x0b
     f16:	34 85       	ldd	r19, Z+12	; 0x0c
     f18:	23 53       	subi	r18, 0x33	; 51
     f1a:	31 09       	sbc	r19, r1
     f1c:	25 32       	cpi	r18, 0x25	; 37
     f1e:	31 05       	cpc	r19, r1
     f20:	b8 f7       	brcc	.-18     	; 0xf10 <_ZN6IRrecv14decodeKaseikyoEv+0x26>
     f22:	25 85       	ldd	r18, Z+13	; 0x0d
     f24:	36 85       	ldd	r19, Z+14	; 0x0e
     f26:	2a 51       	subi	r18, 0x1A	; 26
     f28:	31 09       	sbc	r19, r1
     f2a:	23 31       	cpi	r18, 0x13	; 19
     f2c:	31 05       	cpc	r19, r1
     f2e:	80 f7       	brcc	.-32     	; 0xf10 <_ZN6IRrecv14decodeKaseikyoEv+0x26>
     f30:	ec 01       	movw	r28, r24
     f32:	c1 2c       	mov	r12, r1
     f34:	80 eb       	ldi	r24, 0xB0	; 176
     f36:	e8 2e       	mov	r14, r24
     f38:	ff 24       	eor	r15, r15
     f3a:	f3 94       	inc	r15
     f3c:	00 e1       	ldi	r16, 0x10	; 16
     f3e:	15 e0       	ldi	r17, 0x05	; 5
     f40:	20 eb       	ldi	r18, 0xB0	; 176
     f42:	31 e0       	ldi	r19, 0x01	; 1
     f44:	43 e0       	ldi	r20, 0x03	; 3
     f46:	60 e1       	ldi	r22, 0x10	; 16
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
     f4e:	88 23       	and	r24, r24
     f50:	f9 f2       	breq	.-66     	; 0xf10 <_ZN6IRrecv14decodeKaseikyoEv+0x26>
     f52:	da 84       	ldd	r13, Y+10	; 0x0a
     f54:	ad 2c       	mov	r10, r13
     f56:	bb 84       	ldd	r11, Y+11	; 0x0b
     f58:	b2 e0       	ldi	r27, 0x02	; 2
     f5a:	ab 16       	cp	r10, r27
     f5c:	b0 e2       	ldi	r27, 0x20	; 32
     f5e:	bb 06       	cpc	r11, r27
     f60:	b9 f0       	breq	.+46     	; 0xf90 <_ZN6IRrecv14decodeKaseikyoEv+0xa6>
     f62:	2a ea       	ldi	r18, 0xAA	; 170
     f64:	a2 16       	cp	r10, r18
     f66:	2a e5       	ldi	r18, 0x5A	; 90
     f68:	b2 06       	cpc	r11, r18
     f6a:	a9 f0       	breq	.+42     	; 0xf96 <_ZN6IRrecv14decodeKaseikyoEv+0xac>
     f6c:	84 e5       	ldi	r24, 0x54	; 84
     f6e:	a8 16       	cp	r10, r24
     f70:	82 e3       	ldi	r24, 0x32	; 50
     f72:	b8 06       	cpc	r11, r24
     f74:	99 f0       	breq	.+38     	; 0xf9c <_ZN6IRrecv14decodeKaseikyoEv+0xb2>
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	a9 16       	cp	r10, r25
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	b9 06       	cpc	r11, r25
     f7e:	89 f0       	breq	.+34     	; 0xfa2 <_ZN6IRrecv14decodeKaseikyoEv+0xb8>
     f80:	a3 e2       	ldi	r26, 0x23	; 35
     f82:	aa 16       	cp	r10, r26
     f84:	ab ec       	ldi	r26, 0xCB	; 203
     f86:	ba 06       	cpc	r11, r26
     f88:	79 f0       	breq	.+30     	; 0xfa8 <_ZN6IRrecv14decodeKaseikyoEv+0xbe>
     f8a:	ea e0       	ldi	r30, 0x0A	; 10
     f8c:	9e 2e       	mov	r9, r30
     f8e:	0e c0       	rjmp	.+28     	; 0xfac <_ZN6IRrecv14decodeKaseikyoEv+0xc2>
     f90:	79 e0       	ldi	r23, 0x09	; 9
     f92:	97 2e       	mov	r9, r23
     f94:	0b c0       	rjmp	.+22     	; 0xfac <_ZN6IRrecv14decodeKaseikyoEv+0xc2>
     f96:	6d e0       	ldi	r22, 0x0D	; 13
     f98:	96 2e       	mov	r9, r22
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <_ZN6IRrecv14decodeKaseikyoEv+0xc2>
     f9c:	5c e0       	ldi	r21, 0x0C	; 12
     f9e:	95 2e       	mov	r9, r21
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <_ZN6IRrecv14decodeKaseikyoEv+0xc2>
     fa2:	4b e0       	ldi	r20, 0x0B	; 11
     fa4:	94 2e       	mov	r9, r20
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <_ZN6IRrecv14decodeKaseikyoEv+0xc2>
     fa8:	3e e0       	ldi	r19, 0x0E	; 14
     faa:	93 2e       	mov	r9, r19
     fac:	c1 2c       	mov	r12, r1
     fae:	20 eb       	ldi	r18, 0xB0	; 176
     fb0:	e2 2e       	mov	r14, r18
     fb2:	ff 24       	eor	r15, r15
     fb4:	f3 94       	inc	r15
     fb6:	00 e1       	ldi	r16, 0x10	; 16
     fb8:	15 e0       	ldi	r17, 0x05	; 5
     fba:	20 eb       	ldi	r18, 0xB0	; 176
     fbc:	31 e0       	ldi	r19, 0x01	; 1
     fbe:	43 e2       	ldi	r20, 0x23	; 35
     fc0:	60 e2       	ldi	r22, 0x20	; 32
     fc2:	ce 01       	movw	r24, r28
     fc4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <_ZN6IRrecv14decodeKaseikyoEv+0xe4>
     fcc:	42 c0       	rjmp	.+132    	; 0x1052 <_ZN6IRrecv14decodeKaseikyoEv+0x168>
     fce:	db 24       	eor	r13, r11
     fd0:	4a 85       	ldd	r20, Y+10	; 0x0a
     fd2:	5b 85       	ldd	r21, Y+11	; 0x0b
     fd4:	6c 85       	ldd	r22, Y+12	; 0x0c
     fd6:	7d 85       	ldd	r23, Y+13	; 0x0d
     fd8:	9a 01       	movw	r18, r20
     fda:	94 e0       	ldi	r25, 0x04	; 4
     fdc:	36 95       	lsr	r19
     fde:	27 95       	ror	r18
     fe0:	9a 95       	dec	r25
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <_ZN6IRrecv14decodeKaseikyoEv+0xf2>
     fe4:	3a 83       	std	Y+2, r19	; 0x02
     fe6:	29 83       	std	Y+1, r18	; 0x01
     fe8:	26 2f       	mov	r18, r22
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	3c 83       	std	Y+4, r19	; 0x04
     fee:	2b 83       	std	Y+3, r18	; 0x03
     ff0:	94 2f       	mov	r25, r20
     ff2:	96 27       	eor	r25, r22
     ff4:	95 27       	eor	r25, r21
     ff6:	2d 2d       	mov	r18, r13
     ff8:	22 95       	swap	r18
     ffa:	2f 70       	andi	r18, 0x0F	; 15
     ffc:	2d 25       	eor	r18, r13
     ffe:	2f 70       	andi	r18, 0x0F	; 15
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	e4 2f       	mov	r30, r20
    1004:	ef 70       	andi	r30, 0x0F	; 15
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	2e 17       	cp	r18, r30
    100a:	3f 07       	cpc	r19, r31
    100c:	11 f0       	breq	.+4      	; 0x1012 <_ZN6IRrecv14decodeKaseikyoEv+0x128>
    100e:	24 e0       	ldi	r18, 0x04	; 4
    1010:	29 87       	std	Y+9, r18	; 0x09
    1012:	ba e0       	ldi	r27, 0x0A	; 10
    1014:	9b 16       	cp	r9, r27
    1016:	49 f0       	breq	.+18     	; 0x102a <_ZN6IRrecv14decodeKaseikyoEv+0x140>
    1018:	29 85       	ldd	r18, Y+9	; 0x09
    101a:	20 61       	ori	r18, 0x10	; 16
    101c:	29 87       	std	Y+9, r18	; 0x09
    101e:	2d 81       	ldd	r18, Y+5	; 0x05
    1020:	3e 81       	ldd	r19, Y+6	; 0x06
    1022:	a2 2a       	or	r10, r18
    1024:	b3 2a       	or	r11, r19
    1026:	be 82       	std	Y+6, r11	; 0x06
    1028:	ad 82       	std	Y+5, r10	; 0x05
    102a:	97 17       	cp	r25, r23
    102c:	19 f0       	breq	.+6      	; 0x1034 <_ZN6IRrecv14decodeKaseikyoEv+0x14a>
    102e:	99 85       	ldd	r25, Y+9	; 0x09
    1030:	94 60       	ori	r25, 0x04	; 4
    1032:	99 87       	std	Y+9, r25	; 0x09
    1034:	ee 85       	ldd	r30, Y+14	; 0x0e
    1036:	ff 85       	ldd	r31, Y+15	; 0x0f
    1038:	21 85       	ldd	r18, Z+9	; 0x09
    103a:	32 85       	ldd	r19, Z+10	; 0x0a
    103c:	28 32       	cpi	r18, 0x28	; 40
    103e:	3a 40       	sbci	r19, 0x0A	; 10
    1040:	18 f4       	brcc	.+6      	; 0x1048 <_ZN6IRrecv14decodeKaseikyoEv+0x15e>
    1042:	99 85       	ldd	r25, Y+9	; 0x09
    1044:	91 60       	ori	r25, 0x01	; 1
    1046:	99 87       	std	Y+9, r25	; 0x09
    1048:	98 82       	st	Y, r9
    104a:	20 e3       	ldi	r18, 0x30	; 48
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	38 87       	std	Y+8, r19	; 0x08
    1050:	2f 83       	std	Y+7, r18	; 0x07
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	bf 90       	pop	r11
    1064:	af 90       	pop	r10
    1066:	9f 90       	pop	r9
    1068:	08 95       	ret

0000106a <_ZN6IRrecv24decodeLegoPowerFunctionsEv>:
    106a:	cf 92       	push	r12
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	dc 01       	movw	r26, r24
    107a:	1e 96       	adiw	r26, 0x0e	; 14
    107c:	ed 91       	ld	r30, X+
    107e:	fc 91       	ld	r31, X
    1080:	1f 97       	sbiw	r26, 0x0f	; 15
    1082:	23 85       	ldd	r18, Z+11	; 0x0b
    1084:	34 85       	ldd	r19, Z+12	; 0x0c
    1086:	22 50       	subi	r18, 0x02	; 2
    1088:	31 09       	sbc	r19, r1
    108a:	24 30       	cpi	r18, 0x04	; 4
    108c:	31 05       	cpc	r19, r1
    108e:	10 f0       	brcs	.+4      	; 0x1094 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x2a>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	59 c0       	rjmp	.+178    	; 0x1146 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0xdc>
    1094:	20 85       	ldd	r18, Z+8	; 0x08
    1096:	24 32       	cpi	r18, 0x24	; 36
    1098:	d9 f7       	brne	.-10     	; 0x1090 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x26>
    109a:	25 85       	ldd	r18, Z+13	; 0x0d
    109c:	36 85       	ldd	r19, Z+14	; 0x0e
    109e:	2f 50       	subi	r18, 0x0F	; 15
    10a0:	31 09       	sbc	r19, r1
    10a2:	2c 30       	cpi	r18, 0x0C	; 12
    10a4:	31 05       	cpc	r19, r1
    10a6:	a0 f7       	brcc	.-24     	; 0x1090 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x26>
    10a8:	ec 01       	movw	r28, r24
    10aa:	cc 24       	eor	r12, r12
    10ac:	c3 94       	inc	r12
    10ae:	47 e0       	ldi	r20, 0x07	; 7
    10b0:	e4 2e       	mov	r14, r20
    10b2:	ff 24       	eor	r15, r15
    10b4:	f3 94       	inc	r15
    10b6:	09 e2       	ldi	r16, 0x29	; 41
    10b8:	12 e0       	ldi	r17, 0x02	; 2
    10ba:	2e e9       	ldi	r18, 0x9E	; 158
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	43 e0       	ldi	r20, 0x03	; 3
    10c0:	60 e1       	ldi	r22, 0x10	; 16
    10c2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    10c6:	88 23       	and	r24, r24
    10c8:	19 f3       	breq	.-58     	; 0x1090 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x26>
    10ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    10cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    10ce:	df 01       	movw	r26, r30
    10d0:	a1 5b       	subi	r26, 0xB1	; 177
    10d2:	bf 4f       	sbci	r27, 0xFF	; 255
    10d4:	2d 91       	ld	r18, X+
    10d6:	3c 91       	ld	r19, X
    10d8:	22 50       	subi	r18, 0x02	; 2
    10da:	31 09       	sbc	r19, r1
    10dc:	24 30       	cpi	r18, 0x04	; 4
    10de:	31 05       	cpc	r19, r1
    10e0:	b8 f6       	brcc	.-82     	; 0x1090 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x26>
    10e2:	90 e8       	ldi	r25, 0x80	; 128
    10e4:	99 87       	std	Y+9, r25	; 0x09
    10e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    10ea:	49 2f       	mov	r20, r25
    10ec:	52 2f       	mov	r21, r18
    10ee:	62 2f       	mov	r22, r18
    10f0:	62 95       	swap	r22
    10f2:	6f 70       	andi	r22, 0x0F	; 15
    10f4:	2f 70       	andi	r18, 0x0F	; 15
    10f6:	34 e0       	ldi	r19, 0x04	; 4
    10f8:	56 95       	lsr	r21
    10fa:	47 95       	ror	r20
    10fc:	3a 95       	dec	r19
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0x8e>
    1100:	4f 70       	andi	r20, 0x0F	; 15
    1102:	39 2f       	mov	r19, r25
    1104:	3f 70       	andi	r19, 0x0F	; 15
    1106:	9f e0       	ldi	r25, 0x0F	; 15
    1108:	96 27       	eor	r25, r22
    110a:	92 27       	eor	r25, r18
    110c:	94 27       	eor	r25, r20
    110e:	39 17       	cp	r19, r25
    1110:	11 f0       	breq	.+4      	; 0x1116 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0xac>
    1112:	94 e8       	ldi	r25, 0x84	; 132
    1114:	99 87       	std	Y+9, r25	; 0x09
    1116:	01 84       	ldd	r0, Z+9	; 0x09
    1118:	f2 85       	ldd	r31, Z+10	; 0x0a
    111a:	e0 2d       	mov	r30, r0
    111c:	e8 3f       	cpi	r30, 0xF8	; 248
    111e:	f1 41       	sbci	r31, 0x11	; 17
    1120:	18 f4       	brcc	.+6      	; 0x1128 <_ZN6IRrecv24decodeLegoPowerFunctionsEv+0xbe>
    1122:	99 85       	ldd	r25, Y+9	; 0x09
    1124:	92 60       	ori	r25, 0x02	; 2
    1126:	99 87       	std	Y+9, r25	; 0x09
    1128:	69 83       	std	Y+1, r22	; 0x01
    112a:	1a 82       	std	Y+2, r1	; 0x02
    112c:	90 e1       	ldi	r25, 0x10	; 16
    112e:	29 9f       	mul	r18, r25
    1130:	90 01       	movw	r18, r0
    1132:	11 24       	eor	r1, r1
    1134:	24 2b       	or	r18, r20
    1136:	3c 83       	std	Y+4, r19	; 0x04
    1138:	2b 83       	std	Y+3, r18	; 0x03
    113a:	97 e1       	ldi	r25, 0x17	; 23
    113c:	98 83       	st	Y, r25
    113e:	20 e1       	ldi	r18, 0x10	; 16
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	38 87       	std	Y+8, r19	; 0x08
    1144:	2f 83       	std	Y+7, r18	; 0x07
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	cf 90       	pop	r12
    1154:	08 95       	ret

00001156 <_ZN6IRrecv8decodeLGEv>:
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
    1168:	ee 85       	ldd	r30, Y+14	; 0x0e
    116a:	ff 85       	ldd	r31, Y+15	; 0x0f
    116c:	20 85       	ldd	r18, Z+8	; 0x08
    116e:	2c 33       	cpi	r18, 0x3C	; 60
    1170:	21 f0       	breq	.+8      	; 0x117a <_ZN6IRrecv8decodeLGEv+0x24>
    1172:	24 30       	cpi	r18, 0x04	; 4
    1174:	11 f0       	breq	.+4      	; 0x117a <_ZN6IRrecv8decodeLGEv+0x24>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	8c c0       	rjmp	.+280    	; 0x1292 <_ZN6IRrecv8decodeLGEv+0x13c>
    117a:	83 85       	ldd	r24, Z+11	; 0x0b
    117c:	94 85       	ldd	r25, Z+12	; 0x0c
    117e:	ac 01       	movw	r20, r24
    1180:	46 58       	subi	r20, 0x86	; 134
    1182:	51 09       	sbc	r21, r1
    1184:	4d 35       	cpi	r20, 0x5D	; 93
    1186:	51 05       	cpc	r21, r1
    1188:	28 f4       	brcc	.+10     	; 0x1194 <_ZN6IRrecv8decodeLGEv+0x3e>
    118a:	68 e6       	ldi	r22, 0x68	; 104
    118c:	70 e1       	ldi	r23, 0x10	; 16
    118e:	86 e0       	ldi	r24, 0x06	; 6
    1190:	d8 2e       	mov	r13, r24
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <_ZN6IRrecv8decodeLGEv+0x4c>
    1194:	8d 97       	sbiw	r24, 0x2d	; 45
    1196:	80 97       	sbiw	r24, 0x20	; 32
    1198:	70 f7       	brcc	.-36     	; 0x1176 <_ZN6IRrecv8decodeLGEv+0x20>
    119a:	6c e1       	ldi	r22, 0x1C	; 28
    119c:	75 e2       	ldi	r23, 0x25	; 37
    119e:	07 e0       	ldi	r16, 0x07	; 7
    11a0:	d0 2e       	mov	r13, r16
    11a2:	85 85       	ldd	r24, Z+13	; 0x0d
    11a4:	96 85       	ldd	r25, Z+14	; 0x0e
    11a6:	24 30       	cpi	r18, 0x04	; 4
    11a8:	29 f4       	brne	.+10     	; 0x11b4 <_ZN6IRrecv8decodeLGEv+0x5e>
    11aa:	4d 97       	sbiw	r24, 0x1d	; 29
    11ac:	46 97       	sbiw	r24, 0x16	; 22
    11ae:	08 f4       	brcc	.+2      	; 0x11b2 <_ZN6IRrecv8decodeLGEv+0x5c>
    11b0:	5d c0       	rjmp	.+186    	; 0x126c <_ZN6IRrecv8decodeLGEv+0x116>
    11b2:	e1 cf       	rjmp	.-62     	; 0x1176 <_ZN6IRrecv8decodeLGEv+0x20>
    11b4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10matchSpacejj>
    11b8:	88 23       	and	r24, r24
    11ba:	e9 f2       	breq	.-70     	; 0x1176 <_ZN6IRrecv8decodeLGEv+0x20>
    11bc:	cc 24       	eor	r12, r12
    11be:	c3 94       	inc	r12
    11c0:	16 e2       	ldi	r17, 0x26	; 38
    11c2:	e1 2e       	mov	r14, r17
    11c4:	12 e0       	ldi	r17, 0x02	; 2
    11c6:	f1 2e       	mov	r15, r17
    11c8:	0c e2       	ldi	r16, 0x2C	; 44
    11ca:	16 e0       	ldi	r17, 0x06	; 6
    11cc:	24 ef       	ldi	r18, 0xF4	; 244
    11ce:	31 e0       	ldi	r19, 0x01	; 1
    11d0:	43 e0       	ldi	r20, 0x03	; 3
    11d2:	6c e1       	ldi	r22, 0x1C	; 28
    11d4:	ce 01       	movw	r24, r28
    11d6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    11da:	88 23       	and	r24, r24
    11dc:	61 f2       	breq	.-104    	; 0x1176 <_ZN6IRrecv8decodeLGEv+0x20>
    11de:	ee 85       	ldd	r30, Y+14	; 0x0e
    11e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    11e2:	e1 58       	subi	r30, 0x81	; 129
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	20 81       	ld	r18, Z
    11e8:	31 81       	ldd	r19, Z+1	; 0x01
    11ea:	27 50       	subi	r18, 0x07	; 7
    11ec:	31 09       	sbc	r19, r1
    11ee:	28 30       	cpi	r18, 0x08	; 8
    11f0:	31 05       	cpc	r19, r1
    11f2:	08 f6       	brcc	.-126    	; 0x1176 <_ZN6IRrecv8decodeLGEv+0x20>
    11f4:	90 e8       	ldi	r25, 0x80	; 128
    11f6:	99 87       	std	Y+9, r25	; 0x09
    11f8:	4a 85       	ldd	r20, Y+10	; 0x0a
    11fa:	5b 85       	ldd	r21, Y+11	; 0x0b
    11fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    11fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1200:	8a 01       	movw	r16, r20
    1202:	9b 01       	movw	r18, r22
    1204:	94 e0       	ldi	r25, 0x04	; 4
    1206:	36 95       	lsr	r19
    1208:	27 95       	ror	r18
    120a:	17 95       	ror	r17
    120c:	07 95       	ror	r16
    120e:	9a 95       	dec	r25
    1210:	d1 f7       	brne	.-12     	; 0x1206 <_ZN6IRrecv8decodeLGEv+0xb0>
    1212:	f8 01       	movw	r30, r16
    1214:	1c 83       	std	Y+4, r17	; 0x04
    1216:	0b 83       	std	Y+3, r16	; 0x03
    1218:	8a 01       	movw	r16, r20
    121a:	9b 01       	movw	r18, r22
    121c:	a4 e1       	ldi	r26, 0x14	; 20
    121e:	36 95       	lsr	r19
    1220:	27 95       	ror	r18
    1222:	17 95       	ror	r17
    1224:	07 95       	ror	r16
    1226:	aa 95       	dec	r26
    1228:	d1 f7       	brne	.-12     	; 0x121e <_ZN6IRrecv8decodeLGEv+0xc8>
    122a:	1a 83       	std	Y+2, r17	; 0x02
    122c:	09 83       	std	Y+1, r16	; 0x01
    122e:	24 e0       	ldi	r18, 0x04	; 4
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	ae 2f       	mov	r26, r30
    1236:	af 70       	andi	r26, 0x0F	; 15
    1238:	9a 0f       	add	r25, r26
    123a:	b4 e0       	ldi	r27, 0x04	; 4
    123c:	f6 95       	lsr	r31
    123e:	e7 95       	ror	r30
    1240:	ba 95       	dec	r27
    1242:	e1 f7       	brne	.-8      	; 0x123c <_ZN6IRrecv8decodeLGEv+0xe6>
    1244:	21 50       	subi	r18, 0x01	; 1
    1246:	31 09       	sbc	r19, r1
    1248:	a9 f7       	brne	.-22     	; 0x1234 <_ZN6IRrecv8decodeLGEv+0xde>
    124a:	49 27       	eor	r20, r25
    124c:	4f 70       	andi	r20, 0x0F	; 15
    124e:	55 27       	eor	r21, r21
    1250:	66 27       	eor	r22, r22
    1252:	77 27       	eor	r23, r23
    1254:	45 2b       	or	r20, r21
    1256:	46 2b       	or	r20, r22
    1258:	47 2b       	or	r20, r23
    125a:	11 f0       	breq	.+4      	; 0x1260 <_ZN6IRrecv8decodeLGEv+0x10a>
    125c:	94 e8       	ldi	r25, 0x84	; 132
    125e:	99 87       	std	Y+9, r25	; 0x09
    1260:	d8 82       	st	Y, r13
    1262:	2c e1       	ldi	r18, 0x1C	; 28
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	38 87       	std	Y+8, r19	; 0x08
    1268:	2f 83       	std	Y+7, r18	; 0x07
    126a:	13 c0       	rjmp	.+38     	; 0x1292 <_ZN6IRrecv8decodeLGEv+0x13c>
    126c:	87 85       	ldd	r24, Z+15	; 0x0f
    126e:	90 89       	ldd	r25, Z+16	; 0x10
    1270:	07 97       	sbiw	r24, 0x07	; 7
    1272:	08 97       	sbiw	r24, 0x08	; 8
    1274:	08 f0       	brcs	.+2      	; 0x1278 <_ZN6IRrecv8decodeLGEv+0x122>
    1276:	7f cf       	rjmp	.-258    	; 0x1176 <_ZN6IRrecv8decodeLGEv+0x20>
    1278:	81 e8       	ldi	r24, 0x81	; 129
    127a:	89 87       	std	Y+9, r24	; 0x09
    127c:	89 89       	ldd	r24, Y+17	; 0x11
    127e:	9a 89       	ldd	r25, Y+18	; 0x12
    1280:	9a 83       	std	Y+2, r25	; 0x02
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	8d 89       	ldd	r24, Y+21	; 0x15
    1286:	9e 89       	ldd	r25, Y+22	; 0x16
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	8b 83       	std	Y+3, r24	; 0x03
    128c:	88 89       	ldd	r24, Y+16	; 0x10
    128e:	88 83       	st	Y, r24
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	08 95       	ret

000012a4 <_ZN6IRrecv15decodeMagiQuestEv>:
    12a4:	5f 92       	push	r5
    12a6:	6f 92       	push	r6
    12a8:	7f 92       	push	r7
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	28 97       	sbiw	r28, 0x08	; 8
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	7c 01       	movw	r14, r24
    12d4:	dc 01       	movw	r26, r24
    12d6:	1e 96       	adiw	r26, 0x0e	; 14
    12d8:	ed 91       	ld	r30, X+
    12da:	fc 91       	ld	r31, X
    12dc:	1f 97       	sbiw	r26, 0x0f	; 15
    12de:	80 85       	ldd	r24, Z+8	; 0x08
    12e0:	80 37       	cpi	r24, 0x70	; 112
    12e2:	d9 f4       	brne	.+54     	; 0x131a <_ZN6IRrecv15decodeMagiQuestEv+0x76>
    12e4:	6f 01       	movw	r12, r30
    12e6:	bc ed       	ldi	r27, 0xDC	; 220
    12e8:	cb 0e       	add	r12, r27
    12ea:	d1 1c       	adc	r13, r1
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	91 2c       	mov	r9, r1
    12f4:	81 2c       	mov	r8, r1
    12f6:	71 2c       	mov	r7, r1
    12f8:	61 2c       	mov	r6, r1
    12fa:	51 2c       	mov	r5, r1
    12fc:	a3 84       	ldd	r10, Z+11	; 0x0b
    12fe:	b4 84       	ldd	r11, Z+12	; 0x0c
    1300:	05 85       	ldd	r16, Z+13	; 0x0d
    1302:	16 85       	ldd	r17, Z+14	; 0x0e
    1304:	c8 01       	movw	r24, r16
    1306:	b5 01       	movw	r22, r10
    1308:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__udivmodhi4>
    130c:	0a 0d       	add	r16, r10
    130e:	1b 1d       	adc	r17, r11
    1310:	01 51       	subi	r16, 0x11	; 17
    1312:	11 09       	sbc	r17, r1
    1314:	0e 30       	cpi	r16, 0x0E	; 14
    1316:	11 05       	cpc	r17, r1
    1318:	10 f0       	brcs	.+4      	; 0x131e <_ZN6IRrecv15decodeMagiQuestEv+0x7a>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	3a c0       	rjmp	.+116    	; 0x1392 <_ZN6IRrecv15decodeMagiQuestEv+0xee>
    131e:	62 30       	cpi	r22, 0x02	; 2
    1320:	71 05       	cpc	r23, r1
    1322:	48 f0       	brcs	.+18     	; 0x1336 <_ZN6IRrecv15decodeMagiQuestEv+0x92>
    1324:	59 2d       	mov	r21, r9
    1326:	68 2d       	mov	r22, r8
    1328:	77 2d       	mov	r23, r7
    132a:	86 2d       	mov	r24, r6
    132c:	95 2d       	mov	r25, r5
    132e:	01 e0       	ldi	r16, 0x01	; 1
    1330:	0e 94 44 14 	call	0x2888	; 0x2888 <__ashldi3>
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <_ZN6IRrecv15decodeMagiQuestEv+0xa4>
    1336:	59 2d       	mov	r21, r9
    1338:	68 2d       	mov	r22, r8
    133a:	77 2d       	mov	r23, r7
    133c:	86 2d       	mov	r24, r6
    133e:	95 2d       	mov	r25, r5
    1340:	01 e0       	ldi	r16, 0x01	; 1
    1342:	0e 94 44 14 	call	0x2888	; 0x2888 <__ashldi3>
    1346:	21 60       	ori	r18, 0x01	; 1
    1348:	95 2e       	mov	r9, r21
    134a:	86 2e       	mov	r8, r22
    134c:	77 2e       	mov	r7, r23
    134e:	68 2e       	mov	r6, r24
    1350:	59 2e       	mov	r5, r25
    1352:	34 96       	adiw	r30, 0x04	; 4
    1354:	ec 15       	cp	r30, r12
    1356:	fd 05       	cpc	r31, r13
    1358:	89 f6       	brne	.-94     	; 0x12fc <_ZN6IRrecv15decodeMagiQuestEv+0x58>
    135a:	29 83       	std	Y+1, r18	; 0x01
    135c:	3a 83       	std	Y+2, r19	; 0x02
    135e:	4b 83       	std	Y+3, r20	; 0x03
    1360:	9c 82       	std	Y+4, r9	; 0x04
    1362:	8d 82       	std	Y+5, r8	; 0x05
    1364:	7e 82       	std	Y+6, r7	; 0x06
    1366:	88 e1       	ldi	r24, 0x18	; 24
    1368:	f7 01       	movw	r30, r14
    136a:	80 83       	st	Z, r24
    136c:	87 e3       	ldi	r24, 0x37	; 55
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	90 87       	std	Z+8, r25	; 0x08
    1372:	87 83       	std	Z+7, r24	; 0x07
    1374:	80 e1       	ldi	r24, 0x10	; 16
    1376:	81 87       	std	Z+9, r24	; 0x09
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	96 83       	std	Z+6, r25	; 0x06
    137e:	85 83       	std	Z+5, r24	; 0x05
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	ad 81       	ldd	r26, Y+5	; 0x05
    1386:	be 81       	ldd	r27, Y+6	; 0x06
    1388:	82 87       	std	Z+10, r24	; 0x0a
    138a:	93 87       	std	Z+11, r25	; 0x0b
    138c:	a4 87       	std	Z+12, r26	; 0x0c
    138e:	b5 87       	std	Z+13, r27	; 0x0d
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	28 96       	adiw	r28, 0x08	; 8
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	7f 90       	pop	r7
    13b8:	6f 90       	pop	r6
    13ba:	5f 90       	pop	r5
    13bc:	08 95       	ret

000013be <_ZN6IRrecv9decodeNECEv>:
    13be:	cf 92       	push	r12
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
    13ce:	ee 85       	ldd	r30, Y+14	; 0x0e
    13d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    13d2:	20 85       	ldd	r18, Z+8	; 0x08
    13d4:	82 2f       	mov	r24, r18
    13d6:	8f 7b       	andi	r24, 0xBF	; 191
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	11 f0       	breq	.+4      	; 0x13e0 <_ZN6IRrecv9decodeNECEv+0x22>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	6f c0       	rjmp	.+222    	; 0x14be <_ZN6IRrecv9decodeNECEv+0x100>
    13e0:	83 85       	ldd	r24, Z+11	; 0x0b
    13e2:	94 85       	ldd	r25, Z+12	; 0x0c
    13e4:	86 58       	subi	r24, 0x86	; 134
    13e6:	91 09       	sbc	r25, r1
    13e8:	8c 35       	cpi	r24, 0x5C	; 92
    13ea:	91 05       	cpc	r25, r1
    13ec:	b8 f7       	brcc	.-18     	; 0x13dc <_ZN6IRrecv9decodeNECEv+0x1e>
    13ee:	85 85       	ldd	r24, Z+13	; 0x0d
    13f0:	96 85       	ldd	r25, Z+14	; 0x0e
    13f2:	24 30       	cpi	r18, 0x04	; 4
    13f4:	21 f4       	brne	.+8      	; 0x13fe <_ZN6IRrecv9decodeNECEv+0x40>
    13f6:	81 97       	sbiw	r24, 0x21	; 33
    13f8:	48 97       	sbiw	r24, 0x18	; 24
    13fa:	30 f0       	brcs	.+12     	; 0x1408 <_ZN6IRrecv9decodeNECEv+0x4a>
    13fc:	ef cf       	rjmp	.-34     	; 0x13dc <_ZN6IRrecv9decodeNECEv+0x1e>
    13fe:	82 54       	subi	r24, 0x42	; 66
    1400:	91 09       	sbc	r25, r1
    1402:	8f 97       	sbiw	r24, 0x2f	; 47
    1404:	a0 f0       	brcs	.+40     	; 0x142e <_ZN6IRrecv9decodeNECEv+0x70>
    1406:	ea cf       	rjmp	.-44     	; 0x13dc <_ZN6IRrecv9decodeNECEv+0x1e>
    1408:	87 85       	ldd	r24, Z+15	; 0x0f
    140a:	90 89       	ldd	r25, Z+16	; 0x10
    140c:	08 97       	sbiw	r24, 0x08	; 8
    140e:	08 97       	sbiw	r24, 0x08	; 8
    1410:	28 f7       	brcc	.-54     	; 0x13dc <_ZN6IRrecv9decodeNECEv+0x1e>
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 87       	std	Y+9, r24	; 0x09
    1416:	89 89       	ldd	r24, Y+17	; 0x11
    1418:	9a 89       	ldd	r25, Y+18	; 0x12
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	8d 89       	ldd	r24, Y+21	; 0x15
    1420:	9e 89       	ldd	r25, Y+22	; 0x16
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	8b 83       	std	Y+3, r24	; 0x03
    1426:	88 89       	ldd	r24, Y+16	; 0x10
    1428:	88 83       	st	Y, r24
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	48 c0       	rjmp	.+144    	; 0x14be <_ZN6IRrecv9decodeNECEv+0x100>
    142e:	c1 2c       	mov	r12, r1
    1430:	80 e3       	ldi	r24, 0x30	; 48
    1432:	e8 2e       	mov	r14, r24
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	f8 2e       	mov	r15, r24
    1438:	00 e9       	ldi	r16, 0x90	; 144
    143a:	16 e0       	ldi	r17, 0x06	; 6
    143c:	20 e3       	ldi	r18, 0x30	; 48
    143e:	32 e0       	ldi	r19, 0x02	; 2
    1440:	43 e0       	ldi	r20, 0x03	; 3
    1442:	60 e2       	ldi	r22, 0x20	; 32
    1444:	ce 01       	movw	r24, r28
    1446:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    144a:	88 23       	and	r24, r24
    144c:	39 f2       	breq	.-114    	; 0x13dc <_ZN6IRrecv9decodeNECEv+0x1e>
    144e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1450:	ff 85       	ldd	r31, Y+15	; 0x0f
    1452:	e1 57       	subi	r30, 0x71	; 113
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	20 81       	ld	r18, Z
    1458:	31 81       	ldd	r19, Z+1	; 0x01
    145a:	28 50       	subi	r18, 0x08	; 8
    145c:	31 09       	sbc	r19, r1
    145e:	28 30       	cpi	r18, 0x08	; 8
    1460:	31 05       	cpc	r19, r1
    1462:	08 f0       	brcs	.+2      	; 0x1466 <_ZN6IRrecv9decodeNECEv+0xa8>
    1464:	bb cf       	rjmp	.-138    	; 0x13dc <_ZN6IRrecv9decodeNECEv+0x1e>
    1466:	4a 85       	ldd	r20, Y+10	; 0x0a
    1468:	9b 85       	ldd	r25, Y+11	; 0x0b
    146a:	3c 85       	ldd	r19, Y+12	; 0x0c
    146c:	2d 85       	ldd	r18, Y+13	; 0x0d
    146e:	63 2f       	mov	r22, r19
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	7c 83       	std	Y+4, r23	; 0x04
    1474:	6b 83       	std	Y+3, r22	; 0x03
    1476:	64 2f       	mov	r22, r20
    1478:	79 2f       	mov	r23, r25
    147a:	6e 3e       	cpi	r22, 0xEE	; 238
    147c:	57 e8       	ldi	r21, 0x87	; 135
    147e:	75 07       	cpc	r23, r21
    1480:	31 f4       	brne	.+12     	; 0x148e <_ZN6IRrecv9decodeNECEv+0xd0>
    1482:	95 e1       	ldi	r25, 0x15	; 21
    1484:	98 83       	st	Y, r25
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3a 83       	std	Y+2, r19	; 0x02
    148a:	29 83       	std	Y+1, r18	; 0x01
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <_ZN6IRrecv9decodeNECEv+0xf8>
    148e:	90 95       	com	r25
    1490:	49 13       	cpse	r20, r25
    1492:	04 c0       	rjmp	.+8      	; 0x149c <_ZN6IRrecv9decodeNECEv+0xde>
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	5a 83       	std	Y+2, r21	; 0x02
    1498:	49 83       	std	Y+1, r20	; 0x01
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <_ZN6IRrecv9decodeNECEv+0xe2>
    149c:	7a 83       	std	Y+2, r23	; 0x02
    149e:	69 83       	std	Y+1, r22	; 0x01
    14a0:	92 2f       	mov	r25, r18
    14a2:	90 95       	com	r25
    14a4:	39 13       	cpse	r19, r25
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <_ZN6IRrecv9decodeNECEv+0xf0>
    14a8:	98 e0       	ldi	r25, 0x08	; 8
    14aa:	98 83       	st	Y, r25
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <_ZN6IRrecv9decodeNECEv+0xf8>
    14ae:	94 e1       	ldi	r25, 0x14	; 20
    14b0:	98 83       	st	Y, r25
    14b2:	3b 83       	std	Y+3, r19	; 0x03
    14b4:	2c 83       	std	Y+4, r18	; 0x04
    14b6:	20 e2       	ldi	r18, 0x20	; 32
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	38 87       	std	Y+8, r19	; 0x08
    14bc:	2f 83       	std	Y+7, r18	; 0x07
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	cf 90       	pop	r12
    14cc:	08 95       	ret

000014ce <_ZN6IRrecv9decodeRC5Ev>:
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	ec 01       	movw	r28, r24
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <sBiphaseDecodeRawbuffOffset>
    14e6:	89 e7       	ldi	r24, 0x79	; 121
    14e8:	93 e0       	ldi	r25, 0x03	; 3
    14ea:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <sBiphaseTimeUnit+0x1>
    14ee:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <sBiphaseTimeUnit>
    14f2:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <sUsedTimingIntervals>
    14f6:	ce 01       	movw	r24, r28
    14f8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	09 f0       	breq	.+2      	; 0x1502 <_ZN6IRrecv9decodeRC5Ev+0x34>
    1500:	59 c0       	rjmp	.+178    	; 0x15b4 <_ZN6IRrecv9decodeRC5Ev+0xe6>
    1502:	c1 2c       	mov	r12, r1
    1504:	d1 2c       	mov	r13, r1
    1506:	76 01       	movw	r14, r12
    1508:	10 e0       	ldi	r17, 0x00	; 0
    150a:	ee 85       	ldd	r30, Y+14	; 0x0e
    150c:	ff 85       	ldd	r31, Y+15	; 0x0f
    150e:	90 85       	ldd	r25, Z+8	; 0x08
    1510:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <sBiphaseDecodeRawbuffOffset>
    1514:	89 17       	cp	r24, r25
    1516:	e8 f4       	brcc	.+58     	; 0x1552 <_ZN6IRrecv9decodeRC5Ev+0x84>
    1518:	ce 01       	movw	r24, r28
    151a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    151e:	08 2f       	mov	r16, r24
    1520:	ce 01       	movw	r24, r28
    1522:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    1526:	01 11       	cpse	r16, r1
    1528:	0a c0       	rjmp	.+20     	; 0x153e <_ZN6IRrecv9decodeRC5Ev+0x70>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	09 f0       	breq	.+2      	; 0x1530 <_ZN6IRrecv9decodeRC5Ev+0x62>
    152e:	42 c0       	rjmp	.+132    	; 0x15b4 <_ZN6IRrecv9decodeRC5Ev+0xe6>
    1530:	cc 0c       	add	r12, r12
    1532:	dd 1c       	adc	r13, r13
    1534:	ee 1c       	adc	r14, r14
    1536:	ff 1c       	adc	r15, r15
    1538:	68 94       	set
    153a:	c0 f8       	bld	r12, 0
    153c:	08 c0       	rjmp	.+16     	; 0x154e <_ZN6IRrecv9decodeRC5Ev+0x80>
    153e:	01 30       	cpi	r16, 0x01	; 1
    1540:	c9 f5       	brne	.+114    	; 0x15b4 <_ZN6IRrecv9decodeRC5Ev+0xe6>
    1542:	81 11       	cpse	r24, r1
    1544:	37 c0       	rjmp	.+110    	; 0x15b4 <_ZN6IRrecv9decodeRC5Ev+0xe6>
    1546:	cc 0c       	add	r12, r12
    1548:	dd 1c       	adc	r13, r13
    154a:	ee 1c       	adc	r14, r14
    154c:	ff 1c       	adc	r15, r15
    154e:	1f 5f       	subi	r17, 0xFF	; 255
    1550:	dc cf       	rjmp	.-72     	; 0x150a <_ZN6IRrecv9decodeRC5Ev+0x3c>
    1552:	81 2f       	mov	r24, r17
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	98 87       	std	Y+8, r25	; 0x08
    1558:	8f 83       	std	Y+7, r24	; 0x07
    155a:	6d 2d       	mov	r22, r13
    155c:	ca 86       	std	Y+10, r12	; 0x0a
    155e:	db 86       	std	Y+11, r13	; 0x0b
    1560:	ec 86       	std	Y+12, r14	; 0x0c
    1562:	fd 86       	std	Y+13, r15	; 0x0d
    1564:	8c 2d       	mov	r24, r12
    1566:	8f 73       	andi	r24, 0x3F	; 63
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	8b 83       	std	Y+3, r24	; 0x03
    156e:	96 01       	movw	r18, r12
    1570:	a9 01       	movw	r20, r18
    1572:	76 e0       	ldi	r23, 0x06	; 6
    1574:	56 95       	lsr	r21
    1576:	47 95       	ror	r20
    1578:	7a 95       	dec	r23
    157a:	e1 f7       	brne	.-8      	; 0x1574 <_ZN6IRrecv9decodeRC5Ev+0xa6>
    157c:	4f 71       	andi	r20, 0x1F	; 31
    157e:	55 27       	eor	r21, r21
    1580:	5a 83       	std	Y+2, r21	; 0x02
    1582:	49 83       	std	Y+1, r20	; 0x01
    1584:	34 fd       	sbrc	r19, 4
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <_ZN6IRrecv9decodeRC5Ev+0xc2>
    1588:	80 5c       	subi	r24, 0xC0	; 192
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	80 e8       	ldi	r24, 0x80	; 128
    1592:	89 87       	std	Y+9, r24	; 0x09
    1594:	63 ff       	sbrs	r22, 3
    1596:	02 c0       	rjmp	.+4      	; 0x159c <_ZN6IRrecv9decodeRC5Ev+0xce>
    1598:	88 e8       	ldi	r24, 0x88	; 136
    159a:	89 87       	std	Y+9, r24	; 0x09
    159c:	81 85       	ldd	r24, Z+9	; 0x09
    159e:	92 85       	ldd	r25, Z+10	; 0x0a
    15a0:	83 3e       	cpi	r24, 0xE3	; 227
    15a2:	98 40       	sbci	r25, 0x08	; 8
    15a4:	18 f4       	brcc	.+6      	; 0x15ac <_ZN6IRrecv9decodeRC5Ev+0xde>
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	81 60       	ori	r24, 0x01	; 1
    15aa:	89 87       	std	Y+9, r24	; 0x09
    15ac:	8f e0       	ldi	r24, 0x0F	; 15
    15ae:	88 83       	st	Y, r24
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <_ZN6IRrecv9decodeRC5Ev+0xe8>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	08 95       	ret

000015c8 <_ZN6IRrecv9decodeRC6Ev>:
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	dc 01       	movw	r26, r24
    15dc:	1e 96       	adiw	r26, 0x0e	; 14
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	1f 97       	sbiw	r26, 0x0f	; 15
    15e4:	23 85       	ldd	r18, Z+11	; 0x0b
    15e6:	34 85       	ldd	r19, Z+12	; 0x0c
    15e8:	28 52       	subi	r18, 0x28	; 40
    15ea:	31 09       	sbc	r19, r1
    15ec:	2d 31       	cpi	r18, 0x1D	; 29
    15ee:	31 05       	cpc	r19, r1
    15f0:	98 f5       	brcc	.+102    	; 0x1658 <_ZN6IRrecv9decodeRC6Ev+0x90>
    15f2:	25 85       	ldd	r18, Z+13	; 0x0d
    15f4:	36 85       	ldd	r19, Z+14	; 0x0e
    15f6:	2c 50       	subi	r18, 0x0C	; 12
    15f8:	31 09       	sbc	r19, r1
    15fa:	2b 30       	cpi	r18, 0x0B	; 11
    15fc:	31 05       	cpc	r19, r1
    15fe:	60 f5       	brcc	.+88     	; 0x1658 <_ZN6IRrecv9decodeRC6Ev+0x90>
    1600:	ec 01       	movw	r28, r24
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <sBiphaseDecodeRawbuffOffset>
    1608:	8c eb       	ldi	r24, 0xBC	; 188
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <sBiphaseTimeUnit+0x1>
    1610:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <sBiphaseTimeUnit>
    1614:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <sUsedTimingIntervals>
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	d9 f4       	brne	.+54     	; 0x1658 <_ZN6IRrecv9decodeRC6Ev+0x90>
    1622:	ce 01       	movw	r24, r28
    1624:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    1628:	81 11       	cpse	r24, r1
    162a:	16 c0       	rjmp	.+44     	; 0x1658 <_ZN6IRrecv9decodeRC6Ev+0x90>
    162c:	c1 2c       	mov	r12, r1
    162e:	d1 2c       	mov	r13, r1
    1630:	76 01       	movw	r14, r12
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	ee 85       	ldd	r30, Y+14	; 0x0e
    1636:	ff 85       	ldd	r31, Y+15	; 0x0f
    1638:	90 85       	ldd	r25, Z+8	; 0x08
    163a:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <sBiphaseDecodeRawbuffOffset>
    163e:	89 17       	cp	r24, r25
    1640:	70 f5       	brcc	.+92     	; 0x169e <_ZN6IRrecv9decodeRC6Ev+0xd6>
    1642:	ce 01       	movw	r24, r28
    1644:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    1648:	b8 2e       	mov	r11, r24
    164a:	13 30       	cpi	r17, 0x03	; 3
    164c:	39 f4       	brne	.+14     	; 0x165c <_ZN6IRrecv9decodeRC6Ev+0x94>
    164e:	ce 01       	movw	r24, r28
    1650:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    1654:	b8 16       	cp	r11, r24
    1656:	11 f0       	breq	.+4      	; 0x165c <_ZN6IRrecv9decodeRC6Ev+0x94>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	59 c0       	rjmp	.+178    	; 0x170e <_ZN6IRrecv9decodeRC6Ev+0x146>
    165c:	ce 01       	movw	r24, r28
    165e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    1662:	08 2f       	mov	r16, r24
    1664:	13 30       	cpi	r17, 0x03	; 3
    1666:	29 f4       	brne	.+10     	; 0x1672 <_ZN6IRrecv9decodeRC6Ev+0xaa>
    1668:	ce 01       	movw	r24, r28
    166a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN6IRrecv15getBiphaselevelEv>
    166e:	08 13       	cpse	r16, r24
    1670:	f3 cf       	rjmp	.-26     	; 0x1658 <_ZN6IRrecv9decodeRC6Ev+0x90>
    1672:	b1 e0       	ldi	r27, 0x01	; 1
    1674:	bb 12       	cpse	r11, r27
    1676:	09 c0       	rjmp	.+18     	; 0x168a <_ZN6IRrecv9decodeRC6Ev+0xc2>
    1678:	01 11       	cpse	r16, r1
    167a:	ee cf       	rjmp	.-36     	; 0x1658 <_ZN6IRrecv9decodeRC6Ev+0x90>
    167c:	cc 0c       	add	r12, r12
    167e:	dd 1c       	adc	r13, r13
    1680:	ee 1c       	adc	r14, r14
    1682:	ff 1c       	adc	r15, r15
    1684:	68 94       	set
    1686:	c0 f8       	bld	r12, 0
    1688:	08 c0       	rjmp	.+16     	; 0x169a <_ZN6IRrecv9decodeRC6Ev+0xd2>
    168a:	b1 10       	cpse	r11, r1
    168c:	e5 cf       	rjmp	.-54     	; 0x1658 <_ZN6IRrecv9decodeRC6Ev+0x90>
    168e:	01 30       	cpi	r16, 0x01	; 1
    1690:	19 f7       	brne	.-58     	; 0x1658 <_ZN6IRrecv9decodeRC6Ev+0x90>
    1692:	cc 0c       	add	r12, r12
    1694:	dd 1c       	adc	r13, r13
    1696:	ee 1c       	adc	r14, r14
    1698:	ff 1c       	adc	r15, r15
    169a:	1f 5f       	subi	r17, 0xFF	; 255
    169c:	cb cf       	rjmp	.-106    	; 0x1634 <_ZN6IRrecv9decodeRC6Ev+0x6c>
    169e:	81 2f       	mov	r24, r17
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	98 87       	std	Y+8, r25	; 0x08
    16a4:	8f 83       	std	Y+7, r24	; 0x07
    16a6:	2c 2d       	mov	r18, r12
    16a8:	5e 2d       	mov	r21, r14
    16aa:	4f 2d       	mov	r20, r15
    16ac:	ca 86       	std	Y+10, r12	; 0x0a
    16ae:	db 86       	std	Y+11, r13	; 0x0b
    16b0:	ec 86       	std	Y+12, r14	; 0x0c
    16b2:	fd 86       	std	Y+13, r15	; 0x0d
    16b4:	14 32       	cpi	r17, 0x24	; 36
    16b6:	78 f4       	brcc	.+30     	; 0x16d6 <_ZN6IRrecv9decodeRC6Ev+0x10e>
    16b8:	80 e8       	ldi	r24, 0x80	; 128
    16ba:	89 87       	std	Y+9, r24	; 0x09
    16bc:	8c 2d       	mov	r24, r12
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	8d 2d       	mov	r24, r13
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	e0 fe       	sbrs	r14, 0
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <_ZN6IRrecv9decodeRC6Ev+0x130>
    16d0:	88 e8       	ldi	r24, 0x88	; 136
    16d2:	89 87       	std	Y+9, r24	; 0x09
    16d4:	11 c0       	rjmp	.+34     	; 0x16f8 <_ZN6IRrecv9decodeRC6Ev+0x130>
    16d6:	80 e9       	ldi	r24, 0x90	; 144
    16d8:	89 87       	std	Y+9, r24	; 0x09
    16da:	8d 2d       	mov	r24, r13
    16dc:	d7 fe       	sbrs	r13, 7
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <_ZN6IRrecv9decodeRC6Ev+0x11c>
    16e0:	98 e9       	ldi	r25, 0x98	; 152
    16e2:	99 87       	std	Y+9, r25	; 0x09
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3c 83       	std	Y+4, r19	; 0x04
    16e8:	2b 83       	std	Y+3, r18	; 0x03
    16ea:	8f 77       	andi	r24, 0x7F	; 127
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	ca 01       	movw	r24, r20
    16f4:	9d 83       	std	Y+5, r25	; 0x05
    16f6:	4e 83       	std	Y+6, r20	; 0x06
    16f8:	81 85       	ldd	r24, Z+9	; 0x09
    16fa:	92 85       	ldd	r25, Z+10	; 0x0a
    16fc:	83 37       	cpi	r24, 0x73	; 115
    16fe:	9a 40       	sbci	r25, 0x0A	; 10
    1700:	18 f4       	brcc	.+6      	; 0x1708 <_ZN6IRrecv9decodeRC6Ev+0x140>
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	81 60       	ori	r24, 0x01	; 1
    1706:	89 87       	std	Y+9, r24	; 0x09
    1708:	80 e1       	ldi	r24, 0x10	; 16
    170a:	88 83       	st	Y, r24
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	bf 90       	pop	r11
    1720:	08 95       	ret

00001722 <_ZN6IRrecv13decodeSamsungEv>:
    1722:	cf 92       	push	r12
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ec 01       	movw	r28, r24
    1732:	ee 85       	ldd	r30, Y+14	; 0x0e
    1734:	ff 85       	ldd	r31, Y+15	; 0x0f
    1736:	80 85       	ldd	r24, Z+8	; 0x08
    1738:	98 2f       	mov	r25, r24
    173a:	9f 7d       	andi	r25, 0xDF	; 223
    173c:	94 34       	cpi	r25, 0x44	; 68
    173e:	11 f0       	breq	.+4      	; 0x1744 <_ZN6IRrecv13decodeSamsungEv+0x22>
    1740:	86 30       	cpi	r24, 0x06	; 6
    1742:	d1 f4       	brne	.+52     	; 0x1778 <_ZN6IRrecv13decodeSamsungEv+0x56>
    1744:	23 85       	ldd	r18, Z+11	; 0x0b
    1746:	34 85       	ldd	r19, Z+12	; 0x0c
    1748:	22 54       	subi	r18, 0x42	; 66
    174a:	31 09       	sbc	r19, r1
    174c:	2f 32       	cpi	r18, 0x2F	; 47
    174e:	31 05       	cpc	r19, r1
    1750:	a8 f0       	brcs	.+42     	; 0x177c <_ZN6IRrecv13decodeSamsungEv+0x5a>
    1752:	12 c0       	rjmp	.+36     	; 0x1778 <_ZN6IRrecv13decodeSamsungEv+0x56>
    1754:	c1 2c       	mov	r12, r1
    1756:	99 e2       	ldi	r25, 0x29	; 41
    1758:	e9 2e       	mov	r14, r25
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	f9 2e       	mov	r15, r25
    175e:	0b e7       	ldi	r16, 0x7B	; 123
    1760:	16 e0       	ldi	r17, 0x06	; 6
    1762:	29 e2       	ldi	r18, 0x29	; 41
    1764:	32 e0       	ldi	r19, 0x02	; 2
    1766:	43 e0       	ldi	r20, 0x03	; 3
    1768:	84 36       	cpi	r24, 0x64	; 100
    176a:	e1 f5       	brne	.+120    	; 0x17e4 <_ZN6IRrecv13decodeSamsungEv+0xc2>
    176c:	60 e1       	ldi	r22, 0x10	; 16
    176e:	ce 01       	movw	r24, r28
    1770:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    1774:	81 11       	cpse	r24, r1
    1776:	16 c0       	rjmp	.+44     	; 0x17a4 <_ZN6IRrecv13decodeSamsungEv+0x82>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	51 c0       	rjmp	.+162    	; 0x181e <_ZN6IRrecv13decodeSamsungEv+0xfc>
    177c:	25 85       	ldd	r18, Z+13	; 0x0d
    177e:	36 85       	ldd	r19, Z+14	; 0x0e
    1780:	21 54       	subi	r18, 0x41	; 65
    1782:	31 09       	sbc	r19, r1
    1784:	2f 32       	cpi	r18, 0x2F	; 47
    1786:	31 05       	cpc	r19, r1
    1788:	b8 f7       	brcc	.-18     	; 0x1778 <_ZN6IRrecv13decodeSamsungEv+0x56>
    178a:	86 30       	cpi	r24, 0x06	; 6
    178c:	19 f7       	brne	.-58     	; 0x1754 <_ZN6IRrecv13decodeSamsungEv+0x32>
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	89 87       	std	Y+9, r24	; 0x09
    1792:	89 89       	ldd	r24, Y+17	; 0x11
    1794:	9a 89       	ldd	r25, Y+18	; 0x12
    1796:	9a 83       	std	Y+2, r25	; 0x02
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	8d 89       	ldd	r24, Y+21	; 0x15
    179c:	9e 89       	ldd	r25, Y+22	; 0x16
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	3a c0       	rjmp	.+116    	; 0x1818 <_ZN6IRrecv13decodeSamsungEv+0xf6>
    17a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	29 e2       	ldi	r18, 0x29	; 41
    17ae:	32 e0       	ldi	r19, 0x02	; 2
    17b0:	43 e0       	ldi	r20, 0x03	; 3
    17b2:	60 e2       	ldi	r22, 0x20	; 32
    17b4:	ce 01       	movw	r24, r28
    17b6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    17ba:	88 23       	and	r24, r24
    17bc:	e9 f2       	breq	.-70     	; 0x1778 <_ZN6IRrecv13decodeSamsungEv+0x56>
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    17c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    17c6:	20 95       	com	r18
    17c8:	32 17       	cp	r19, r18
    17ca:	29 f0       	breq	.+10     	; 0x17d6 <_ZN6IRrecv13decodeSamsungEv+0xb4>
    17cc:	90 95       	com	r25
    17ce:	98 17       	cp	r25, r24
    17d0:	11 f0       	breq	.+4      	; 0x17d6 <_ZN6IRrecv13decodeSamsungEv+0xb4>
    17d2:	94 e0       	ldi	r25, 0x04	; 4
    17d4:	99 87       	std	Y+9, r25	; 0x09
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	93 2b       	or	r25, r19
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    17de:	80 e3       	ldi	r24, 0x30	; 48
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	18 c0       	rjmp	.+48     	; 0x1814 <_ZN6IRrecv13decodeSamsungEv+0xf2>
    17e4:	60 e2       	ldi	r22, 0x20	; 32
    17e6:	ce 01       	movw	r24, r28
    17e8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    17ec:	88 23       	and	r24, r24
    17ee:	b9 f0       	breq	.+46     	; 0x181e <_ZN6IRrecv13decodeSamsungEv+0xfc>
    17f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    17f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    17f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f8:	29 83       	std	Y+1, r18	; 0x01
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	93 2f       	mov	r25, r19
    17fe:	90 95       	com	r25
    1800:	89 13       	cpse	r24, r25
    1802:	04 c0       	rjmp	.+8      	; 0x180c <_ZN6IRrecv13decodeSamsungEv+0xea>
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <_ZN6IRrecv13decodeSamsungEv+0xee>
    180c:	8b 83       	std	Y+3, r24	; 0x03
    180e:	3c 83       	std	Y+4, r19	; 0x04
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	98 87       	std	Y+8, r25	; 0x08
    1816:	8f 83       	std	Y+7, r24	; 0x07
    1818:	81 e1       	ldi	r24, 0x11	; 17
    181a:	88 83       	st	Y, r24
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	cf 90       	pop	r12
    182c:	08 95       	ret

0000182e <_ZN6IRrecv10decodeSonyEv>:
    182e:	cf 92       	push	r12
    1830:	ef 92       	push	r14
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	dc 01       	movw	r26, r24
    183e:	1e 96       	adiw	r26, 0x0e	; 14
    1840:	ed 91       	ld	r30, X+
    1842:	fc 91       	ld	r31, X
    1844:	1f 97       	sbiw	r26, 0x0f	; 15
    1846:	23 85       	ldd	r18, Z+11	; 0x0b
    1848:	34 85       	ldd	r19, Z+12	; 0x0c
    184a:	24 52       	subi	r18, 0x24	; 36
    184c:	31 09       	sbc	r19, r1
    184e:	2a 31       	cpi	r18, 0x1A	; 26
    1850:	31 05       	cpc	r19, r1
    1852:	10 f0       	brcs	.+4      	; 0x1858 <_ZN6IRrecv10decodeSonyEv+0x2a>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	4e c0       	rjmp	.+156    	; 0x18f4 <_ZN6IRrecv10decodeSonyEv+0xc6>
    1858:	20 85       	ldd	r18, Z+8	; 0x08
    185a:	2a 31       	cpi	r18, 0x1A	; 26
    185c:	21 f0       	breq	.+8      	; 0x1866 <_ZN6IRrecv10decodeSonyEv+0x38>
    185e:	2a 32       	cpi	r18, 0x2A	; 42
    1860:	11 f0       	breq	.+4      	; 0x1866 <_ZN6IRrecv10decodeSonyEv+0x38>
    1862:	20 32       	cpi	r18, 0x20	; 32
    1864:	b9 f7       	brne	.-18     	; 0x1854 <_ZN6IRrecv10decodeSonyEv+0x26>
    1866:	45 85       	ldd	r20, Z+13	; 0x0d
    1868:	56 85       	ldd	r21, Z+14	; 0x0e
    186a:	48 50       	subi	r20, 0x08	; 8
    186c:	51 09       	sbc	r21, r1
    186e:	48 30       	cpi	r20, 0x08	; 8
    1870:	51 05       	cpc	r21, r1
    1872:	80 f7       	brcc	.-32     	; 0x1854 <_ZN6IRrecv10decodeSonyEv+0x26>
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	b9 01       	movw	r22, r18
    1878:	61 50       	subi	r22, 0x01	; 1
    187a:	71 09       	sbc	r23, r1
    187c:	77 fd       	sbrc	r23, 7
    187e:	b9 01       	movw	r22, r18
    1880:	ec 01       	movw	r28, r24
    1882:	75 95       	asr	r23
    1884:	67 95       	ror	r22
    1886:	c1 2c       	mov	r12, r1
    1888:	98 e5       	ldi	r25, 0x58	; 88
    188a:	e9 2e       	mov	r14, r25
    188c:	92 e0       	ldi	r25, 0x02	; 2
    188e:	f9 2e       	mov	r15, r25
    1890:	08 e5       	ldi	r16, 0x58	; 88
    1892:	12 e0       	ldi	r17, 0x02	; 2
    1894:	20 eb       	ldi	r18, 0xB0	; 176
    1896:	34 e0       	ldi	r19, 0x04	; 4
    1898:	43 e0       	ldi	r20, 0x03	; 3
    189a:	ce 01       	movw	r24, r28
    189c:	0e 94 94 02 	call	0x528	; 0x528 <_ZN6IRrecv20decodePulseWidthDataEhhjjjb>
    18a0:	88 23       	and	r24, r24
    18a2:	c1 f2       	breq	.-80     	; 0x1854 <_ZN6IRrecv10decodeSonyEv+0x26>
    18a4:	4a 85       	ldd	r20, Y+10	; 0x0a
    18a6:	5b 85       	ldd	r21, Y+11	; 0x0b
    18a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    18aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    18ac:	24 2f       	mov	r18, r20
    18ae:	2f 77       	andi	r18, 0x7F	; 127
    18b0:	e7 e0       	ldi	r30, 0x07	; 7
    18b2:	76 95       	lsr	r23
    18b4:	67 95       	ror	r22
    18b6:	57 95       	ror	r21
    18b8:	47 95       	ror	r20
    18ba:	ea 95       	dec	r30
    18bc:	d1 f7       	brne	.-12     	; 0x18b2 <_ZN6IRrecv10decodeSonyEv+0x84>
    18be:	ee 85       	ldd	r30, Y+14	; 0x0e
    18c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    18c2:	a1 85       	ldd	r26, Z+9	; 0x09
    18c4:	b2 85       	ldd	r27, Z+10	; 0x0a
    18c6:	a4 38       	cpi	r26, 0x84	; 132
    18c8:	b3 40       	sbci	r27, 0x03	; 3
    18ca:	10 f4       	brcc	.+4      	; 0x18d0 <_ZN6IRrecv10decodeSonyEv+0xa2>
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	99 87       	std	Y+9, r25	; 0x09
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	3c 83       	std	Y+4, r19	; 0x04
    18d4:	2b 83       	std	Y+3, r18	; 0x03
    18d6:	5a 83       	std	Y+2, r21	; 0x02
    18d8:	49 83       	std	Y+1, r20	; 0x01
    18da:	40 85       	ldd	r20, Z+8	; 0x08
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	9a 01       	movw	r18, r20
    18e0:	21 50       	subi	r18, 0x01	; 1
    18e2:	31 09       	sbc	r19, r1
    18e4:	37 fd       	sbrc	r19, 7
    18e6:	9a 01       	movw	r18, r20
    18e8:	35 95       	asr	r19
    18ea:	27 95       	ror	r18
    18ec:	38 87       	std	Y+8, r19	; 0x08
    18ee:	2f 83       	std	Y+7, r18	; 0x07
    18f0:	93 e1       	ldi	r25, 0x13	; 19
    18f2:	98 83       	st	Y, r25
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	ff 90       	pop	r15
    18fe:	ef 90       	pop	r14
    1900:	cf 90       	pop	r12
    1902:	08 95       	ret

00001904 <_ZN6IRrecv13decodeWhynterEv>:
    1904:	cf 92       	push	r12
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	dc 01       	movw	r26, r24
    1914:	1e 96       	adiw	r26, 0x0e	; 14
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	1f 97       	sbiw	r26, 0x0f	; 15
    191c:	20 85       	ldd	r18, Z+8	; 0x08
    191e:	24 34       	cpi	r18, 0x44	; 68
    1920:	11 f0       	breq	.+4      	; 0x1926 <_ZN6IRrecv13decodeWhynterEv+0x22>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	33 c0       	rjmp	.+102    	; 0x198c <_ZN6IRrecv13decodeWhynterEv+0x88>
    1926:	23 85       	ldd	r18, Z+11	; 0x0b
    1928:	34 85       	ldd	r19, Z+12	; 0x0c
    192a:	2b 50       	subi	r18, 0x0B	; 11
    192c:	31 09       	sbc	r19, r1
    192e:	2a 30       	cpi	r18, 0x0A	; 10
    1930:	31 05       	cpc	r19, r1
    1932:	b8 f7       	brcc	.-18     	; 0x1922 <_ZN6IRrecv13decodeWhynterEv+0x1e>
    1934:	25 85       	ldd	r18, Z+13	; 0x0d
    1936:	36 85       	ldd	r19, Z+14	; 0x0e
    1938:	2a 52       	subi	r18, 0x2A	; 42
    193a:	31 09       	sbc	r19, r1
    193c:	2e 31       	cpi	r18, 0x1E	; 30
    193e:	31 05       	cpc	r19, r1
    1940:	80 f7       	brcc	.-32     	; 0x1922 <_ZN6IRrecv13decodeWhynterEv+0x1e>
    1942:	ec 01       	movw	r28, r24
    1944:	cc 24       	eor	r12, r12
    1946:	c3 94       	inc	r12
    1948:	8e ee       	ldi	r24, 0xEE	; 238
    194a:	e8 2e       	mov	r14, r24
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	f8 2e       	mov	r15, r24
    1950:	06 e6       	ldi	r16, 0x66	; 102
    1952:	18 e0       	ldi	r17, 0x08	; 8
    1954:	2e ee       	ldi	r18, 0xEE	; 238
    1956:	32 e0       	ldi	r19, 0x02	; 2
    1958:	43 e0       	ldi	r20, 0x03	; 3
    195a:	60 e2       	ldi	r22, 0x20	; 32
    195c:	ce 01       	movw	r24, r28
    195e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN6IRrecv23decodePulseDistanceDataEhhjjjb>
    1962:	88 23       	and	r24, r24
    1964:	f1 f2       	breq	.-68     	; 0x1922 <_ZN6IRrecv13decodeWhynterEv+0x1e>
    1966:	ee 85       	ldd	r30, Y+14	; 0x0e
    1968:	ff 85       	ldd	r31, Y+15	; 0x0f
    196a:	e1 57       	subi	r30, 0x71	; 113
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	20 81       	ld	r18, Z
    1970:	31 81       	ldd	r19, Z+1	; 0x01
    1972:	2b 50       	subi	r18, 0x0B	; 11
    1974:	31 09       	sbc	r19, r1
    1976:	2a 30       	cpi	r18, 0x0A	; 10
    1978:	31 05       	cpc	r19, r1
    197a:	98 f6       	brcc	.-90     	; 0x1922 <_ZN6IRrecv13decodeWhynterEv+0x1e>
    197c:	90 e8       	ldi	r25, 0x80	; 128
    197e:	99 87       	std	Y+9, r25	; 0x09
    1980:	20 e2       	ldi	r18, 0x20	; 32
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	38 87       	std	Y+8, r19	; 0x08
    1986:	2f 83       	std	Y+7, r18	; 0x07
    1988:	99 e1       	ldi	r25, 0x19	; 25
    198a:	98 83       	st	Y, r25
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	cf 90       	pop	r12
    199a:	08 95       	ret

0000199c <_ZN6IRrecv6decodeEv>:
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <irparams>
    19a4:	23 30       	cpi	r18, 0x03	; 3
    19a6:	09 f0       	breq	.+2      	; 0x19aa <_ZN6IRrecv6decodeEv+0xe>
    19a8:	53 c0       	rjmp	.+166    	; 0x1a50 <_ZN6IRrecv6decodeEv+0xb4>
    19aa:	ec 01       	movw	r28, r24
    19ac:	0e 94 31 01 	call	0x262	; 0x262 <_ZN6IRrecv17initDecodedIRDataEv>
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	86 ff       	sbrs	r24, 6
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <_ZN6IRrecv6decodeEv+0x1e>
    19b6:	18 82       	st	Y, r1
    19b8:	49 c0       	rjmp	.+146    	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    19ba:	ce 01       	movw	r24, r28
    19bc:	0e 94 df 09 	call	0x13be	; 0x13be <_ZN6IRrecv9decodeNECEv>
    19c0:	81 11       	cpse	r24, r1
    19c2:	44 c0       	rjmp	.+136    	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    19c4:	ce 01       	movw	r24, r28
    19c6:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN6IRrecv14decodeKaseikyoEv>
    19ca:	81 11       	cpse	r24, r1
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    19ce:	ce 01       	movw	r24, r28
    19d0:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN6IRrecv11decodeDenonEv>
    19d4:	81 11       	cpse	r24, r1
    19d6:	3a c0       	rjmp	.+116    	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    19d8:	ce 01       	movw	r24, r28
    19da:	0e 94 17 0c 	call	0x182e	; 0x182e <_ZN6IRrecv10decodeSonyEv>
    19de:	81 11       	cpse	r24, r1
    19e0:	35 c0       	rjmp	.+106    	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    19e2:	ce 01       	movw	r24, r28
    19e4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN6IRrecv9decodeRC5Ev>
    19e8:	81 11       	cpse	r24, r1
    19ea:	30 c0       	rjmp	.+96     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    19ec:	ce 01       	movw	r24, r28
    19ee:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN6IRrecv9decodeRC6Ev>
    19f2:	81 11       	cpse	r24, r1
    19f4:	2b c0       	rjmp	.+86     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    19f6:	ce 01       	movw	r24, r28
    19f8:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN6IRrecv8decodeLGEv>
    19fc:	81 11       	cpse	r24, r1
    19fe:	26 c0       	rjmp	.+76     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    1a00:	ce 01       	movw	r24, r28
    1a02:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6IRrecv9decodeJVCEv>
    1a06:	81 11       	cpse	r24, r1
    1a08:	21 c0       	rjmp	.+66     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN6IRrecv13decodeSamsungEv>
    1a10:	81 11       	cpse	r24, r1
    1a12:	1c c0       	rjmp	.+56     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    1a14:	ce 01       	movw	r24, r28
    1a16:	0e 94 82 0c 	call	0x1904	; 0x1904 <_ZN6IRrecv13decodeWhynterEv>
    1a1a:	81 11       	cpse	r24, r1
    1a1c:	17 c0       	rjmp	.+46     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0e 94 35 08 	call	0x106a	; 0x106a <_ZN6IRrecv24decodeLegoPowerFunctionsEv>
    1a24:	81 11       	cpse	r24, r1
    1a26:	12 c0       	rjmp	.+36     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    1a28:	ce 01       	movw	r24, r28
    1a2a:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN6IRrecv14decodeBoseWaveEv>
    1a2e:	81 11       	cpse	r24, r1
    1a30:	0d c0       	rjmp	.+26     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    1a32:	ce 01       	movw	r24, r28
    1a34:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN6IRrecv15decodeMagiQuestEv>
    1a38:	81 11       	cpse	r24, r1
    1a3a:	08 c0       	rjmp	.+16     	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <_ZN6IRrecv14decodeDistanceEv>
    1a42:	81 11       	cpse	r24, r1
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <_ZN6IRrecv6decodeEv+0xb0>
    1a46:	ce 01       	movw	r24, r28
    1a48:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN6IRrecv10decodeHashEv>
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <_ZN6IRrecv6decodeEv+0xb6>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	08 95       	ret

00001a58 <_Z7forwardv>:
/*								Motor Functions                         */
/************************************************************************/

void forward()
{
	digitalWrite(MotorControl->leftForward, HIGH);
    1a58:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1a5c:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	80 85       	ldd	r24, Z+8	; 0x08
    1a64:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightForward, HIGH);
    1a68:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1a6c:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	86 81       	ldd	r24, Z+6	; 0x06
    1a74:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->leftBackward, LOW);
    1a78:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1a7c:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	82 85       	ldd	r24, Z+10	; 0x0a
    1a84:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightBackward, LOW);
    1a88:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1a8c:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	84 81       	ldd	r24, Z+4	; 0x04
    1a94:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	delay(1000);
    1a98:	68 ee       	ldi	r22, 0xE8	; 232
    1a9a:	73 e0       	ldi	r23, 0x03	; 3
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <delay>

00001aa4 <_Z4backv>:
}

void back()
{
	digitalWrite(MotorControl->leftBackward, HIGH);
    1aa4:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1aa8:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	82 85       	ldd	r24, Z+10	; 0x0a
    1ab0:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightBackward, HIGH);
    1ab4:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1ab8:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	84 81       	ldd	r24, Z+4	; 0x04
    1ac0:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	
	digitalWrite(MotorControl->leftForward, LOW);
    1ac4:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1ac8:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	80 85       	ldd	r24, Z+8	; 0x08
    1ad0:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightForward, LOW);
    1ad4:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1ad8:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	86 81       	ldd	r24, Z+6	; 0x06
    1ae0:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	delay(1000);
    1ae4:	68 ee       	ldi	r22, 0xE8	; 232
    1ae6:	73 e0       	ldi	r23, 0x03	; 3
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <delay>

00001af0 <_Z4leftv>:
}

void left()
{
	digitalWrite(MotorControl->leftForward, LOW);
    1af0:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1af4:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	80 85       	ldd	r24, Z+8	; 0x08
    1afc:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightBackward, LOW);
    1b00:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b04:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	84 81       	ldd	r24, Z+4	; 0x04
    1b0c:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	
	digitalWrite(MotorControl->leftBackward, HIGH);
    1b10:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b14:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	82 85       	ldd	r24, Z+10	; 0x0a
    1b1c:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightForward, HIGH);
    1b20:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b24:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	86 81       	ldd	r24, Z+6	; 0x06
    1b2c:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <digitalWrite>

00001b30 <_Z5rightv>:
	//delay(1000);
}

void right()
{
	digitalWrite(MotorControl->leftForward, HIGH);
    1b30:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b34:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	80 85       	ldd	r24, Z+8	; 0x08
    1b3c:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightBackward, HIGH);
    1b40:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b44:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	84 81       	ldd	r24, Z+4	; 0x04
    1b4c:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	
	digitalWrite(MotorControl->leftBackward, LOW);
    1b50:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b54:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	82 85       	ldd	r24, Z+10	; 0x0a
    1b5c:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightForward, LOW);
    1b60:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b64:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	86 81       	ldd	r24, Z+6	; 0x06
    1b6c:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <digitalWrite>

00001b70 <_Z4Stopv>:
	
}

void Stop()
{
	digitalWrite(MotorControl->leftForward, LOW);
    1b70:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b74:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	80 85       	ldd	r24, Z+8	; 0x08
    1b7c:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightBackward, LOW);
    1b80:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b84:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	84 81       	ldd	r24, Z+4	; 0x04
    1b8c:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	
	digitalWrite(MotorControl->leftBackward, LOW);
    1b90:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1b94:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	82 85       	ldd	r24, Z+10	; 0x0a
    1b9c:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightForward, LOW);
    1ba0:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1ba4:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	86 81       	ldd	r24, Z+6	; 0x06
    1bac:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <digitalWrite>

00001bb0 <setup>:

/*
 *	Setup Function
 *	Called before infinite loop starts and it runs only once 
 */
void setup() {
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
	digitalWrite(RESET_PIN, HIGH);
    1bb4:	c6 e0       	ldi	r28, 0x06	; 6
    1bb6:	d1 e0       	ldi	r29, 0x01	; 1
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	88 81       	ld	r24, Y
    1bbc:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	delay(200);
    1bc0:	68 ec       	ldi	r22, 0xC8	; 200
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <delay>
	pinMode(RESET_PIN, OUTPUT);
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	88 81       	ld	r24, Y
    1bd0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <pinMode>
	
	pinMode(MotorControl->enA, OUTPUT);
    1bd4:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1bd8:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	80 81       	ld	r24, Z
    1be0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <pinMode>
	pinMode(MotorControl->enB, OUTPUT);
    1be4:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1be8:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <pinMode>
	
	digitalWrite(MotorControl->enA, HIGH);
    1bf4:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1bf8:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	80 81       	ld	r24, Z
    1c00:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->enB, HIGH);
    1c04:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c08:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	
	pinMode(MotorControl->rightBackward, OUTPUT);
    1c14:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c18:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c1c:	61 e0       	ldi	r22, 0x01	; 1
    1c1e:	84 81       	ldd	r24, Z+4	; 0x04
    1c20:	0e 94 78 13 	call	0x26f0	; 0x26f0 <pinMode>
	pinMode(MotorControl->rightForward, OUTPUT);
    1c24:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c28:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	86 81       	ldd	r24, Z+6	; 0x06
    1c30:	0e 94 78 13 	call	0x26f0	; 0x26f0 <pinMode>
	pinMode(MotorControl->leftForward, OUTPUT);
    1c34:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c38:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	80 85       	ldd	r24, Z+8	; 0x08
    1c40:	0e 94 78 13 	call	0x26f0	; 0x26f0 <pinMode>
	pinMode(MotorControl->leftBackward, OUTPUT);
    1c44:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c48:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c50:	0e 94 78 13 	call	0x26f0	; 0x26f0 <pinMode>
	
	//motor 1 controller
	//if both are high or low the motor stops
	digitalWrite(MotorControl->rightBackward, LOW);
    1c54:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c58:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	84 81       	ldd	r24, Z+4	; 0x04
    1c60:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->rightForward, LOW);
    1c64:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c68:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	86 81       	ldd	r24, Z+6	; 0x06
    1c70:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	
	//motor 2 controller
	//if both are high or low the motor stops
	digitalWrite(MotorControl->leftForward, LOW);
    1c74:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c78:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	80 85       	ldd	r24, Z+8	; 0x08
    1c80:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
	digitalWrite(MotorControl->leftBackward, LOW);
    1c84:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end>
    1c88:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x1>
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c90:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1c94:	26 e0       	ldi	r18, 0x06	; 6
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	52 ec       	ldi	r21, 0xC2	; 194
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	81 e5       	ldi	r24, 0x51	; 81
    1ca0:	94 e0       	ldi	r25, 0x04	; 4
    1ca2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN14HardwareSerial5beginEmh>
	
	/*
     * Start the receiver, enable feedback LED and take LED feedback pin from the internal boards definition
     */
	Serial.begin(115200);
    IrReceiver.begin(RECV_PIN, ENABLE_LED_FEEDBACK);
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	67 e0       	ldi	r22, 0x07	; 7
    1cac:	85 e3       	ldi	r24, 0x35	; 53
    1cae:	94 e0       	ldi	r25, 0x04	; 4
    1cb0:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN6IRrecv5beginEhbh>

    Serial.print(("Ready to receive IR signals at pin "));
    1cb4:	6f ef       	ldi	r22, 0xFF	; 255
    1cb6:	72 e0       	ldi	r23, 0x02	; 2
    1cb8:	81 e5       	ldi	r24, 0x51	; 81
    1cba:	94 e0       	ldi	r25, 0x04	; 4
    1cbc:	0e 94 02 11 	call	0x2204	; 0x2204 <_ZN5Print5printEPKc>
    Serial.println(RECV_PIN);
    1cc0:	4a e0       	ldi	r20, 0x0A	; 10
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	67 e0       	ldi	r22, 0x07	; 7
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	81 e5       	ldi	r24, 0x51	; 81
    1cca:	94 e0       	ldi	r25, 0x04	; 4

}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
     */
	Serial.begin(115200);
    IrReceiver.begin(RECV_PIN, ENABLE_LED_FEEDBACK);

    Serial.print(("Ready to receive IR signals at pin "));
    Serial.println(RECV_PIN);
    1cd0:	0c 94 c6 11 	jmp	0x238c	; 0x238c <_ZN5Print7printlnEii>

00001cd4 <loop>:

/*
 *	Loop Function
 *	Used as infinite loop
 */
void loop() {
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
	
	
	if (IrReceiver.decode()) {
    1cd8:	85 e3       	ldi	r24, 0x35	; 53
    1cda:	94 e0       	ldi	r25, 0x04	; 4
    1cdc:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN6IRrecv6decodeEv>
    1ce0:	88 23       	and	r24, r24
    1ce2:	c9 f1       	breq	.+114    	; 0x1d56 <loop+0x82>
		unsigned long keycode = IrReceiver.decodedIRData.command;
    1ce4:	c0 91 38 04 	lds	r28, 0x0438	; 0x800438 <IrReceiver+0x3>
    1ce8:	d0 91 39 04 	lds	r29, 0x0439	; 0x800439 <IrReceiver+0x4>
		Serial.println(keycode);
    1cec:	ae 01       	movw	r20, r28
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	2a e0       	ldi	r18, 0x0A	; 10
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e5       	ldi	r24, 0x51	; 81
    1cf8:	94 e0       	ldi	r25, 0x04	; 4
    1cfa:	0e 94 65 11 	call	0x22ca	; 0x22ca <_ZN5Print7printlnEmi>
		
		switch (keycode) {
    1cfe:	c5 31       	cpi	r28, 0x15	; 21
    1d00:	d1 05       	cpc	r29, r1
    1d02:	a9 f0       	breq	.+42     	; 0x1d2e <loop+0x5a>
    1d04:	40 f4       	brcc	.+16     	; 0x1d16 <loop+0x42>
    1d06:	c7 30       	cpi	r28, 0x07	; 7
    1d08:	d1 05       	cpc	r29, r1
    1d0a:	a1 f0       	breq	.+40     	; 0x1d34 <loop+0x60>
    1d0c:	29 97       	sbiw	r28, 0x09	; 9
    1d0e:	e9 f4       	brne	.+58     	; 0x1d4a <loop+0x76>
				break;
			case 64:
				right();
				break;
			case 9:
				Stop();
    1d10:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <_Z4Stopv>
				break;
    1d14:	1a c0       	rjmp	.+52     	; 0x1d4a <loop+0x76>
	
	if (IrReceiver.decode()) {
		unsigned long keycode = IrReceiver.decodedIRData.command;
		Serial.println(keycode);
		
		switch (keycode) {
    1d16:	c4 34       	cpi	r28, 0x44	; 68
    1d18:	d1 05       	cpc	r29, r1
    1d1a:	79 f0       	breq	.+30     	; 0x1d3a <loop+0x66>
    1d1c:	c7 34       	cpi	r28, 0x47	; 71
    1d1e:	d1 05       	cpc	r29, r1
    1d20:	79 f0       	breq	.+30     	; 0x1d40 <loop+0x6c>
    1d22:	c0 34       	cpi	r28, 0x40	; 64
    1d24:	d1 05       	cpc	r29, r1
    1d26:	89 f4       	brne	.+34     	; 0x1d4a <loop+0x76>
				break;
			case 68:
				left();
				break;
			case 64:
				right();
    1d28:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_Z5rightv>
				break;
    1d2c:	0e c0       	rjmp	.+28     	; 0x1d4a <loop+0x76>
		unsigned long keycode = IrReceiver.decodedIRData.command;
		Serial.println(keycode);
		
		switch (keycode) {
			case 21:
				forward();
    1d2e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z7forwardv>
				break;
    1d32:	0b c0       	rjmp	.+22     	; 0x1d4a <loop+0x76>
// 								//motor 2 controller
// 								//if both are high or low the motor stops
// 								digitalWrite(MotorControl->leftForward, LOW);
// 								digitalWrite(MotorControl->leftBackward, HIGH);
// 								delay(500);
				back();
    1d34:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z4backv>
				break;
    1d38:	08 c0       	rjmp	.+16     	; 0x1d4a <loop+0x76>
			case 68:
				left();
    1d3a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_Z4leftv>
				break;
    1d3e:	05 c0       	rjmp	.+10     	; 0x1d4a <loop+0x76>
				break;
			case 9:
				Stop();
				break;
			case 71:
				digitalWrite(RESET_PIN, LOW);
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RESET_PIN>
    1d46:	0e 94 b4 13 	call	0x2768	; 0x2768 <digitalWrite>
// 		if ((IrReceiver.decodedIRData.flags & IRDATA_FLAGS_IS_REPEAT)) {
// 			IrReceiver.resume();
// 			return;
// 		}
		
		IrReceiver.resume();
    1d4a:	85 e3       	ldi	r24, 0x35	; 53
    1d4c:	94 e0       	ldi	r25, 0x04	; 4
    }
	
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
// 		if ((IrReceiver.decodedIRData.flags & IRDATA_FLAGS_IS_REPEAT)) {
// 			IrReceiver.resume();
// 			return;
// 		}
		
		IrReceiver.resume();
    1d52:	0c 94 02 01 	jmp	0x204	; 0x204 <_ZN6IRrecv6resumeEv>
    }
	
}
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	08 95       	ret

00001d5c <_GLOBAL__sub_I__Z18timerConfigForSendh>:
    1d5c:	cf 92       	push	r12
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
 * @{
 */
/**
 * The receiver instance
 */
IRrecv IrReceiver;
    1d6c:	85 e3       	ldi	r24, 0x35	; 53
    1d6e:	94 e0       	ldi	r25, 0x04	; 4
    1d70:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN6IRrecvC1Ev>
 * Enable/disable blinking of Feedback LED (LED_BUILTIN is taken as default) on IR sending and receiving
 * @param aFeedbackLEDPin If aFeedbackLEDPin == 0, then take board specific FEEDBACK_LED_ON() and FEEDBACK_LED_OFF() functions
 * @param aEnableLEDFeedback true -> enable blinking of Feedback LED
 */
void setLEDFeedback(uint8_t aFeedbackLEDPin, bool aEnableLEDFeedback) {
    FeedbackLEDControl.FeedbackLEDPin = aFeedbackLEDPin; // default is 0
    1d74:	ef e4       	ldi	r30, 0x4F	; 79
    1d76:	f4 e0       	ldi	r31, 0x04	; 4
    1d78:	10 82       	st	Z, r1

    FeedbackLEDControl.LedFeedbackEnabled = aEnableLEDFeedback;
    1d7a:	11 82       	std	Z+1, r1	; 0x01

#pragma region Global Declarations and Initializations

const int RECV_PIN = 7;

Motor_Control* MotorControl = new Motor_Control(6, 8, 2, 3, 4, 5);
    1d7c:	8c e0       	ldi	r24, 0x0C	; 12
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 c1 10 	call	0x2182	; 0x2182 <_Znwj>
    1d84:	ec 01       	movw	r28, r24
    1d86:	85 e0       	ldi	r24, 0x05	; 5
    1d88:	c8 2e       	mov	r12, r24
    1d8a:	d1 2c       	mov	r13, r1
    1d8c:	94 e0       	ldi	r25, 0x04	; 4
    1d8e:	e9 2e       	mov	r14, r25
    1d90:	f1 2c       	mov	r15, r1
    1d92:	03 e0       	ldi	r16, 0x03	; 3
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	22 e0       	ldi	r18, 0x02	; 2
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	48 e0       	ldi	r20, 0x08	; 8
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	66 e0       	ldi	r22, 0x06	; 6
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	ce 01       	movw	r24, r28
    1da4:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN13Motor_ControlC1Etttttt>
    1da8:	d0 93 45 03 	sts	0x0345, r29	; 0x800345 <__data_end+0x1>
    1dac:	c0 93 44 03 	sts	0x0344, r28	; 0x800344 <__data_end>
// 		}
		
		IrReceiver.resume();
    }
	
}
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	df 90       	pop	r13
    1dbe:	cf 90       	pop	r12
    1dc0:	08 95       	ret

00001dc2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1dc2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1dc4:	91 8d       	ldd	r25, Z+25	; 0x19
    1dc6:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dc8:	89 2f       	mov	r24, r25
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	80 5c       	subi	r24, 0xC0	; 192
    1dce:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd0:	82 1b       	sub	r24, r18
    1dd2:	91 09       	sbc	r25, r1
}
    1dd4:	8f 73       	andi	r24, 0x3F	; 63
    1dd6:	99 27       	eor	r25, r25
    1dd8:	08 95       	ret

00001dda <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1dda:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1ddc:	91 8d       	ldd	r25, Z+25	; 0x19
    1dde:	82 8d       	ldd	r24, Z+26	; 0x1a
    1de0:	98 17       	cp	r25, r24
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1de4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1de6:	e8 0f       	add	r30, r24
    1de8:	f1 1d       	adc	r31, r1
    1dea:	85 8d       	ldd	r24, Z+29	; 0x1d
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1df4:	08 95       	ret

00001df6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1df6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1df8:	91 8d       	ldd	r25, Z+25	; 0x19
    1dfa:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dfc:	98 17       	cp	r25, r24
    1dfe:	61 f0       	breq	.+24     	; 0x1e18 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1e00:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e02:	df 01       	movw	r26, r30
    1e04:	a8 0f       	add	r26, r24
    1e06:	b1 1d       	adc	r27, r1
    1e08:	5d 96       	adiw	r26, 0x1d	; 29
    1e0a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1e0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e0e:	9f 5f       	subi	r25, 0xFF	; 255
    1e10:	9f 73       	andi	r25, 0x3F	; 63
    1e12:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1e1c:	08 95       	ret

00001e1e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1e1e:	fc 01       	movw	r30, r24
    1e20:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1e22:	44 8d       	ldd	r20, Z+28	; 0x1c
    1e24:	25 2f       	mov	r18, r21
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	84 2f       	mov	r24, r20
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1e2c:	82 1b       	sub	r24, r18
    1e2e:	93 0b       	sbc	r25, r19
    1e30:	54 17       	cp	r21, r20
    1e32:	10 f0       	brcs	.+4      	; 0x1e38 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1e34:	cf 96       	adiw	r24, 0x3f	; 63
    1e36:	08 95       	ret
  return tail - head - 1;
    1e38:	01 97       	sbiw	r24, 0x01	; 1
}
    1e3a:	08 95       	ret

00001e3c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1e3c:	8a e7       	ldi	r24, 0x7A	; 122
    1e3e:	90 e1       	ldi	r25, 0x10	; 16
    1e40:	89 2b       	or	r24, r25
    1e42:	49 f0       	breq	.+18     	; 0x1e56 <_Z14serialEventRunv+0x1a>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	89 2b       	or	r24, r25
    1e4a:	29 f0       	breq	.+10     	; 0x1e56 <_Z14serialEventRunv+0x1a>
    1e4c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z17Serial0_availablev>
    1e50:	81 11       	cpse	r24, r1
    1e52:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1e56:	08 95       	ret

00001e58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1e58:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1e5a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e5c:	df 01       	movw	r26, r30
    1e5e:	a8 0f       	add	r26, r24
    1e60:	b1 1d       	adc	r27, r1
    1e62:	a3 5a       	subi	r26, 0xA3	; 163
    1e64:	bf 4f       	sbci	r27, 0xFF	; 255
    1e66:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1e68:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	8f 73       	andi	r24, 0x3F	; 63
    1e70:	99 27       	eor	r25, r25
    1e72:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1e74:	a6 89       	ldd	r26, Z+22	; 0x16
    1e76:	b7 89       	ldd	r27, Z+23	; 0x17
    1e78:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1e7a:	a0 89       	ldd	r26, Z+16	; 0x10
    1e7c:	b1 89       	ldd	r27, Z+17	; 0x11
    1e7e:	8c 91       	ld	r24, X
    1e80:	83 70       	andi	r24, 0x03	; 3
    1e82:	80 64       	ori	r24, 0x40	; 64
    1e84:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1e86:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e88:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e8a:	98 13       	cpse	r25, r24
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1e8e:	02 88       	ldd	r0, Z+18	; 0x12
    1e90:	f3 89       	ldd	r31, Z+19	; 0x13
    1e92:	e0 2d       	mov	r30, r0
    1e94:	80 81       	ld	r24, Z
    1e96:	8f 7d       	andi	r24, 0xDF	; 223
    1e98:	80 83       	st	Z, r24
    1e9a:	08 95       	ret

00001e9c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	ec 01       	movw	r28, r24
  _written = true;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1eae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1eb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eb2:	98 13       	cpse	r25, r24
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <_ZN14HardwareSerial5writeEh+0x24>
    1eb6:	e8 89       	ldd	r30, Y+16	; 0x10
    1eb8:	f9 89       	ldd	r31, Y+17	; 0x11
    1eba:	80 81       	ld	r24, Z
    1ebc:	85 fd       	sbrc	r24, 5
    1ebe:	26 c0       	rjmp	.+76     	; 0x1f0c <_ZN14HardwareSerial5writeEh+0x70>
    1ec0:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1ec2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1ec4:	10 e0       	ldi	r17, 0x00	; 0
    1ec6:	0f 5f       	subi	r16, 0xFF	; 255
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	0f 73       	andi	r16, 0x3F	; 63
    1ecc:	11 27       	eor	r17, r17
    1ece:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1ed0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ed2:	e8 12       	cpse	r14, r24
    1ed4:	0c c0       	rjmp	.+24     	; 0x1eee <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	07 fc       	sbrc	r0, 7
    1eda:	fa cf       	rjmp	.-12     	; 0x1ed0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1edc:	e8 89       	ldd	r30, Y+16	; 0x10
    1ede:	f9 89       	ldd	r31, Y+17	; 0x11
    1ee0:	80 81       	ld	r24, Z
    1ee2:	85 ff       	sbrs	r24, 5
    1ee4:	f5 cf       	rjmp	.-22     	; 0x1ed0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1eec:	f1 cf       	rjmp	.-30     	; 0x1ed0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e8 0f       	add	r30, r24
    1ef4:	f1 1d       	adc	r31, r1
    1ef6:	e3 5a       	subi	r30, 0xA3	; 163
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1efc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1efe:	f8 94       	cli
    _tx_buffer_head = i;
    1f00:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1f02:	ea 89       	ldd	r30, Y+18	; 0x12
    1f04:	fb 89       	ldd	r31, Y+19	; 0x13
    1f06:	80 81       	ld	r24, Z
    1f08:	80 62       	ori	r24, 0x20	; 32
    1f0a:	0a c0       	rjmp	.+20     	; 0x1f20 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1f0c:	9f b7       	in	r25, 0x3f	; 63
    1f0e:	f8 94       	cli
      *_udr = c;
    1f10:	ee 89       	ldd	r30, Y+22	; 0x16
    1f12:	ff 89       	ldd	r31, Y+23	; 0x17
    1f14:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1f16:	e8 89       	ldd	r30, Y+16	; 0x10
    1f18:	f9 89       	ldd	r31, Y+17	; 0x11
    1f1a:	80 81       	ld	r24, Z
    1f1c:	83 70       	andi	r24, 0x03	; 3
    1f1e:	80 64       	ori	r24, 0x40	; 64
    1f20:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1f22:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	08 95       	ret

00001f36 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1f3c:	88 8d       	ldd	r24, Y+24	; 0x18
    1f3e:	88 23       	and	r24, r24
    1f40:	c9 f0       	breq	.+50     	; 0x1f74 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1f42:	ea 89       	ldd	r30, Y+18	; 0x12
    1f44:	fb 89       	ldd	r31, Y+19	; 0x13
    1f46:	80 81       	ld	r24, Z
    1f48:	85 fd       	sbrc	r24, 5
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <_ZN14HardwareSerial5flushEv+0x20>
    1f4c:	a8 89       	ldd	r26, Y+16	; 0x10
    1f4e:	b9 89       	ldd	r27, Y+17	; 0x11
    1f50:	8c 91       	ld	r24, X
    1f52:	86 fd       	sbrc	r24, 6
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	07 fc       	sbrc	r0, 7
    1f5a:	f5 cf       	rjmp	.-22     	; 0x1f46 <_ZN14HardwareSerial5flushEv+0x10>
    1f5c:	80 81       	ld	r24, Z
    1f5e:	85 ff       	sbrs	r24, 5
    1f60:	f2 cf       	rjmp	.-28     	; 0x1f46 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1f62:	a8 89       	ldd	r26, Y+16	; 0x10
    1f64:	b9 89       	ldd	r27, Y+17	; 0x11
    1f66:	8c 91       	ld	r24, X
    1f68:	85 ff       	sbrs	r24, 5
    1f6a:	ed cf       	rjmp	.-38     	; 0x1f46 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1f72:	e7 cf       	rjmp	.-50     	; 0x1f42 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	ec 01       	movw	r28, r24
    1f8a:	6a 01       	movw	r12, r20
    1f8c:	7b 01       	movw	r14, r22
    1f8e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1f90:	e8 89       	ldd	r30, Y+16	; 0x10
    1f92:	f9 89       	ldd	r31, Y+17	; 0x11
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1f98:	41 15       	cp	r20, r1
    1f9a:	51 4e       	sbci	r21, 0xE1	; 225
    1f9c:	61 05       	cpc	r22, r1
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	b1 f0       	breq	.+44     	; 0x1fce <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	79 e0       	ldi	r23, 0x09	; 9
    1fa6:	8d e3       	ldi	r24, 0x3D	; 61
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a7 01       	movw	r20, r14
    1fac:	96 01       	movw	r18, r12
    1fae:	0e 94 08 14 	call	0x2810	; 0x2810 <__udivmodsi4>
    1fb2:	da 01       	movw	r26, r20
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	a1 09       	sbc	r26, r1
    1fba:	b1 09       	sbc	r27, r1
    1fbc:	b6 95       	lsr	r27
    1fbe:	a7 95       	ror	r26
    1fc0:	97 95       	ror	r25
    1fc2:	87 95       	ror	r24
    1fc4:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1fc6:	21 15       	cp	r18, r1
    1fc8:	80 e1       	ldi	r24, 0x10	; 16
    1fca:	38 07       	cpc	r19, r24
    1fcc:	a8 f0       	brcs	.+42     	; 0x1ff8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1fce:	e8 89       	ldd	r30, Y+16	; 0x10
    1fd0:	f9 89       	ldd	r31, Y+17	; 0x11
    1fd2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1fd4:	60 e8       	ldi	r22, 0x80	; 128
    1fd6:	74 e8       	ldi	r23, 0x84	; 132
    1fd8:	8e e1       	ldi	r24, 0x1E	; 30
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a7 01       	movw	r20, r14
    1fde:	96 01       	movw	r18, r12
    1fe0:	0e 94 08 14 	call	0x2810	; 0x2810 <__udivmodsi4>
    1fe4:	da 01       	movw	r26, r20
    1fe6:	c9 01       	movw	r24, r18
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	a1 09       	sbc	r26, r1
    1fec:	b1 09       	sbc	r27, r1
    1fee:	b6 95       	lsr	r27
    1ff0:	a7 95       	ror	r26
    1ff2:	97 95       	ror	r25
    1ff4:	87 95       	ror	r24
    1ff6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1ff8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ffa:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ffc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1ffe:	ee 85       	ldd	r30, Y+14	; 0x0e
    2000:	ff 85       	ldd	r31, Y+15	; 0x0f
    2002:	20 83       	st	Z, r18

  _written = false;
    2004:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2006:	ec 89       	ldd	r30, Y+20	; 0x14
    2008:	fd 89       	ldd	r31, Y+21	; 0x15
    200a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    200c:	ea 89       	ldd	r30, Y+18	; 0x12
    200e:	fb 89       	ldd	r31, Y+19	; 0x13
    2010:	80 81       	ld	r24, Z
    2012:	80 61       	ori	r24, 0x10	; 16
    2014:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2016:	ea 89       	ldd	r30, Y+18	; 0x12
    2018:	fb 89       	ldd	r31, Y+19	; 0x13
    201a:	80 81       	ld	r24, Z
    201c:	88 60       	ori	r24, 0x08	; 8
    201e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2020:	ea 89       	ldd	r30, Y+18	; 0x12
    2022:	fb 89       	ldd	r31, Y+19	; 0x13
    2024:	80 81       	ld	r24, Z
    2026:	80 68       	ori	r24, 0x80	; 128
    2028:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    202a:	ea 89       	ldd	r30, Y+18	; 0x12
    202c:	fb 89       	ldd	r31, Y+19	; 0x13
    202e:	80 81       	ld	r24, Z
    2030:	8f 7d       	andi	r24, 0xDF	; 223
    2032:	80 83       	st	Z, r24
}
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	ff 90       	pop	r15
    203c:	ef 90       	pop	r14
    203e:	df 90       	pop	r13
    2040:	cf 90       	pop	r12
    2042:	08 95       	ret

00002044 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	2f 93       	push	r18
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	ef 93       	push	r30
    2056:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2058:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <Serial+0x10>
    205c:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <Serial+0x11>
    2060:	80 81       	ld	r24, Z
    2062:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <Serial+0x16>
    2066:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <Serial+0x17>
    206a:	82 fd       	sbrc	r24, 2
    206c:	12 c0       	rjmp	.+36     	; 0x2092 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    206e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2070:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <Serial+0x19>
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2078:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <Serial+0x1a>
    207c:	82 17       	cp	r24, r18
    207e:	51 f0       	breq	.+20     	; 0x2094 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2080:	e0 91 6a 04 	lds	r30, 0x046A	; 0x80046a <Serial+0x19>
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	ef 5a       	subi	r30, 0xAF	; 175
    2088:	fb 4f       	sbci	r31, 0xFB	; 251
    208a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    208c:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <Serial+0x19>
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2092:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	9f 91       	pop	r25
    209a:	8f 91       	pop	r24
    209c:	2f 91       	pop	r18
    209e:	0f 90       	pop	r0
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	0f 90       	pop	r0
    20a4:	1f 90       	pop	r1
    20a6:	18 95       	reti

000020a8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    20a8:	1f 92       	push	r1
    20aa:	0f 92       	push	r0
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	0f 92       	push	r0
    20b0:	11 24       	eor	r1, r1
    20b2:	2f 93       	push	r18
    20b4:	3f 93       	push	r19
    20b6:	4f 93       	push	r20
    20b8:	5f 93       	push	r21
    20ba:	6f 93       	push	r22
    20bc:	7f 93       	push	r23
    20be:	8f 93       	push	r24
    20c0:	9f 93       	push	r25
    20c2:	af 93       	push	r26
    20c4:	bf 93       	push	r27
    20c6:	ef 93       	push	r30
    20c8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    20ca:	81 e5       	ldi	r24, 0x51	; 81
    20cc:	94 e0       	ldi	r25, 0x04	; 4
    20ce:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    20d2:	ff 91       	pop	r31
    20d4:	ef 91       	pop	r30
    20d6:	bf 91       	pop	r27
    20d8:	af 91       	pop	r26
    20da:	9f 91       	pop	r25
    20dc:	8f 91       	pop	r24
    20de:	7f 91       	pop	r23
    20e0:	6f 91       	pop	r22
    20e2:	5f 91       	pop	r21
    20e4:	4f 91       	pop	r20
    20e6:	3f 91       	pop	r19
    20e8:	2f 91       	pop	r18
    20ea:	0f 90       	pop	r0
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	0f 90       	pop	r0
    20f0:	1f 90       	pop	r1
    20f2:	18 95       	reti

000020f4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    20f4:	81 e5       	ldi	r24, 0x51	; 81
    20f6:	94 e0       	ldi	r25, 0x04	; 4
    20f8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN14HardwareSerial9availableEv>
    20fc:	21 e0       	ldi	r18, 0x01	; 1
    20fe:	89 2b       	or	r24, r25
    2100:	09 f4       	brne	.+2      	; 0x2104 <_Z17Serial0_availablev+0x10>
    2102:	20 e0       	ldi	r18, 0x00	; 0
}
    2104:	82 2f       	mov	r24, r18
    2106:	08 95       	ret

00002108 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2108:	e1 e5       	ldi	r30, 0x51	; 81
    210a:	f4 e0       	ldi	r31, 0x04	; 4
    210c:	13 82       	std	Z+3, r1	; 0x03
    210e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2110:	88 ee       	ldi	r24, 0xE8	; 232
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	a0 e0       	ldi	r26, 0x00	; 0
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	84 83       	std	Z+4, r24	; 0x04
    211a:	95 83       	std	Z+5, r25	; 0x05
    211c:	a6 83       	std	Z+6, r26	; 0x06
    211e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2120:	87 e2       	ldi	r24, 0x27	; 39
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	85 ec       	ldi	r24, 0xC5	; 197
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	95 87       	std	Z+13, r25	; 0x0d
    212e:	84 87       	std	Z+12, r24	; 0x0c
    2130:	84 ec       	ldi	r24, 0xC4	; 196
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	97 87       	std	Z+15, r25	; 0x0f
    2136:	86 87       	std	Z+14, r24	; 0x0e
    2138:	80 ec       	ldi	r24, 0xC0	; 192
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	91 8b       	std	Z+17, r25	; 0x11
    213e:	80 8b       	std	Z+16, r24	; 0x10
    2140:	81 ec       	ldi	r24, 0xC1	; 193
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	93 8b       	std	Z+19, r25	; 0x13
    2146:	82 8b       	std	Z+18, r24	; 0x12
    2148:	82 ec       	ldi	r24, 0xC2	; 194
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	95 8b       	std	Z+21, r25	; 0x15
    214e:	84 8b       	std	Z+20, r24	; 0x14
    2150:	86 ec       	ldi	r24, 0xC6	; 198
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	97 8b       	std	Z+23, r25	; 0x17
    2156:	86 8b       	std	Z+22, r24	; 0x16
    2158:	11 8e       	std	Z+25, r1	; 0x19
    215a:	12 8e       	std	Z+26, r1	; 0x1a
    215c:	13 8e       	std	Z+27, r1	; 0x1b
    215e:	14 8e       	std	Z+28, r1	; 0x1c
    2160:	08 95       	ret

00002162 <initVariant>:
    2162:	08 95       	ret

00002164 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2164:	0e 94 14 13 	call	0x2628	; 0x2628 <init>

	initVariant();
    2168:	0e 94 b1 10 	call	0x2162	; 0x2162 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    216c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2170:	ce e1       	ldi	r28, 0x1E	; 30
    2172:	df e0       	ldi	r29, 0x0F	; 15
#endif
	
	setup();
    
	for (;;) {
		loop();
    2174:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <loop>
		if (serialEventRun) serialEventRun();
    2178:	20 97       	sbiw	r28, 0x00	; 0
    217a:	e1 f3       	breq	.-8      	; 0x2174 <main+0x10>
    217c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_Z14serialEventRunv>
    2180:	f9 cf       	rjmp	.-14     	; 0x2174 <main+0x10>

00002182 <_Znwj>:
    2182:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <malloc>

00002186 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2186:	cf 92       	push	r12
    2188:	df 92       	push	r13
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	6c 01       	movw	r12, r24
    2198:	7a 01       	movw	r14, r20
    219a:	8b 01       	movw	r16, r22
    219c:	c0 e0       	ldi	r28, 0x00	; 0
    219e:	d0 e0       	ldi	r29, 0x00	; 0
    21a0:	ce 15       	cp	r28, r14
    21a2:	df 05       	cpc	r29, r15
    21a4:	81 f0       	breq	.+32     	; 0x21c6 <_ZN5Print5writeEPKhj+0x40>
    21a6:	d8 01       	movw	r26, r16
    21a8:	6d 91       	ld	r22, X+
    21aa:	8d 01       	movw	r16, r26
    21ac:	d6 01       	movw	r26, r12
    21ae:	ed 91       	ld	r30, X+
    21b0:	fc 91       	ld	r31, X
    21b2:	01 90       	ld	r0, Z+
    21b4:	f0 81       	ld	r31, Z
    21b6:	e0 2d       	mov	r30, r0
    21b8:	c6 01       	movw	r24, r12
    21ba:	09 95       	icall
    21bc:	89 2b       	or	r24, r25
    21be:	11 f0       	breq	.+4      	; 0x21c4 <_ZN5Print5writeEPKhj+0x3e>
    21c0:	21 96       	adiw	r28, 0x01	; 1
    21c2:	ee cf       	rjmp	.-36     	; 0x21a0 <_ZN5Print5writeEPKhj+0x1a>
    21c4:	7e 01       	movw	r14, r28
    21c6:	c7 01       	movw	r24, r14
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	df 90       	pop	r13
    21d6:	cf 90       	pop	r12
    21d8:	08 95       	ret

000021da <_ZN5Print5writeEPKc>:
    21da:	61 15       	cp	r22, r1
    21dc:	71 05       	cpc	r23, r1
    21de:	79 f0       	breq	.+30     	; 0x21fe <_ZN5Print5writeEPKc+0x24>
    21e0:	fb 01       	movw	r30, r22
    21e2:	01 90       	ld	r0, Z+
    21e4:	00 20       	and	r0, r0
    21e6:	e9 f7       	brne	.-6      	; 0x21e2 <_ZN5Print5writeEPKc+0x8>
    21e8:	31 97       	sbiw	r30, 0x01	; 1
    21ea:	af 01       	movw	r20, r30
    21ec:	46 1b       	sub	r20, r22
    21ee:	57 0b       	sbc	r21, r23
    21f0:	dc 01       	movw	r26, r24
    21f2:	ed 91       	ld	r30, X+
    21f4:	fc 91       	ld	r31, X
    21f6:	02 80       	ldd	r0, Z+2	; 0x02
    21f8:	f3 81       	ldd	r31, Z+3	; 0x03
    21fa:	e0 2d       	mov	r30, r0
    21fc:	09 94       	ijmp
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	08 95       	ret

00002204 <_ZN5Print5printEPKc>:
    2204:	0c 94 ed 10 	jmp	0x21da	; 0x21da <_ZN5Print5writeEPKc>

00002208 <_ZN5Print5printEc>:
    2208:	dc 01       	movw	r26, r24
    220a:	ed 91       	ld	r30, X+
    220c:	fc 91       	ld	r31, X
    220e:	01 90       	ld	r0, Z+
    2210:	f0 81       	ld	r31, Z
    2212:	e0 2d       	mov	r30, r0
    2214:	09 94       	ijmp

00002216 <_ZN5Print7printlnEv>:
    2216:	65 e3       	ldi	r22, 0x35	; 53
    2218:	73 e0       	ldi	r23, 0x03	; 3
    221a:	0c 94 ed 10 	jmp	0x21da	; 0x21da <_ZN5Print5writeEPKc>

0000221e <_ZN5Print11printNumberEmh>:
    221e:	8f 92       	push	r8
    2220:	9f 92       	push	r9
    2222:	af 92       	push	r10
    2224:	bf 92       	push	r11
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	a1 97       	sbiw	r28, 0x21	; 33
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	7c 01       	movw	r14, r24
    2244:	fa 01       	movw	r30, r20
    2246:	cb 01       	movw	r24, r22
    2248:	19 a2       	std	Y+33, r1	; 0x21
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	08 f4       	brcc	.+2      	; 0x2250 <_ZN5Print11printNumberEmh+0x32>
    224e:	2a e0       	ldi	r18, 0x0A	; 10
    2250:	8e 01       	movw	r16, r28
    2252:	0f 5d       	subi	r16, 0xDF	; 223
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	82 2e       	mov	r8, r18
    2258:	91 2c       	mov	r9, r1
    225a:	a1 2c       	mov	r10, r1
    225c:	b1 2c       	mov	r11, r1
    225e:	bf 01       	movw	r22, r30
    2260:	a5 01       	movw	r20, r10
    2262:	94 01       	movw	r18, r8
    2264:	0e 94 08 14 	call	0x2810	; 0x2810 <__udivmodsi4>
    2268:	f9 01       	movw	r30, r18
    226a:	ca 01       	movw	r24, r20
    226c:	01 50       	subi	r16, 0x01	; 1
    226e:	11 09       	sbc	r17, r1
    2270:	6a 30       	cpi	r22, 0x0A	; 10
    2272:	10 f4       	brcc	.+4      	; 0x2278 <_ZN5Print11printNumberEmh+0x5a>
    2274:	60 5d       	subi	r22, 0xD0	; 208
    2276:	01 c0       	rjmp	.+2      	; 0x227a <_ZN5Print11printNumberEmh+0x5c>
    2278:	69 5c       	subi	r22, 0xC9	; 201
    227a:	d8 01       	movw	r26, r16
    227c:	6c 93       	st	X, r22
    227e:	23 2b       	or	r18, r19
    2280:	24 2b       	or	r18, r20
    2282:	25 2b       	or	r18, r21
    2284:	61 f7       	brne	.-40     	; 0x225e <_ZN5Print11printNumberEmh+0x40>
    2286:	b8 01       	movw	r22, r16
    2288:	c7 01       	movw	r24, r14
    228a:	0e 94 ed 10 	call	0x21da	; 0x21da <_ZN5Print5writeEPKc>
    228e:	a1 96       	adiw	r28, 0x21	; 33
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	ef 90       	pop	r14
    22a6:	bf 90       	pop	r11
    22a8:	af 90       	pop	r10
    22aa:	9f 90       	pop	r9
    22ac:	8f 90       	pop	r8
    22ae:	08 95       	ret

000022b0 <_ZN5Print5printEmi>:
    22b0:	21 15       	cp	r18, r1
    22b2:	31 05       	cpc	r19, r1
    22b4:	41 f4       	brne	.+16     	; 0x22c6 <_ZN5Print5printEmi+0x16>
    22b6:	dc 01       	movw	r26, r24
    22b8:	ed 91       	ld	r30, X+
    22ba:	fc 91       	ld	r31, X
    22bc:	01 90       	ld	r0, Z+
    22be:	f0 81       	ld	r31, Z
    22c0:	e0 2d       	mov	r30, r0
    22c2:	64 2f       	mov	r22, r20
    22c4:	09 94       	ijmp
    22c6:	0c 94 0f 11 	jmp	0x221e	; 0x221e <_ZN5Print11printNumberEmh>

000022ca <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    22d4:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_ZN5Print5printEmi>
    22d8:	8c 01       	movw	r16, r24
  n += println();
    22da:	ce 01       	movw	r24, r28
    22dc:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN5Print7printlnEv>
  return n;
}
    22e0:	80 0f       	add	r24, r16
    22e2:	91 1f       	adc	r25, r17
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	08 95       	ret

000022ee <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    22ee:	cf 92       	push	r12
    22f0:	df 92       	push	r13
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
  if (base == 0) {
    22fe:	21 15       	cp	r18, r1
    2300:	31 05       	cpc	r19, r1
    2302:	81 f4       	brne	.+32     	; 0x2324 <_ZN5Print5printEli+0x36>
    return write(n);
    2304:	dc 01       	movw	r26, r24
    2306:	ed 91       	ld	r30, X+
    2308:	fc 91       	ld	r31, X
    230a:	01 90       	ld	r0, Z+
    230c:	f0 81       	ld	r31, Z
    230e:	e0 2d       	mov	r30, r0
    2310:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	ff 90       	pop	r15
    231c:	ef 90       	pop	r14
    231e:	df 90       	pop	r13
    2320:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2322:	09 94       	ijmp
  } else if (base == 10) {
    2324:	2a 30       	cpi	r18, 0x0A	; 10
    2326:	31 05       	cpc	r19, r1
    2328:	01 f5       	brne	.+64     	; 0x236a <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    232a:	77 ff       	sbrs	r23, 7
    232c:	1d c0       	rjmp	.+58     	; 0x2368 <_ZN5Print5printEli+0x7a>
    232e:	6a 01       	movw	r12, r20
    2330:	7b 01       	movw	r14, r22
    2332:	ec 01       	movw	r28, r24
      int t = print('-');
    2334:	6d e2       	ldi	r22, 0x2D	; 45
    2336:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN5Print5printEc>
    233a:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    233c:	44 27       	eor	r20, r20
    233e:	55 27       	eor	r21, r21
    2340:	ba 01       	movw	r22, r20
    2342:	4c 19       	sub	r20, r12
    2344:	5d 09       	sbc	r21, r13
    2346:	6e 09       	sbc	r22, r14
    2348:	7f 09       	sbc	r23, r15
    234a:	2a e0       	ldi	r18, 0x0A	; 10
    234c:	ce 01       	movw	r24, r28
    234e:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN5Print11printNumberEmh>
    2352:	80 0f       	add	r24, r16
    2354:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	cf 90       	pop	r12
    2366:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2368:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	ff 90       	pop	r15
    2374:	ef 90       	pop	r14
    2376:	df 90       	pop	r13
    2378:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    237a:	0c 94 0f 11 	jmp	0x221e	; 0x221e <_ZN5Print11printNumberEmh>

0000237e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    237e:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2380:	ab 01       	movw	r20, r22
    2382:	77 0f       	add	r23, r23
    2384:	66 0b       	sbc	r22, r22
    2386:	77 0b       	sbc	r23, r23
    2388:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <_ZN5Print5printEli>

0000238c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2396:	0e 94 bf 11 	call	0x237e	; 0x237e <_ZN5Print5printEii>
    239a:	8c 01       	movw	r16, r24
  n += println();
    239c:	ce 01       	movw	r24, r28
    239e:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN5Print7printlnEv>
  return n;
}
    23a2:	80 0f       	add	r24, r16
    23a4:	91 1f       	adc	r25, r17
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	08 95       	ret

000023b0 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	39 f0       	breq	.+14     	; 0x23c2 <_Z12disableTimerh+0x12>
    23b4:	18 f0       	brcs	.+6      	; 0x23bc <_Z12disableTimerh+0xc>
    23b6:	82 30       	cpi	r24, 0x02	; 2
    23b8:	51 f0       	breq	.+20     	; 0x23ce <_Z12disableTimerh+0x1e>
    23ba:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    23bc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    23c0:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    23c2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    23c6:	8d 7f       	andi	r24, 0xFD	; 253
    23c8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
      break;
    23cc:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    23ce:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    23d2:	8d 7f       	andi	r24, 0xFD	; 253
    23d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    23de:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    23e2:	88 7f       	andi	r24, 0xF8	; 248
    23e4:	84 60       	ori	r24, 0x04	; 4
    23e6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    23ea:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    23ee:	08 95       	ret

000023f0 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    23f0:	cf 93       	push	r28
    23f2:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    23f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL9tone_pins>
    23f8:	c8 13       	cpse	r28, r24
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    23fc:	e8 e6       	ldi	r30, 0x68	; 104
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    2402:	9f ef       	ldi	r25, 0xFF	; 255
    2404:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_ZL9tone_pins>
      break;
    2408:	01 c0       	rjmp	.+2      	; 0x240c <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    240a:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    240c:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	8c 2f       	mov	r24, r28
}
    2414:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    2416:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <digitalWrite>

0000241a <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    241a:	1f 92       	push	r1
    241c:	0f 92       	push	r0
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	0f 92       	push	r0
    2422:	11 24       	eor	r1, r1
    2424:	2f 93       	push	r18
    2426:	3f 93       	push	r19
    2428:	4f 93       	push	r20
    242a:	5f 93       	push	r21
    242c:	6f 93       	push	r22
    242e:	7f 93       	push	r23
    2430:	8f 93       	push	r24
    2432:	9f 93       	push	r25
    2434:	af 93       	push	r26
    2436:	bf 93       	push	r27
    2438:	ef 93       	push	r30
    243a:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    243c:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <timer2_toggle_count>
    2440:	90 91 f2 04 	lds	r25, 0x04F2	; 0x8004f2 <timer2_toggle_count+0x1>
    2444:	a0 91 f3 04 	lds	r26, 0x04F3	; 0x8004f3 <timer2_toggle_count+0x2>
    2448:	b0 91 f4 04 	lds	r27, 0x04F4	; 0x8004f4 <timer2_toggle_count+0x3>
    244c:	89 2b       	or	r24, r25
    244e:	8a 2b       	or	r24, r26
    2450:	8b 2b       	or	r24, r27
    2452:	51 f1       	breq	.+84     	; 0x24a8 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    2454:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <timer2_pin_mask>
    2458:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <timer2_pin_port>
    245c:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <timer2_pin_port+0x1>
    2460:	80 81       	ld	r24, Z
    2462:	89 27       	eor	r24, r25
    2464:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    2466:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <timer2_toggle_count>
    246a:	90 91 f2 04 	lds	r25, 0x04F2	; 0x8004f2 <timer2_toggle_count+0x1>
    246e:	a0 91 f3 04 	lds	r26, 0x04F3	; 0x8004f3 <timer2_toggle_count+0x2>
    2472:	b0 91 f4 04 	lds	r27, 0x04F4	; 0x8004f4 <timer2_toggle_count+0x3>
    2476:	18 16       	cp	r1, r24
    2478:	19 06       	cpc	r1, r25
    247a:	1a 06       	cpc	r1, r26
    247c:	1b 06       	cpc	r1, r27
    247e:	c4 f4       	brge	.+48     	; 0x24b0 <__vector_7+0x96>
      timer2_toggle_count--;
    2480:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <timer2_toggle_count>
    2484:	90 91 f2 04 	lds	r25, 0x04F2	; 0x8004f2 <timer2_toggle_count+0x1>
    2488:	a0 91 f3 04 	lds	r26, 0x04F3	; 0x8004f3 <timer2_toggle_count+0x2>
    248c:	b0 91 f4 04 	lds	r27, 0x04F4	; 0x8004f4 <timer2_toggle_count+0x3>
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	a1 09       	sbc	r26, r1
    2494:	b1 09       	sbc	r27, r1
    2496:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <timer2_toggle_count>
    249a:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <timer2_toggle_count+0x1>
    249e:	a0 93 f3 04 	sts	0x04F3, r26	; 0x8004f3 <timer2_toggle_count+0x2>
    24a2:	b0 93 f4 04 	sts	0x04F4, r27	; 0x8004f4 <timer2_toggle_count+0x3>
    24a6:	04 c0       	rjmp	.+8      	; 0x24b0 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    24a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL9tone_pins>
    24ac:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    24b0:	ff 91       	pop	r31
    24b2:	ef 91       	pop	r30
    24b4:	bf 91       	pop	r27
    24b6:	af 91       	pop	r26
    24b8:	9f 91       	pop	r25
    24ba:	8f 91       	pop	r24
    24bc:	7f 91       	pop	r23
    24be:	6f 91       	pop	r22
    24c0:	5f 91       	pop	r21
    24c2:	4f 91       	pop	r20
    24c4:	3f 91       	pop	r19
    24c6:	2f 91       	pop	r18
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	0f 90       	pop	r0
    24ce:	1f 90       	pop	r1
    24d0:	18 95       	reti

000024d2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    24d2:	1f 92       	push	r1
    24d4:	0f 92       	push	r0
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	0f 92       	push	r0
    24da:	11 24       	eor	r1, r1
    24dc:	2f 93       	push	r18
    24de:	3f 93       	push	r19
    24e0:	8f 93       	push	r24
    24e2:	9f 93       	push	r25
    24e4:	af 93       	push	r26
    24e6:	bf 93       	push	r27
    24e8:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <timer0_millis>
    24ec:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <timer0_millis+0x1>
    24f0:	a0 91 f8 04 	lds	r26, 0x04F8	; 0x8004f8 <timer0_millis+0x2>
    24f4:	b0 91 f9 04 	lds	r27, 0x04F9	; 0x8004f9 <timer0_millis+0x3>
    24f8:	30 91 f5 04 	lds	r19, 0x04F5	; 0x8004f5 <timer0_fract>
    24fc:	23 e0       	ldi	r18, 0x03	; 3
    24fe:	23 0f       	add	r18, r19
    2500:	2d 37       	cpi	r18, 0x7D	; 125
    2502:	20 f4       	brcc	.+8      	; 0x250c <__vector_16+0x3a>
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	a1 1d       	adc	r26, r1
    2508:	b1 1d       	adc	r27, r1
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <__vector_16+0x44>
    250c:	26 e8       	ldi	r18, 0x86	; 134
    250e:	23 0f       	add	r18, r19
    2510:	02 96       	adiw	r24, 0x02	; 2
    2512:	a1 1d       	adc	r26, r1
    2514:	b1 1d       	adc	r27, r1
    2516:	20 93 f5 04 	sts	0x04F5, r18	; 0x8004f5 <timer0_fract>
    251a:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <timer0_millis>
    251e:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <timer0_millis+0x1>
    2522:	a0 93 f8 04 	sts	0x04F8, r26	; 0x8004f8 <timer0_millis+0x2>
    2526:	b0 93 f9 04 	sts	0x04F9, r27	; 0x8004f9 <timer0_millis+0x3>
    252a:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <timer0_overflow_count>
    252e:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <timer0_overflow_count+0x1>
    2532:	a0 91 fc 04 	lds	r26, 0x04FC	; 0x8004fc <timer0_overflow_count+0x2>
    2536:	b0 91 fd 04 	lds	r27, 0x04FD	; 0x8004fd <timer0_overflow_count+0x3>
    253a:	01 96       	adiw	r24, 0x01	; 1
    253c:	a1 1d       	adc	r26, r1
    253e:	b1 1d       	adc	r27, r1
    2540:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <timer0_overflow_count>
    2544:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <timer0_overflow_count+0x1>
    2548:	a0 93 fc 04 	sts	0x04FC, r26	; 0x8004fc <timer0_overflow_count+0x2>
    254c:	b0 93 fd 04 	sts	0x04FD, r27	; 0x8004fd <timer0_overflow_count+0x3>
    2550:	bf 91       	pop	r27
    2552:	af 91       	pop	r26
    2554:	9f 91       	pop	r25
    2556:	8f 91       	pop	r24
    2558:	3f 91       	pop	r19
    255a:	2f 91       	pop	r18
    255c:	0f 90       	pop	r0
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	0f 90       	pop	r0
    2562:	1f 90       	pop	r1
    2564:	18 95       	reti

00002566 <micros>:
    2566:	3f b7       	in	r19, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <timer0_overflow_count>
    256e:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <timer0_overflow_count+0x1>
    2572:	a0 91 fc 04 	lds	r26, 0x04FC	; 0x8004fc <timer0_overflow_count+0x2>
    2576:	b0 91 fd 04 	lds	r27, 0x04FD	; 0x8004fd <timer0_overflow_count+0x3>
    257a:	26 b5       	in	r18, 0x26	; 38
    257c:	a8 9b       	sbis	0x15, 0	; 21
    257e:	05 c0       	rjmp	.+10     	; 0x258a <micros+0x24>
    2580:	2f 3f       	cpi	r18, 0xFF	; 255
    2582:	19 f0       	breq	.+6      	; 0x258a <micros+0x24>
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	a1 1d       	adc	r26, r1
    2588:	b1 1d       	adc	r27, r1
    258a:	3f bf       	out	0x3f, r19	; 63
    258c:	ba 2f       	mov	r27, r26
    258e:	a9 2f       	mov	r26, r25
    2590:	98 2f       	mov	r25, r24
    2592:	88 27       	eor	r24, r24
    2594:	82 0f       	add	r24, r18
    2596:	91 1d       	adc	r25, r1
    2598:	a1 1d       	adc	r26, r1
    259a:	b1 1d       	adc	r27, r1
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	42 e0       	ldi	r20, 0x02	; 2
    25a2:	66 0f       	add	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	88 1f       	adc	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	4a 95       	dec	r20
    25ac:	d1 f7       	brne	.-12     	; 0x25a2 <micros+0x3c>
    25ae:	08 95       	ret

000025b0 <delay>:
    25b0:	8f 92       	push	r8
    25b2:	9f 92       	push	r9
    25b4:	af 92       	push	r10
    25b6:	bf 92       	push	r11
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	6b 01       	movw	r12, r22
    25c2:	7c 01       	movw	r14, r24
    25c4:	0e 94 b3 12 	call	0x2566	; 0x2566 <micros>
    25c8:	4b 01       	movw	r8, r22
    25ca:	5c 01       	movw	r10, r24
    25cc:	c1 14       	cp	r12, r1
    25ce:	d1 04       	cpc	r13, r1
    25d0:	e1 04       	cpc	r14, r1
    25d2:	f1 04       	cpc	r15, r1
    25d4:	01 f1       	breq	.+64     	; 0x2616 <delay+0x66>
    25d6:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <yield>
    25da:	0e 94 b3 12 	call	0x2566	; 0x2566 <micros>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	88 19       	sub	r24, r8
    25e4:	99 09       	sbc	r25, r9
    25e6:	aa 09       	sbc	r26, r10
    25e8:	bb 09       	sbc	r27, r11
    25ea:	88 3e       	cpi	r24, 0xE8	; 232
    25ec:	93 40       	sbci	r25, 0x03	; 3
    25ee:	a1 05       	cpc	r26, r1
    25f0:	b1 05       	cpc	r27, r1
    25f2:	60 f3       	brcs	.-40     	; 0x25cc <delay+0x1c>
    25f4:	21 e0       	ldi	r18, 0x01	; 1
    25f6:	c2 1a       	sub	r12, r18
    25f8:	d1 08       	sbc	r13, r1
    25fa:	e1 08       	sbc	r14, r1
    25fc:	f1 08       	sbc	r15, r1
    25fe:	88 ee       	ldi	r24, 0xE8	; 232
    2600:	88 0e       	add	r8, r24
    2602:	83 e0       	ldi	r24, 0x03	; 3
    2604:	98 1e       	adc	r9, r24
    2606:	a1 1c       	adc	r10, r1
    2608:	b1 1c       	adc	r11, r1
    260a:	c1 14       	cp	r12, r1
    260c:	d1 04       	cpc	r13, r1
    260e:	e1 04       	cpc	r14, r1
    2610:	f1 04       	cpc	r15, r1
    2612:	19 f7       	brne	.-58     	; 0x25da <delay+0x2a>
    2614:	db cf       	rjmp	.-74     	; 0x25cc <delay+0x1c>
    2616:	ff 90       	pop	r15
    2618:	ef 90       	pop	r14
    261a:	df 90       	pop	r13
    261c:	cf 90       	pop	r12
    261e:	bf 90       	pop	r11
    2620:	af 90       	pop	r10
    2622:	9f 90       	pop	r9
    2624:	8f 90       	pop	r8
    2626:	08 95       	ret

00002628 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2628:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    262a:	84 b5       	in	r24, 0x24	; 36
    262c:	82 60       	ori	r24, 0x02	; 2
    262e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2630:	84 b5       	in	r24, 0x24	; 36
    2632:	81 60       	ori	r24, 0x01	; 1
    2634:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2636:	85 b5       	in	r24, 0x25	; 37
    2638:	82 60       	ori	r24, 0x02	; 2
    263a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    263c:	85 b5       	in	r24, 0x25	; 37
    263e:	81 60       	ori	r24, 0x01	; 1
    2640:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2642:	ee e6       	ldi	r30, 0x6E	; 110
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	81 60       	ori	r24, 0x01	; 1
    264a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    264c:	e1 e8       	ldi	r30, 0x81	; 129
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2652:	80 81       	ld	r24, Z
    2654:	82 60       	ori	r24, 0x02	; 2
    2656:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2658:	80 81       	ld	r24, Z
    265a:	81 60       	ori	r24, 0x01	; 1
    265c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    265e:	e0 e8       	ldi	r30, 0x80	; 128
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	81 60       	ori	r24, 0x01	; 1
    2666:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2668:	e1 eb       	ldi	r30, 0xB1	; 177
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	84 60       	ori	r24, 0x04	; 4
    2670:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2672:	e0 eb       	ldi	r30, 0xB0	; 176
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	81 60       	ori	r24, 0x01	; 1
    267a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    267c:	ea e7       	ldi	r30, 0x7A	; 122
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	84 60       	ori	r24, 0x04	; 4
    2684:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2686:	80 81       	ld	r24, Z
    2688:	82 60       	ori	r24, 0x02	; 2
    268a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    268c:	80 81       	ld	r24, Z
    268e:	81 60       	ori	r24, 0x01	; 1
    2690:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2692:	80 81       	ld	r24, Z
    2694:	80 68       	ori	r24, 0x80	; 128
    2696:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2698:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    269c:	08 95       	ret

0000269e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	81 f0       	breq	.+32     	; 0x26c2 <turnOffPWM+0x24>
    26a2:	28 f4       	brcc	.+10     	; 0x26ae <turnOffPWM+0x10>
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	99 f0       	breq	.+38     	; 0x26ce <turnOffPWM+0x30>
    26a8:	82 30       	cpi	r24, 0x02	; 2
    26aa:	a1 f0       	breq	.+40     	; 0x26d4 <turnOffPWM+0x36>
    26ac:	08 95       	ret
    26ae:	87 30       	cpi	r24, 0x07	; 7
    26b0:	a9 f0       	breq	.+42     	; 0x26dc <turnOffPWM+0x3e>
    26b2:	88 30       	cpi	r24, 0x08	; 8
    26b4:	b9 f0       	breq	.+46     	; 0x26e4 <turnOffPWM+0x46>
    26b6:	84 30       	cpi	r24, 0x04	; 4
    26b8:	d1 f4       	brne	.+52     	; 0x26ee <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    26ba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    26be:	8f 7d       	andi	r24, 0xDF	; 223
    26c0:	03 c0       	rjmp	.+6      	; 0x26c8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    26c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    26c6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    26c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    26cc:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    26ce:	84 b5       	in	r24, 0x24	; 36
    26d0:	8f 77       	andi	r24, 0x7F	; 127
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    26d4:	84 b5       	in	r24, 0x24	; 36
    26d6:	8f 7d       	andi	r24, 0xDF	; 223
    26d8:	84 bd       	out	0x24, r24	; 36
    26da:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    26dc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    26e0:	8f 77       	andi	r24, 0x7F	; 127
    26e2:	03 c0       	rjmp	.+6      	; 0x26ea <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    26e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    26e8:	8f 7d       	andi	r24, 0xDF	; 223
    26ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    26ee:	08 95       	ret

000026f0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	fc 01       	movw	r30, r24
    26f8:	e3 58       	subi	r30, 0x83	; 131
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    26fe:	fc 01       	movw	r30, r24
    2700:	ef 56       	subi	r30, 0x6F	; 111
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2706:	88 23       	and	r24, r24
    2708:	61 f1       	breq	.+88     	; 0x2762 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	fc 01       	movw	r30, r24
    2712:	e7 54       	subi	r30, 0x47	; 71
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	c5 91       	lpm	r28, Z+
    2718:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    271a:	fc 01       	movw	r30, r24
    271c:	e1 55       	subi	r30, 0x51	; 81
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	a5 91       	lpm	r26, Z+
    2722:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2724:	61 11       	cpse	r22, r1
    2726:	09 c0       	rjmp	.+18     	; 0x273a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2728:	9f b7       	in	r25, 0x3f	; 63
                cli();
    272a:	f8 94       	cli
		*reg &= ~bit;
    272c:	88 81       	ld	r24, Y
    272e:	20 95       	com	r18
    2730:	82 23       	and	r24, r18
    2732:	88 83       	st	Y, r24
		*out &= ~bit;
    2734:	ec 91       	ld	r30, X
    2736:	2e 23       	and	r18, r30
    2738:	0b c0       	rjmp	.+22     	; 0x2750 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    273a:	62 30       	cpi	r22, 0x02	; 2
    273c:	61 f4       	brne	.+24     	; 0x2756 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    273e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2740:	f8 94       	cli
		*reg &= ~bit;
    2742:	88 81       	ld	r24, Y
    2744:	32 2f       	mov	r19, r18
    2746:	30 95       	com	r19
    2748:	83 23       	and	r24, r19
    274a:	88 83       	st	Y, r24
		*out |= bit;
    274c:	ec 91       	ld	r30, X
    274e:	2e 2b       	or	r18, r30
    2750:	2c 93       	st	X, r18
		SREG = oldSREG;
    2752:	9f bf       	out	0x3f, r25	; 63
    2754:	06 c0       	rjmp	.+12     	; 0x2762 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2756:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2758:	f8 94       	cli
		*reg |= bit;
    275a:	e8 81       	ld	r30, Y
    275c:	2e 2b       	or	r18, r30
    275e:	28 83       	st	Y, r18
		SREG = oldSREG;
    2760:	8f bf       	out	0x3f, r24	; 63
	}
}
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	08 95       	ret

00002768 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	f9 01       	movw	r30, r18
    2774:	e7 59       	subi	r30, 0x97	; 151
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    277a:	f9 01       	movw	r30, r18
    277c:	e3 58       	subi	r30, 0x83	; 131
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2782:	f9 01       	movw	r30, r18
    2784:	ef 56       	subi	r30, 0x6F	; 111
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    278a:	cc 23       	and	r28, r28
    278c:	c1 f0       	breq	.+48     	; 0x27be <digitalWrite+0x56>
    278e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2790:	81 11       	cpse	r24, r1
    2792:	0e 94 4f 13 	call	0x269e	; 0x269e <turnOffPWM>

	out = portOutputRegister(port);
    2796:	ec 2f       	mov	r30, r28
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	ee 0f       	add	r30, r30
    279c:	ff 1f       	adc	r31, r31
    279e:	e1 55       	subi	r30, 0x51	; 81
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	a5 91       	lpm	r26, Z+
    27a4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    27a6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    27a8:	f8 94       	cli

	if (val == LOW) {
    27aa:	11 11       	cpse	r17, r1
    27ac:	04 c0       	rjmp	.+8      	; 0x27b6 <digitalWrite+0x4e>
		*out &= ~bit;
    27ae:	8c 91       	ld	r24, X
    27b0:	d0 95       	com	r29
    27b2:	d8 23       	and	r29, r24
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <digitalWrite+0x52>
	} else {
		*out |= bit;
    27b6:	ec 91       	ld	r30, X
    27b8:	de 2b       	or	r29, r30
    27ba:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    27bc:	9f bf       	out	0x3f, r25	; 63
}
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	1f 91       	pop	r17
    27c4:	08 95       	ret

000027c6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    27c6:	08 95       	ret

000027c8 <__mulsi3>:
    27c8:	db 01       	movw	r26, r22
    27ca:	8f 93       	push	r24
    27cc:	9f 93       	push	r25
    27ce:	0e 94 39 14 	call	0x2872	; 0x2872 <__muluhisi3>
    27d2:	bf 91       	pop	r27
    27d4:	af 91       	pop	r26
    27d6:	a2 9f       	mul	r26, r18
    27d8:	80 0d       	add	r24, r0
    27da:	91 1d       	adc	r25, r1
    27dc:	a3 9f       	mul	r26, r19
    27de:	90 0d       	add	r25, r0
    27e0:	b2 9f       	mul	r27, r18
    27e2:	90 0d       	add	r25, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	08 95       	ret

000027e8 <__udivmodhi4>:
    27e8:	aa 1b       	sub	r26, r26
    27ea:	bb 1b       	sub	r27, r27
    27ec:	51 e1       	ldi	r21, 0x11	; 17
    27ee:	07 c0       	rjmp	.+14     	; 0x27fe <__udivmodhi4_ep>

000027f0 <__udivmodhi4_loop>:
    27f0:	aa 1f       	adc	r26, r26
    27f2:	bb 1f       	adc	r27, r27
    27f4:	a6 17       	cp	r26, r22
    27f6:	b7 07       	cpc	r27, r23
    27f8:	10 f0       	brcs	.+4      	; 0x27fe <__udivmodhi4_ep>
    27fa:	a6 1b       	sub	r26, r22
    27fc:	b7 0b       	sbc	r27, r23

000027fe <__udivmodhi4_ep>:
    27fe:	88 1f       	adc	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	5a 95       	dec	r21
    2804:	a9 f7       	brne	.-22     	; 0x27f0 <__udivmodhi4_loop>
    2806:	80 95       	com	r24
    2808:	90 95       	com	r25
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	08 95       	ret

00002810 <__udivmodsi4>:
    2810:	a1 e2       	ldi	r26, 0x21	; 33
    2812:	1a 2e       	mov	r1, r26
    2814:	aa 1b       	sub	r26, r26
    2816:	bb 1b       	sub	r27, r27
    2818:	fd 01       	movw	r30, r26
    281a:	0d c0       	rjmp	.+26     	; 0x2836 <__udivmodsi4_ep>

0000281c <__udivmodsi4_loop>:
    281c:	aa 1f       	adc	r26, r26
    281e:	bb 1f       	adc	r27, r27
    2820:	ee 1f       	adc	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	a2 17       	cp	r26, r18
    2826:	b3 07       	cpc	r27, r19
    2828:	e4 07       	cpc	r30, r20
    282a:	f5 07       	cpc	r31, r21
    282c:	20 f0       	brcs	.+8      	; 0x2836 <__udivmodsi4_ep>
    282e:	a2 1b       	sub	r26, r18
    2830:	b3 0b       	sbc	r27, r19
    2832:	e4 0b       	sbc	r30, r20
    2834:	f5 0b       	sbc	r31, r21

00002836 <__udivmodsi4_ep>:
    2836:	66 1f       	adc	r22, r22
    2838:	77 1f       	adc	r23, r23
    283a:	88 1f       	adc	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	1a 94       	dec	r1
    2840:	69 f7       	brne	.-38     	; 0x281c <__udivmodsi4_loop>
    2842:	60 95       	com	r22
    2844:	70 95       	com	r23
    2846:	80 95       	com	r24
    2848:	90 95       	com	r25
    284a:	9b 01       	movw	r18, r22
    284c:	ac 01       	movw	r20, r24
    284e:	bd 01       	movw	r22, r26
    2850:	cf 01       	movw	r24, r30
    2852:	08 95       	ret

00002854 <__umulhisi3>:
    2854:	a2 9f       	mul	r26, r18
    2856:	b0 01       	movw	r22, r0
    2858:	b3 9f       	mul	r27, r19
    285a:	c0 01       	movw	r24, r0
    285c:	a3 9f       	mul	r26, r19
    285e:	70 0d       	add	r23, r0
    2860:	81 1d       	adc	r24, r1
    2862:	11 24       	eor	r1, r1
    2864:	91 1d       	adc	r25, r1
    2866:	b2 9f       	mul	r27, r18
    2868:	70 0d       	add	r23, r0
    286a:	81 1d       	adc	r24, r1
    286c:	11 24       	eor	r1, r1
    286e:	91 1d       	adc	r25, r1
    2870:	08 95       	ret

00002872 <__muluhisi3>:
    2872:	0e 94 2a 14 	call	0x2854	; 0x2854 <__umulhisi3>
    2876:	a5 9f       	mul	r26, r21
    2878:	90 0d       	add	r25, r0
    287a:	b4 9f       	mul	r27, r20
    287c:	90 0d       	add	r25, r0
    287e:	a4 9f       	mul	r26, r20
    2880:	80 0d       	add	r24, r0
    2882:	91 1d       	adc	r25, r1
    2884:	11 24       	eor	r1, r1
    2886:	08 95       	ret

00002888 <__ashldi3>:
    2888:	0f 93       	push	r16
    288a:	08 30       	cpi	r16, 0x08	; 8
    288c:	90 f0       	brcs	.+36     	; 0x28b2 <__ashldi3+0x2a>
    288e:	98 2f       	mov	r25, r24
    2890:	87 2f       	mov	r24, r23
    2892:	76 2f       	mov	r23, r22
    2894:	65 2f       	mov	r22, r21
    2896:	54 2f       	mov	r21, r20
    2898:	43 2f       	mov	r20, r19
    289a:	32 2f       	mov	r19, r18
    289c:	22 27       	eor	r18, r18
    289e:	08 50       	subi	r16, 0x08	; 8
    28a0:	f4 cf       	rjmp	.-24     	; 0x288a <__ashldi3+0x2>
    28a2:	22 0f       	add	r18, r18
    28a4:	33 1f       	adc	r19, r19
    28a6:	44 1f       	adc	r20, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	66 1f       	adc	r22, r22
    28ac:	77 1f       	adc	r23, r23
    28ae:	88 1f       	adc	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	0a 95       	dec	r16
    28b4:	b2 f7       	brpl	.-20     	; 0x28a2 <__ashldi3+0x1a>
    28b6:	0f 91       	pop	r16
    28b8:	08 95       	ret

000028ba <__tablejump2__>:
    28ba:	ee 0f       	add	r30, r30
    28bc:	ff 1f       	adc	r31, r31
    28be:	05 90       	lpm	r0, Z+
    28c0:	f4 91       	lpm	r31, Z
    28c2:	e0 2d       	mov	r30, r0
    28c4:	09 94       	ijmp

000028c6 <malloc>:
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	91 05       	cpc	r25, r1
    28d2:	10 f4       	brcc	.+4      	; 0x28d8 <malloc+0x12>
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <__flp>
    28dc:	f0 91 01 05 	lds	r31, 0x0501	; 0x800501 <__flp+0x1>
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	30 97       	sbiw	r30, 0x00	; 0
    28ea:	19 f1       	breq	.+70     	; 0x2932 <malloc+0x6c>
    28ec:	40 81       	ld	r20, Z
    28ee:	51 81       	ldd	r21, Z+1	; 0x01
    28f0:	02 81       	ldd	r16, Z+2	; 0x02
    28f2:	13 81       	ldd	r17, Z+3	; 0x03
    28f4:	48 17       	cp	r20, r24
    28f6:	59 07       	cpc	r21, r25
    28f8:	c8 f0       	brcs	.+50     	; 0x292c <malloc+0x66>
    28fa:	84 17       	cp	r24, r20
    28fc:	95 07       	cpc	r25, r21
    28fe:	69 f4       	brne	.+26     	; 0x291a <malloc+0x54>
    2900:	10 97       	sbiw	r26, 0x00	; 0
    2902:	31 f0       	breq	.+12     	; 0x2910 <malloc+0x4a>
    2904:	12 96       	adiw	r26, 0x02	; 2
    2906:	0c 93       	st	X, r16
    2908:	12 97       	sbiw	r26, 0x02	; 2
    290a:	13 96       	adiw	r26, 0x03	; 3
    290c:	1c 93       	st	X, r17
    290e:	27 c0       	rjmp	.+78     	; 0x295e <malloc+0x98>
    2910:	00 93 00 05 	sts	0x0500, r16	; 0x800500 <__flp>
    2914:	10 93 01 05 	sts	0x0501, r17	; 0x800501 <__flp+0x1>
    2918:	22 c0       	rjmp	.+68     	; 0x295e <malloc+0x98>
    291a:	21 15       	cp	r18, r1
    291c:	31 05       	cpc	r19, r1
    291e:	19 f0       	breq	.+6      	; 0x2926 <malloc+0x60>
    2920:	42 17       	cp	r20, r18
    2922:	53 07       	cpc	r21, r19
    2924:	18 f4       	brcc	.+6      	; 0x292c <malloc+0x66>
    2926:	9a 01       	movw	r18, r20
    2928:	bd 01       	movw	r22, r26
    292a:	ef 01       	movw	r28, r30
    292c:	df 01       	movw	r26, r30
    292e:	f8 01       	movw	r30, r16
    2930:	db cf       	rjmp	.-74     	; 0x28e8 <malloc+0x22>
    2932:	21 15       	cp	r18, r1
    2934:	31 05       	cpc	r19, r1
    2936:	f9 f0       	breq	.+62     	; 0x2976 <malloc+0xb0>
    2938:	28 1b       	sub	r18, r24
    293a:	39 0b       	sbc	r19, r25
    293c:	24 30       	cpi	r18, 0x04	; 4
    293e:	31 05       	cpc	r19, r1
    2940:	80 f4       	brcc	.+32     	; 0x2962 <malloc+0x9c>
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	61 15       	cp	r22, r1
    2948:	71 05       	cpc	r23, r1
    294a:	21 f0       	breq	.+8      	; 0x2954 <malloc+0x8e>
    294c:	fb 01       	movw	r30, r22
    294e:	93 83       	std	Z+3, r25	; 0x03
    2950:	82 83       	std	Z+2, r24	; 0x02
    2952:	04 c0       	rjmp	.+8      	; 0x295c <malloc+0x96>
    2954:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <__flp+0x1>
    2958:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <__flp>
    295c:	fe 01       	movw	r30, r28
    295e:	32 96       	adiw	r30, 0x02	; 2
    2960:	44 c0       	rjmp	.+136    	; 0x29ea <malloc+0x124>
    2962:	fe 01       	movw	r30, r28
    2964:	e2 0f       	add	r30, r18
    2966:	f3 1f       	adc	r31, r19
    2968:	81 93       	st	Z+, r24
    296a:	91 93       	st	Z+, r25
    296c:	22 50       	subi	r18, 0x02	; 2
    296e:	31 09       	sbc	r19, r1
    2970:	39 83       	std	Y+1, r19	; 0x01
    2972:	28 83       	st	Y, r18
    2974:	3a c0       	rjmp	.+116    	; 0x29ea <malloc+0x124>
    2976:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <__brkval>
    297a:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <__brkval+0x1>
    297e:	23 2b       	or	r18, r19
    2980:	41 f4       	brne	.+16     	; 0x2992 <malloc+0xcc>
    2982:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2986:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    298a:	30 93 ff 04 	sts	0x04FF, r19	; 0x8004ff <__brkval+0x1>
    298e:	20 93 fe 04 	sts	0x04FE, r18	; 0x8004fe <__brkval>
    2992:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2996:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    299a:	21 15       	cp	r18, r1
    299c:	31 05       	cpc	r19, r1
    299e:	41 f4       	brne	.+16     	; 0x29b0 <malloc+0xea>
    29a0:	2d b7       	in	r18, 0x3d	; 61
    29a2:	3e b7       	in	r19, 0x3e	; 62
    29a4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    29a8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    29ac:	24 1b       	sub	r18, r20
    29ae:	35 0b       	sbc	r19, r21
    29b0:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <__brkval>
    29b4:	f0 91 ff 04 	lds	r31, 0x04FF	; 0x8004ff <__brkval+0x1>
    29b8:	e2 17       	cp	r30, r18
    29ba:	f3 07       	cpc	r31, r19
    29bc:	a0 f4       	brcc	.+40     	; 0x29e6 <malloc+0x120>
    29be:	2e 1b       	sub	r18, r30
    29c0:	3f 0b       	sbc	r19, r31
    29c2:	28 17       	cp	r18, r24
    29c4:	39 07       	cpc	r19, r25
    29c6:	78 f0       	brcs	.+30     	; 0x29e6 <malloc+0x120>
    29c8:	ac 01       	movw	r20, r24
    29ca:	4e 5f       	subi	r20, 0xFE	; 254
    29cc:	5f 4f       	sbci	r21, 0xFF	; 255
    29ce:	24 17       	cp	r18, r20
    29d0:	35 07       	cpc	r19, r21
    29d2:	48 f0       	brcs	.+18     	; 0x29e6 <malloc+0x120>
    29d4:	4e 0f       	add	r20, r30
    29d6:	5f 1f       	adc	r21, r31
    29d8:	50 93 ff 04 	sts	0x04FF, r21	; 0x8004ff <__brkval+0x1>
    29dc:	40 93 fe 04 	sts	0x04FE, r20	; 0x8004fe <__brkval>
    29e0:	81 93       	st	Z+, r24
    29e2:	91 93       	st	Z+, r25
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <malloc+0x124>
    29e6:	e0 e0       	ldi	r30, 0x00	; 0
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	cf 01       	movw	r24, r30
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret

000029f6 <free>:
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <free+0xa>
    29fe:	81 c0       	rjmp	.+258    	; 0x2b02 <free+0x10c>
    2a00:	fc 01       	movw	r30, r24
    2a02:	32 97       	sbiw	r30, 0x02	; 2
    2a04:	13 82       	std	Z+3, r1	; 0x03
    2a06:	12 82       	std	Z+2, r1	; 0x02
    2a08:	a0 91 00 05 	lds	r26, 0x0500	; 0x800500 <__flp>
    2a0c:	b0 91 01 05 	lds	r27, 0x0501	; 0x800501 <__flp+0x1>
    2a10:	10 97       	sbiw	r26, 0x00	; 0
    2a12:	81 f4       	brne	.+32     	; 0x2a34 <free+0x3e>
    2a14:	20 81       	ld	r18, Z
    2a16:	31 81       	ldd	r19, Z+1	; 0x01
    2a18:	82 0f       	add	r24, r18
    2a1a:	93 1f       	adc	r25, r19
    2a1c:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <__brkval>
    2a20:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <__brkval+0x1>
    2a24:	28 17       	cp	r18, r24
    2a26:	39 07       	cpc	r19, r25
    2a28:	51 f5       	brne	.+84     	; 0x2a7e <free+0x88>
    2a2a:	f0 93 ff 04 	sts	0x04FF, r31	; 0x8004ff <__brkval+0x1>
    2a2e:	e0 93 fe 04 	sts	0x04FE, r30	; 0x8004fe <__brkval>
    2a32:	67 c0       	rjmp	.+206    	; 0x2b02 <free+0x10c>
    2a34:	ed 01       	movw	r28, r26
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	ce 17       	cp	r28, r30
    2a3c:	df 07       	cpc	r29, r31
    2a3e:	40 f4       	brcc	.+16     	; 0x2a50 <free+0x5a>
    2a40:	4a 81       	ldd	r20, Y+2	; 0x02
    2a42:	5b 81       	ldd	r21, Y+3	; 0x03
    2a44:	9e 01       	movw	r18, r28
    2a46:	41 15       	cp	r20, r1
    2a48:	51 05       	cpc	r21, r1
    2a4a:	f1 f0       	breq	.+60     	; 0x2a88 <free+0x92>
    2a4c:	ea 01       	movw	r28, r20
    2a4e:	f5 cf       	rjmp	.-22     	; 0x2a3a <free+0x44>
    2a50:	d3 83       	std	Z+3, r29	; 0x03
    2a52:	c2 83       	std	Z+2, r28	; 0x02
    2a54:	40 81       	ld	r20, Z
    2a56:	51 81       	ldd	r21, Z+1	; 0x01
    2a58:	84 0f       	add	r24, r20
    2a5a:	95 1f       	adc	r25, r21
    2a5c:	c8 17       	cp	r28, r24
    2a5e:	d9 07       	cpc	r29, r25
    2a60:	59 f4       	brne	.+22     	; 0x2a78 <free+0x82>
    2a62:	88 81       	ld	r24, Y
    2a64:	99 81       	ldd	r25, Y+1	; 0x01
    2a66:	84 0f       	add	r24, r20
    2a68:	95 1f       	adc	r25, r21
    2a6a:	02 96       	adiw	r24, 0x02	; 2
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	9b 81       	ldd	r25, Y+3	; 0x03
    2a74:	93 83       	std	Z+3, r25	; 0x03
    2a76:	82 83       	std	Z+2, r24	; 0x02
    2a78:	21 15       	cp	r18, r1
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	29 f4       	brne	.+10     	; 0x2a88 <free+0x92>
    2a7e:	f0 93 01 05 	sts	0x0501, r31	; 0x800501 <__flp+0x1>
    2a82:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <__flp>
    2a86:	3d c0       	rjmp	.+122    	; 0x2b02 <free+0x10c>
    2a88:	e9 01       	movw	r28, r18
    2a8a:	fb 83       	std	Y+3, r31	; 0x03
    2a8c:	ea 83       	std	Y+2, r30	; 0x02
    2a8e:	49 91       	ld	r20, Y+
    2a90:	59 91       	ld	r21, Y+
    2a92:	c4 0f       	add	r28, r20
    2a94:	d5 1f       	adc	r29, r21
    2a96:	ec 17       	cp	r30, r28
    2a98:	fd 07       	cpc	r31, r29
    2a9a:	61 f4       	brne	.+24     	; 0x2ab4 <free+0xbe>
    2a9c:	80 81       	ld	r24, Z
    2a9e:	91 81       	ldd	r25, Z+1	; 0x01
    2aa0:	84 0f       	add	r24, r20
    2aa2:	95 1f       	adc	r25, r21
    2aa4:	02 96       	adiw	r24, 0x02	; 2
    2aa6:	e9 01       	movw	r28, r18
    2aa8:	99 83       	std	Y+1, r25	; 0x01
    2aaa:	88 83       	st	Y, r24
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	9b 83       	std	Y+3, r25	; 0x03
    2ab2:	8a 83       	std	Y+2, r24	; 0x02
    2ab4:	e0 e0       	ldi	r30, 0x00	; 0
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	12 96       	adiw	r26, 0x02	; 2
    2aba:	8d 91       	ld	r24, X+
    2abc:	9c 91       	ld	r25, X
    2abe:	13 97       	sbiw	r26, 0x03	; 3
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	19 f0       	breq	.+6      	; 0x2aca <free+0xd4>
    2ac4:	fd 01       	movw	r30, r26
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	f7 cf       	rjmp	.-18     	; 0x2ab8 <free+0xc2>
    2aca:	8d 91       	ld	r24, X+
    2acc:	9c 91       	ld	r25, X
    2ace:	11 97       	sbiw	r26, 0x01	; 1
    2ad0:	9d 01       	movw	r18, r26
    2ad2:	2e 5f       	subi	r18, 0xFE	; 254
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	82 0f       	add	r24, r18
    2ad8:	93 1f       	adc	r25, r19
    2ada:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <__brkval>
    2ade:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <__brkval+0x1>
    2ae2:	28 17       	cp	r18, r24
    2ae4:	39 07       	cpc	r19, r25
    2ae6:	69 f4       	brne	.+26     	; 0x2b02 <free+0x10c>
    2ae8:	30 97       	sbiw	r30, 0x00	; 0
    2aea:	29 f4       	brne	.+10     	; 0x2af6 <free+0x100>
    2aec:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <__flp+0x1>
    2af0:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <__flp>
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <free+0x104>
    2af6:	13 82       	std	Z+3, r1	; 0x03
    2af8:	12 82       	std	Z+2, r1	; 0x02
    2afa:	b0 93 ff 04 	sts	0x04FF, r27	; 0x8004ff <__brkval+0x1>
    2afe:	a0 93 fe 04 	sts	0x04FE, r26	; 0x8004fe <__brkval>
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	08 95       	ret

00002b08 <_exit>:
    2b08:	f8 94       	cli

00002b0a <__stop_program>:
    2b0a:	ff cf       	rjmp	.-2      	; 0x2b0a <__stop_program>
