<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___receiving" xml:lang="en-US">
<title>Receiving IR data for multiple protocols</title>
<indexterm><primary>Receiving IR data for multiple protocols</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_group___receiving_1ga495b7f49ff71cde1289b118fac0f0674">matchTicks</link> (uint16_t aMeasuredTicks, uint16_t aMatchValueMicros)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1ga0f9263ab71af2d2895add92f72a05ee9">MATCH</link> (uint16_t measured_ticks, uint16_t desired_us)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1ga4472564ea96b1ee10b51f594f60d7aeb">matchMark</link> (uint16_t aMeasuredTicks, uint16_t aMatchValueMicros)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1gadab293a71386f20571db6d779d1d84b7">MATCH_MARK</link> (uint16_t measured_ticks, uint16_t desired_us)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1ga7902b620f6c01463b5b6e50ef604ac8b">matchSpace</link> (uint16_t aMeasuredTicks, uint16_t aMatchValueMicros)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1gab91e763e3ae44501f7c4f7b7ff8aca0f">MATCH_SPACE</link> (uint16_t measured_ticks, uint16_t desired_us)</para>
</listitem>
            <listitem><para>int <link linkend="_group___receiving_1gab1d28d4dd67d6bf808c0328a92e2d863">getMarkExcessMicros</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga0ad570723cf65cad6721117ae1a6d598">CheckForRecordGapsMicros</link> (Print *aSerial, <link linkend="_struct_i_r_data">IRData</link> *aIRDataPtr)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1gada0f2fe0704a217c16ee497ba7b3630e">printActiveIRProtocols</link> (Print *aSerial)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga545a2c08c0d21af0e95d65b052670bae">printIRResultShort</link> (Print *aSerial, <link linkend="_struct_i_r_data">IRData</link> *aIRDataPtr, uint16_t aLeadingSpaceTicks)</para>
</listitem>
            <listitem><para>const __FlashStringHelper * <link linkend="_group___receiving_1ga378e691dd082face86f9ae908d0eef2e">getProtocolString</link> (<link linkend="__i_r_protocol_8h_1ad5b287a488a8c1b7b8661f029ab56fad">decode_type_t</link> aProtocol)</para>
</listitem>
            <listitem><para><link linkend="_group___receiving_1gaa8c5af507063503eacfa11a27c993a90">ISR</link> ()</para>
</listitem>
            <listitem><para><link linkend="_group___receiving_1ga81eee3a1f9153578d595c771688003e8">IRrecv::IRrecv</link> ()</para>
</listitem>
            <listitem><para><link linkend="_group___receiving_1ga223c74ba081592e2fba4b5cd08c8a45c">IRrecv::IRrecv</link> (uint8_t aReceivePin)</para>
</listitem>
            <listitem><para><link linkend="_group___receiving_1ga78bb606b282e710d0d542e2aa44786d8">IRrecv::IRrecv</link> (uint8_t aReceivePin, uint8_t aFeedbackLEDPin)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga0358fc4a683ba3f8d31fdde1e22be724">IRrecv::begin</link> (uint8_t aReceivePin, bool aEnableLEDFeedback=false, uint8_t aFeedbackLEDPin=<link linkend="__i_rremote_int_8h_1a575e74508c30d1ccf92f7e142a43dd3d">USE_DEFAULT_FEEDBACK_LED_PIN</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1gac3c968e5acf5b0bbd1e1b87e0b5af61f">IRrecv::setReceivePin</link> (uint8_t aReceivePinNumber)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga2c06971f0e4e0c4131930c8903eb21dc">IRrecv::start</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga9588bd3637dadf9b488a8d669030db9d">IRrecv::start</link> (uint32_t aMicrosecondsToAddToGapCounter)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1gaadb62786cd826cd539683c03734e46fe">IRrecv::stop</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga8ffd22c2d4c6e93918d987a4b7c3ba5b">IRrecv::end</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga69d3e9314aea4a37b43b74a0b4f3f976">IRrecv::enableIRIn</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1gaf828d23c733b1bde8f61e39230d9dbcd">IRrecv::disableIRIn</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1gacfbf39fb284cc2d200158f20747c4ae3">IRrecv::isIdle</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1gaf40f1e16b1cc911e47ac3f0a9b3b1ec5">IRrecv::resume</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga26e37f666387134ed18393fd930f68db">IRrecv::initDecodedIRData</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1gaa4f466138c416bf4e1548f5399be0298">IRrecv::available</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_i_r_data">IRData</link> * <link linkend="_group___receiving_1ga471a42c75e807e43827e319852536e3c">IRrecv::read</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1ga913af602be49b9182fb0b22e9e351b36">IRrecv::decode</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1ga208047cf25c7850842984462bfa11cd0">IRrecv::decodePulseWidthData</link> (uint8_t aNumberOfBits, uint8_t aStartOffset, uint16_t aOneMarkMicros, uint16_t aZeroMarkMicros, uint16_t aBitSpaceMicros, bool aMSBfirst)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1gaf8c9cdb5f7280043a552f22265bdb2d5">IRrecv::decodePulseDistanceData</link> (uint8_t aNumberOfBits, uint8_t aStartOffset, uint16_t aBitMarkMicros, uint16_t aOneSpaceMicros, uint16_t aZeroSpaceMicros, bool aMSBfirst)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga51376b9bd8d1d9ac5c694f6a8c8ecc98">IRrecv::initBiphaselevel</link> (uint8_t aRCDecodeRawbuffOffset, uint16_t aBiphaseTimeUnit)</para>
</listitem>
            <listitem><para>uint8_t <link linkend="_group___receiving_1ga7d26f9254747368762e4d4c09dc22fb0">IRrecv::getBiphaselevel</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga1c11036a46d1e9624e283821f0a99aee">IRrecv::printIRResultShort</link> (Print *aSerial)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga4597a1f83fb256e1673291c424449c51">IRrecv::printIRResultMinimal</link> (Print *aSerial)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga0d8405bf5ec373798c74684b9c7c2e2d">IRrecv::printIRResultRawFormatted</link> (Print *aSerial, bool aOutputMicrosecondsInsteadOfTicks=true)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga21364e5f35756fe0f72581c00b1b33b1">IRrecv::compensateAndPrintIRResultAsCArray</link> (Print *aSerial, bool aOutputMicrosecondsInsteadOfTicks=true)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1ga5a515633f91a505e621cba3bab5e53d0">IRrecv::compensateAndStoreIRResultInArray</link> (uint8_t *aArrayPtr)</para>
</listitem>
            <listitem><para>void <link linkend="_group___receiving_1gae24919a83cfbea5b2c53a851e1d3fed0">IRrecv::printIRResultAsCVariables</link> (Print *aSerial)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___receiving_1ga9705c2ae98b44014e6e8bf55191b2eba">IRrecv::decode</link> (<link linkend="_structdecode__results">decode_results</link> *aResults) __attribute__((deprecated(&quot;Please use IrReceiver.decode() without a parameter and IrReceiver.decodedIRData.&lt;fieldname&gt; .&quot;)))</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_i_rrecv">IRrecv</link> <link linkend="_group___receiving_1ga6813a2b456e5359ce674699c85a61cf9">IrReceiver</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structirparams__struct">irparams_struct</link> <link linkend="_group___receiving_1ga938046a49af083b7d470e61fd77e12ed">irparams</link></para>
</listitem>
            <listitem><para>uint8_t <link linkend="_group___receiving_1ga3f8125d5a7cde4fca3ece58e361296f9">sBiphaseDecodeRawbuffOffset</link></para>
</listitem>
            <listitem><para>uint16_t <link linkend="_group___receiving_1ga800106974e301f9dedf8acb891800e0b">sCurrentTimingIntervals</link></para>
</listitem>
            <listitem><para>uint8_t <link linkend="_group___receiving_1ga1b4a7361ca04152a3dd0a8681a721325">sUsedTimingIntervals</link></para>
</listitem>
            <listitem><para>uint16_t <link linkend="_group___receiving_1gae25d907bed7a0f0298f9cf105d89f86f">sBiphaseTimeUnit</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___receiving_1gaa4f466138c416bf4e1548f5399be0298"/><section>
    <title>available()</title>
<indexterm><primary>available</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>available</secondary></indexterm>
<para><computeroutput>bool IRrecv::available ( )</computeroutput></para>
<para>Returns true if IR receiver data is available. </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00226">226</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga0358fc4a683ba3f8d31fdde1e22be724"/><section>
    <title>begin()</title>
<indexterm><primary>begin</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>begin</secondary></indexterm>
<para><computeroutput>void IRrecv::begin (uint8_t aReceivePin, bool aEnableLEDFeedback = <computeroutput>false</computeroutput>
, uint8_t aFeedbackLEDPin = <computeroutput><link linkend="__i_rremote_int_8h_1a575e74508c30d1ccf92f7e142a43dd3d">USE_DEFAULT_FEEDBACK_LED_PIN</link></computeroutput>
)</computeroutput></para>
<para>Stream like API Initializes the receive and feedback pin 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aReceivePin</entry><entry>
<para>The Arduino pin number, where a demodulating IR receiver is connected. </para>
</entry>
                            </row>
                            <row>
<entry>aEnableLEDFeedback</entry><entry>
<para>if true / ENABLE_LED_FEEDBACK, then let the feedback led blink on receiving IR signal </para>
</entry>
                            </row>
                            <row>
<entry>aFeedbackLEDPin</entry><entry>
<para>if 0 / USE_DEFAULT_FEEDBACK_LED_PIN, then take board specific FEEDBACK_LED_ON() and FEEDBACK_LED_OFF() functions </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00092">92</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga0358fc4a683ba3f8d31fdde1e22be724_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga0358fc4a683ba3f8d31fdde1e22be724_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga0ad570723cf65cad6721117ae1a6d598"/><section>
    <title>CheckForRecordGapsMicros()</title>
<indexterm><primary>CheckForRecordGapsMicros</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>CheckForRecordGapsMicros</secondary></indexterm>
<para><computeroutput>void CheckForRecordGapsMicros (Print * aSerial, <link linkend="_struct_i_r_data">IRData</link> * aIRDataPtr)</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00843">843</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga0ad570723cf65cad6721117ae1a6d598_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga21364e5f35756fe0f72581c00b1b33b1"/><section>
    <title>compensateAndPrintIRResultAsCArray()</title>
<indexterm><primary>compensateAndPrintIRResultAsCArray</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>compensateAndPrintIRResultAsCArray</secondary></indexterm>
<para><computeroutput>void IRrecv::compensateAndPrintIRResultAsCArray (Print * aSerial, bool aOutputMicrosecondsInsteadOfTicks = <computeroutput>true</computeroutput>
)</computeroutput></para>
<para>Dump out the IrReceiver.decodedIRData.rawDataPtr-&gt;rawbuf[] to be used as C definition for sendRaw().</para>

<para>Compensate received values by MARK_EXCESS_MICROS, like it is done for decoding! Print ticks in 8 bit format to save space. Maximum is 255*50 microseconds = 12750 microseconds = 12.75 ms, which hardly ever occurs inside an IR sequence. Recording of IRremote anyway stops at a gap of RECORD_GAP_MICROS (5 ms).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aSerial</entry><entry>
<para>The Print object on which to write, for Arduino you can use &amp;Serial. </para>
</entry>
                            </row>
                            <row>
<entry>aOutputMicrosecondsInsteadOfTicks</entry><entry>
<para>Output the (rawbuf_values * MICROS_PER_TICK) for better readability. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01117">1117</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga21364e5f35756fe0f72581c00b1b33b1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga5a515633f91a505e621cba3bab5e53d0"/><section>
    <title>compensateAndStoreIRResultInArray()</title>
<indexterm><primary>compensateAndStoreIRResultInArray</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>compensateAndStoreIRResultInArray</secondary></indexterm>
<para><computeroutput>void IRrecv::compensateAndStoreIRResultInArray (uint8_t * aArrayPtr)</computeroutput></para>
<para>Store the decodedIRData to be used for sendRaw().</para>

<para>Compensate received values by MARK_EXCESS_MICROS, like it is done for decoding and store it in an array provided.</para>

<para>Maximum for uint8_t is 255*50 microseconds = 12750 microseconds = 12.75 ms, which hardly ever occurs inside an IR sequence. Recording of IRremote anyway stops at a gap of RECORD_GAP_MICROS (5 ms). 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aArrayPtr</entry><entry>
<para>Address of an array provided by the caller. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01179">1179</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga913af602be49b9182fb0b22e9e351b36"/><section>
    <title>decode()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>decode</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>decode</secondary></indexterm>
<para><computeroutput>bool IRrecv::decode ( )</computeroutput></para>
<para>The main decode function, attempts to decode the recently receive IR signal. <formalpara><title>Returns</title>

<para>false if no IR receiver data available, true if data available. Results of decoding are stored in IrReceiver.decodedIRData. The set of decoders used is determined by active definitions of the DECODE_&lt;PROTOCOL&gt; macros. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00249">249</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga913af602be49b9182fb0b22e9e351b36_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga913af602be49b9182fb0b22e9e351b36_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga9705c2ae98b44014e6e8bf55191b2eba"/><section>
    <title>decode()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>decode</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>decode</secondary></indexterm>
<para><computeroutput>bool IRrecv::decode (<link linkend="_structdecode__results">decode_results</link> * aResults)</computeroutput></para>
<para>The DEPRECATED decode function with parameter aResults ONLY for backwards compatibility! This function calls the old MSB first decoders and fills only the 3 variables: aResults-&gt;value aResults-&gt;bits aResults-&gt;decode_type </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01453">1453</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga9705c2ae98b44014e6e8bf55191b2eba_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gaf8c9cdb5f7280043a552f22265bdb2d5"/><section>
    <title>decodePulseDistanceData()</title>
<indexterm><primary>decodePulseDistanceData</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>decodePulseDistanceData</secondary></indexterm>
<para><computeroutput>bool IRrecv::decodePulseDistanceData (uint8_t aNumberOfBits, uint8_t aStartOffset, uint16_t aBitMarkMicros, uint16_t aOneSpaceMicros, uint16_t aZeroSpaceMicros, bool aMSBfirst)</computeroutput></para>
<para>Decode pulse distance protocols. The mark (pulse) has constant length, the length of the space determines the bit value. Each bit looks like: MARK + SPACE_1 -&gt; 1 or : MARK + SPACE_0 -&gt; 0</para>

<para>Input is IrReceiver.decodedIRData.rawDataPtr-&gt;rawbuf[] Output is IrReceiver.decodedIRData.decodedRawData</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aStartOffset</entry><entry>
<para>must point to a mark </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if decoding was successful </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00497">497</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gaf8c9cdb5f7280043a552f22265bdb2d5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gaf8c9cdb5f7280043a552f22265bdb2d5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga208047cf25c7850842984462bfa11cd0"/><section>
    <title>decodePulseWidthData()</title>
<indexterm><primary>decodePulseWidthData</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>decodePulseWidthData</secondary></indexterm>
<para><computeroutput>bool IRrecv::decodePulseWidthData (uint8_t aNumberOfBits, uint8_t aStartOffset, uint16_t aOneMarkMicros, uint16_t aZeroMarkMicros, uint16_t aBitSpaceMicros, bool aMSBfirst)</computeroutput></para>
<para>Common decode functions Decode pulse width protocols. Currently only used for sony protocol. The space (pause) has constant length, the length of the mark determines the bit value. Each bit looks like: MARK_1 + SPACE -&gt; 1 or : MARK_0 + SPACE -&gt; 0</para>

<para>Input is IrReceiver.decodedIRData.rawDataPtr-&gt;rawbuf[] Output is IrReceiver.decodedIRData.decodedRawData</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aStartOffset</entry><entry>
<para>must point to a mark </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if decoding was successful </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00401">401</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga208047cf25c7850842984462bfa11cd0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga208047cf25c7850842984462bfa11cd0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gaf828d23c733b1bde8f61e39230d9dbcd"/><section>
    <title>disableIRIn()</title>
<indexterm><primary>disableIRIn</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>disableIRIn</secondary></indexterm>
<para><computeroutput>void IRrecv::disableIRIn ( )</computeroutput></para>
<para>Disables the timer for IR reception. </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00172">172</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gaf828d23c733b1bde8f61e39230d9dbcd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga69d3e9314aea4a37b43b74a0b4f3f976"/><section>
    <title>enableIRIn()</title>
<indexterm><primary>enableIRIn</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>enableIRIn</secondary></indexterm>
<para><computeroutput>void IRrecv::enableIRIn ( )</computeroutput></para>
<para>Configures the timer and the state machine for IR reception. </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00152">152</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga69d3e9314aea4a37b43b74a0b4f3f976_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga69d3e9314aea4a37b43b74a0b4f3f976_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga8ffd22c2d4c6e93918d987a4b7c3ba5b"/><section>
    <title>end()</title>
<indexterm><primary>end</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>end</secondary></indexterm>
<para><computeroutput>void IRrecv::end ( )</computeroutput></para>
<para>Disables the timer for IR reception. </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00145">145</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga8ffd22c2d4c6e93918d987a4b7c3ba5b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga7d26f9254747368762e4d4c09dc22fb0"/><section>
    <title>getBiphaselevel()</title>
<indexterm><primary>getBiphaselevel</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>getBiphaselevel</secondary></indexterm>
<para><computeroutput>uint8_t IRrecv::getBiphaselevel ( )</computeroutput></para>
<para>Gets the level of one time interval (aBiphaseTimeUnit) at a time from the raw buffer. The RC5/6 decoding is easier if the data is broken into time intervals. E.g. if the buffer has mark for 2 time intervals and space for 1, successive calls to getBiphaselevel will return 1, 1, 0. <literallayout><computeroutput>          _   _   _   _   _   _   _   _   _   _   _   _   _
    _____| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |
           ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^    Significant clock edge
          _     _   _   ___   _     ___     ___   _   - Mark
</computeroutput></literallayout> Data _____| |___| |_| |_| |_| |___| |___| |_| | - Data starts with a mark-&gt;space bit 1 0 0 0 1 1 0 1 0 1 1 - Space A mark to space at a significant clock edge results in a 1 A space to mark at a significant clock edge results in a 0 (for RC6) Returns current level [MARK or SPACE] or -1 for error (measured time interval is not a multiple of sBiphaseTimeUnit). </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00605">605</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga7d26f9254747368762e4d4c09dc22fb0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga7d26f9254747368762e4d4c09dc22fb0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gab1d28d4dd67d6bf808c0328a92e2d863"/><section>
    <title>getMarkExcessMicros()</title>
<indexterm><primary>getMarkExcessMicros</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>getMarkExcessMicros</secondary></indexterm>
<para><computeroutput>int getMarkExcessMicros ( )</computeroutput></para>
<para>Getter function for MARK_EXCESS_MICROS </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00835">835</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gab1d28d4dd67d6bf808c0328a92e2d863_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga378e691dd082face86f9ae908d0eef2e"/><section>
    <title>getProtocolString()</title>
<indexterm><primary>getProtocolString</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>getProtocolString</secondary></indexterm>
<para><computeroutput>const __FlashStringHelper * getProtocolString (<link linkend="__i_r_protocol_8h_1ad5b287a488a8c1b7b8661f029ab56fad">decode_type_t</link> aProtocol)</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01231">1231</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga378e691dd082face86f9ae908d0eef2e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga51376b9bd8d1d9ac5c694f6a8c8ecc98"/><section>
    <title>initBiphaselevel()</title>
<indexterm><primary>initBiphaselevel</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>initBiphaselevel</secondary></indexterm>
<para><computeroutput>void IRrecv::initBiphaselevel (uint8_t aRCDecodeRawbuffOffset, uint16_t aBiphaseTimeUnit)</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00583">583</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga51376b9bd8d1d9ac5c694f6a8c8ecc98_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga26e37f666387134ed18393fd930f68db"/><section>
    <title>initDecodedIRData()</title>
<indexterm><primary>initDecodedIRData</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>initDecodedIRData</secondary></indexterm>
<para><computeroutput>void IRrecv::initDecodedIRData ( )</computeroutput></para>
<para>Is internally called by decode before calling decoders. Must be used to setup data, if you call decoders manually. </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00199">199</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga26e37f666387134ed18393fd930f68db_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga81eee3a1f9153578d595c771688003e8"/><section>
    <title>IRrecv()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>IRrecv</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>IRrecv</secondary></indexterm>
<para><computeroutput>IRrecv::IRrecv ( )</computeroutput></para>
<para>Instantiate the <link linkend="_class_i_rrecv">IRrecv</link> class. Multiple instantiation is not supported. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>IRReceivePin</entry><entry>
<para>Arduino pin to use. No sanity check is made. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00053">53</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga81eee3a1f9153578d595c771688003e8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga223c74ba081592e2fba4b5cd08c8a45c"/><section>
    <title>IRrecv()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>IRrecv</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>IRrecv</secondary></indexterm>
<para><computeroutput>IRrecv::IRrecv (uint8_t aReceivePin)</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00061">61</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga223c74ba081592e2fba4b5cd08c8a45c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga78bb606b282e710d0d542e2aa44786d8"/><section>
    <title>IRrecv()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>IRrecv</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>IRrecv</secondary></indexterm>
<para><computeroutput>IRrecv::IRrecv (uint8_t aReceivePin, uint8_t aFeedbackLEDPin)</computeroutput></para>
<para>Instantiate the <link linkend="_class_i_rrecv">IRrecv</link> class. Multiple instantiation is not supported. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aReceivePin</entry><entry>
<para>Arduino pin to use, where a demodulating IR receiver is connected. </para>
</entry>
                            </row>
                            <row>
<entry>aFeedbackLEDPin</entry><entry>
<para>if 0, then take board specific FEEDBACK_LED_ON() and FEEDBACK_LED_OFF() functions </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00073">73</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga78bb606b282e710d0d542e2aa44786d8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gacfbf39fb284cc2d200158f20747c4ae3"/><section>
    <title>isIdle()</title>
<indexterm><primary>isIdle</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>isIdle</secondary></indexterm>
<para><computeroutput>bool IRrecv::isIdle ( )</computeroutput></para>
<para>Returns status of reception <formalpara><title>Returns</title>

<para>true if no reception is on-going. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00180">180</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1gaa8c5af507063503eacfa11a27c993a90"/><section>
    <title>ISR()</title>
<indexterm><primary>ISR</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>ISR</secondary></indexterm>
<para><computeroutput>ISR ( )</computeroutput></para>
<para>Interrupt Service Routine - Called every 50 us</para>

<para>Duration in ticks of 50 us of alternating SPACE, MARK are recorded in irparams.rawbuf array. &apos;rawlen&apos; counts the number of entries recorded so far. First entry is the SPACE between transmissions.</para>

<para>As soon as one SPACE entry gets longer than RECORD_GAP_TICKS, state switches to STOP (frame received). Timing of SPACE continues. A call of resume() switches from STOP to IDLE. As soon as first MARK arrives in IDLE, gap width is recorded and new logging starts.</para>

<para>With digitalRead and Feedback LED 15 pushs, 1 in, 1 eor before start of code = 2 us @16MHz + * 7.2 us computation time (6us idle time) + * pop + reti = 2.25 us @16MHz =&gt; 10.3 to 11.5 us @16MHz With portInputRegister and mask and Feedback LED code commented 9 pushs, 1 in, 1 eor before start of code = 1.25 us @16MHz + * 2.25 us computation time + * pop + reti = 1.5 us @16MHz =&gt; 5 us @16MHz =&gt; Minimal CPU frequency is 4 MHz </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01340">1340</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gaa8c5af507063503eacfa11a27c993a90_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga0f9263ab71af2d2895add92f72a05ee9"/><section>
    <title>MATCH()</title>
<indexterm><primary>MATCH</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>MATCH</secondary></indexterm>
<para><computeroutput>bool MATCH (uint16_t measured_ticks, uint16_t desired_us)</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00762">762</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga0f9263ab71af2d2895add92f72a05ee9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gadab293a71386f20571db6d779d1d84b7"/><section>
    <title>MATCH_MARK()</title>
<indexterm><primary>MATCH_MARK</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>MATCH_MARK</secondary></indexterm>
<para><computeroutput>bool MATCH_MARK (uint16_t measured_ticks, uint16_t desired_us)</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00795">795</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gadab293a71386f20571db6d779d1d84b7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gab91e763e3ae44501f7c4f7b7ff8aca0f"/><section>
    <title>MATCH_SPACE()</title>
<indexterm><primary>MATCH_SPACE</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>MATCH_SPACE</secondary></indexterm>
<para><computeroutput>bool MATCH_SPACE (uint16_t measured_ticks, uint16_t desired_us)</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00828">828</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gab91e763e3ae44501f7c4f7b7ff8aca0f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga4472564ea96b1ee10b51f594f60d7aeb"/><section>
    <title>matchMark()</title>
<indexterm><primary>matchMark</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>matchMark</secondary></indexterm>
<para><computeroutput>bool matchMark (uint16_t aMeasuredTicks, uint16_t aMatchValueMicros)</computeroutput></para>
<para>Compensate for marks exceeded by demodulator hardware </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00769">769</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga4472564ea96b1ee10b51f594f60d7aeb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga7902b620f6c01463b5b6e50ef604ac8b"/><section>
    <title>matchSpace()</title>
<indexterm><primary>matchSpace</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>matchSpace</secondary></indexterm>
<para><computeroutput>bool matchSpace (uint16_t aMeasuredTicks, uint16_t aMatchValueMicros)</computeroutput></para>
<para>Compensate for spaces shortened by demodulator hardware </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00802">802</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga7902b620f6c01463b5b6e50ef604ac8b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga495b7f49ff71cde1289b118fac0f0674"/><section>
    <title>matchTicks()</title>
<indexterm><primary>matchTicks</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>matchTicks</secondary></indexterm>
<para><computeroutput>bool matchTicks (uint16_t aMeasuredTicks, uint16_t aMatchValueMicros)</computeroutput></para>
<para>Match functions Match function without compensating for marks exceeded or spaces shortened by demodulator hardware Currently not used </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00742">742</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga495b7f49ff71cde1289b118fac0f0674_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gada0f2fe0704a217c16ee497ba7b3630e"/><section>
    <title>printActiveIRProtocols()</title>
<indexterm><primary>printActiveIRProtocols</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>printActiveIRProtocols</secondary></indexterm>
<para><computeroutput>void printActiveIRProtocols (Print * aSerial)</computeroutput></para>
<para>Print functions Since a library should not allocate the &quot;Serial&quot; object, all functions require a pointer to a Print object. </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00864">864</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1gae24919a83cfbea5b2c53a851e1d3fed0"/><section>
    <title>printIRResultAsCVariables()</title>
<indexterm><primary>printIRResultAsCVariables</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>printIRResultAsCVariables</secondary></indexterm>
<para><computeroutput>void IRrecv::printIRResultAsCVariables (Print * aSerial)</computeroutput></para>
<para>Print results as C variables to be used for sendXXX() 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aSerial</entry><entry>
<para>The Print object on which to write, for Arduino you can use &amp;Serial. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01206">1206</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga4597a1f83fb256e1673291c424449c51"/><section>
    <title>printIRResultMinimal()</title>
<indexterm><primary>printIRResultMinimal</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>printIRResultMinimal</secondary></indexterm>
<para><computeroutput>void IRrecv::printIRResultMinimal (Print * aSerial)</computeroutput></para>
<para>Function to print protocol number, address, command, raw data and repeat flag of IrReceiver.decodedIRData in one short line. Does not print a Newline / does not end with println().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aSerial</entry><entry>
<para>The Print object on which to write, for Arduino you can use &amp;Serial. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01015">1015</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga0d8405bf5ec373798c74684b9c7c2e2d"/><section>
    <title>printIRResultRawFormatted()</title>
<indexterm><primary>printIRResultRawFormatted</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>printIRResultRawFormatted</secondary></indexterm>
<para><computeroutput>void IRrecv::printIRResultRawFormatted (Print * aSerial, bool aOutputMicrosecondsInsteadOfTicks = <computeroutput>true</computeroutput>
)</computeroutput></para>
<para>Dump out the timings in IrReceiver.decodedIRData.rawDataPtr-&gt;rawbuf[] array 8 values per line.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aSerial</entry><entry>
<para>The Print object on which to write, for Arduino you can use &amp;Serial. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01050">1050</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga1c11036a46d1e9624e283821f0a99aee"/><section>
    <title>printIRResultShort()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>printIRResultShort</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>printIRResultShort</secondary></indexterm>
<para><computeroutput>void IRrecv::printIRResultShort (Print * aSerial)</computeroutput></para>
<para>Function to print values and flags of IrReceiver.decodedIRData in one line. Ends with println().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aSerial</entry><entry>
<para>The Print object on which to write, for Arduino you can use &amp;Serial. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l01005">1005</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga1c11036a46d1e9624e283821f0a99aee_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga1c11036a46d1e9624e283821f0a99aee_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga545a2c08c0d21af0e95d65b052670bae"/><section>
    <title>printIRResultShort()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>printIRResultShort</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>printIRResultShort</secondary></indexterm>
<para><computeroutput>void printIRResultShort (Print * aSerial, <link linkend="_struct_i_r_data">IRData</link> * aIRDataPtr, uint16_t aLeadingSpaceTicks)</computeroutput></para>
<para>Internal function to print decoded result and flags in one line. Ends with println().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aSerial</entry><entry>
<para>The Print object on which to write, for Arduino you can use &amp;Serial. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00924">924</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga545a2c08c0d21af0e95d65b052670bae_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga471a42c75e807e43827e319852536e3c"/><section>
    <title>read()</title>
<indexterm><primary>read</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>read</secondary></indexterm>
<para><computeroutput><link linkend="_struct_i_r_data">IRData</link> * IRrecv::read ( )</computeroutput></para>
<para>If IR receiver data is available, returns pointer to IrReceiver.decodedIRData, else NULL. </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00233">233</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga471a42c75e807e43827e319852536e3c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gaf40f1e16b1cc911e47ac3f0a9b3b1ec5"/><section>
    <title>resume()</title>
<indexterm><primary>resume</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>resume</secondary></indexterm>
<para><computeroutput>void IRrecv::resume ( )</computeroutput></para>
<para>Restart the ISR state machine Enable receiving of the next value </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00188">188</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gaf40f1e16b1cc911e47ac3f0a9b3b1ec5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gac3c968e5acf5b0bbd1e1b87e0b5af61f"/><section>
    <title>setReceivePin()</title>
<indexterm><primary>setReceivePin</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>setReceivePin</secondary></indexterm>
<para><computeroutput>void IRrecv::setReceivePin (uint8_t aReceivePinNumber)</computeroutput></para>
<para>Sets / changes the receiver pin number </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00108">108</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gac3c968e5acf5b0bbd1e1b87e0b5af61f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga2c06971f0e4e0c4131930c8903eb21dc"/><section>
    <title>start()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>start</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>start</secondary></indexterm>
<para><computeroutput>void IRrecv::start ( )</computeroutput></para>
<para>Configures the timer and the state machine for IR reception. </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00119">119</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga2c06971f0e4e0c4131930c8903eb21dc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1ga9588bd3637dadf9b488a8d669030db9d"/><section>
    <title>start()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>start</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>start</secondary></indexterm>
<para><computeroutput>void IRrecv::start (uint32_t aMicrosecondsToAddToGapCounter)</computeroutput></para>
<para>Configures the timer and the state machine for IR reception. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aMicrosecondsToAddToGapCounter</entry><entry>
<para>To compensate for microseconds the timer was stopped / disabled. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00127">127</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_ga9588bd3637dadf9b488a8d669030db9d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group___receiving_1gaadb62786cd826cd539683c03734e46fe"/><section>
    <title>stop()</title>
<indexterm><primary>stop</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>stop</secondary></indexterm>
<para><computeroutput>void IRrecv::stop ( )</computeroutput></para>
<para>Disables the timer for IR reception. Alias for </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00138">138</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gaadb62786cd826cd539683c03734e46fe_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group___receiving_gaadb62786cd826cd539683c03734e46fe_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_group___receiving_1ga938046a49af083b7d470e61fd77e12ed"/><section>
    <title>irparams</title>
<indexterm><primary>irparams</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>irparams</secondary></indexterm>
<para><computeroutput>struct <link linkend="_structirparams__struct">irparams_struct</link> irparams</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00047">47</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga6813a2b456e5359ce674699c85a61cf9"/><section>
    <title>IrReceiver</title>
<indexterm><primary>IrReceiver</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>IrReceiver</secondary></indexterm>
<para><computeroutput><link linkend="_class_i_rrecv">IRrecv</link> IrReceiver</computeroutput></para>
<para>The receiver instance </para>
<para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00042">42</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga3f8125d5a7cde4fca3ece58e361296f9"/><section>
    <title>sBiphaseDecodeRawbuffOffset</title>
<indexterm><primary>sBiphaseDecodeRawbuffOffset</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>sBiphaseDecodeRawbuffOffset</secondary></indexterm>
<para><computeroutput>uint8_t sBiphaseDecodeRawbuffOffset</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00578">578</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1gae25d907bed7a0f0298f9cf105d89f86f"/><section>
    <title>sBiphaseTimeUnit</title>
<indexterm><primary>sBiphaseTimeUnit</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>sBiphaseTimeUnit</secondary></indexterm>
<para><computeroutput>uint16_t sBiphaseTimeUnit</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00581">581</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga800106974e301f9dedf8acb891800e0b"/><section>
    <title>sCurrentTimingIntervals</title>
<indexterm><primary>sCurrentTimingIntervals</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>sCurrentTimingIntervals</secondary></indexterm>
<para><computeroutput>uint16_t sCurrentTimingIntervals</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00579">579</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
<anchor xml:id="_group___receiving_1ga1b4a7361ca04152a3dd0a8681a721325"/><section>
    <title>sUsedTimingIntervals</title>
<indexterm><primary>sUsedTimingIntervals</primary><secondary>Receiving IR data for multiple protocols</secondary></indexterm>
<indexterm><primary>Receiving IR data for multiple protocols</primary><secondary>sUsedTimingIntervals</secondary></indexterm>
<para><computeroutput>uint8_t sUsedTimingIntervals</computeroutput></para><para>
Definition at line <link linkend="__i_r_receive_8hpp_source_1l00580">580</link> of file <link linkend="__i_r_receive_8hpp_source">IRReceive.hpp</link>.</para>
</section>
</section>
</section>
